{"ast":null,"code":"import { concat } from './array';\nimport { identity } from './identity';\nimport { isFunction } from './inspect'; // Note for functional components:\n// In functional components, `slots` is a function so it must be called\n// first before passing to the below methods. `scopedSlots` is always an\n// object and may be undefined (for Vue < 2.6.x)\n\n/**\r\n * Returns true if either scoped or unscoped named slot exists\r\n *\r\n * @param {String, Array} name or name[]\r\n * @param {Object} scopedSlots\r\n * @param {Object} slots\r\n * @returns {Array|undefined} VNodes\r\n */\n\nexport var hasNormalizedSlot = function hasNormalizedSlot(names) {\n  var $scopedSlots = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var $slots = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  // Ensure names is an array\n  names = concat(names).filter(identity); // Returns true if the either a $scopedSlot or $slot exists with the specified name\n\n  return names.some(function (name) {\n    return $scopedSlots[name] || $slots[name];\n  });\n};\n/**\r\n * Returns VNodes for named slot either scoped or unscoped\r\n *\r\n * @param {String, Array} name or name[]\r\n * @param {String} scope\r\n * @param {Object} scopedSlots\r\n * @param {Object} slots\r\n * @returns {Array|undefined} VNodes\r\n */\n\nexport var normalizeSlot = function normalizeSlot(names) {\n  var scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var $scopedSlots = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var $slots = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  // Ensure names is an array\n  names = concat(names).filter(identity);\n  var slot;\n  for (var i = 0; i < names.length && !slot; i++) {\n    var name = names[i];\n    slot = $scopedSlots[name] || $slots[name];\n  } // Note: in Vue 2.6.x, all named slots are also scoped slots\n\n  return isFunction(slot) ? slot(scope) : slot;\n};","map":{"version":3,"names":["concat","identity","isFunction","hasNormalizedSlot","names","$scopedSlots","arguments","length","undefined","$slots","filter","some","name","normalizeSlot","scope","slot","i"],"sources":["C:/Users/Pedro Uema/Desktop/thaiweb/front-end/node_modules/bootstrap-vue/esm/utils/normalize-slot.js"],"sourcesContent":["import { concat } from './array';\r\nimport { identity } from './identity';\r\nimport { isFunction } from './inspect'; // Note for functional components:\r\n// In functional components, `slots` is a function so it must be called\r\n// first before passing to the below methods. `scopedSlots` is always an\r\n// object and may be undefined (for Vue < 2.6.x)\r\n\r\n/**\r\n * Returns true if either scoped or unscoped named slot exists\r\n *\r\n * @param {String, Array} name or name[]\r\n * @param {Object} scopedSlots\r\n * @param {Object} slots\r\n * @returns {Array|undefined} VNodes\r\n */\r\n\r\nexport var hasNormalizedSlot = function hasNormalizedSlot(names) {\r\n  var $scopedSlots = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n  var $slots = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\r\n  // Ensure names is an array\r\n  names = concat(names).filter(identity); // Returns true if the either a $scopedSlot or $slot exists with the specified name\r\n\r\n  return names.some(function (name) {\r\n    return $scopedSlots[name] || $slots[name];\r\n  });\r\n};\r\n/**\r\n * Returns VNodes for named slot either scoped or unscoped\r\n *\r\n * @param {String, Array} name or name[]\r\n * @param {String} scope\r\n * @param {Object} scopedSlots\r\n * @param {Object} slots\r\n * @returns {Array|undefined} VNodes\r\n */\r\n\r\nexport var normalizeSlot = function normalizeSlot(names) {\r\n  var scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n  var $scopedSlots = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\r\n  var $slots = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\r\n  // Ensure names is an array\r\n  names = concat(names).filter(identity);\r\n  var slot;\r\n\r\n  for (var i = 0; i < names.length && !slot; i++) {\r\n    var name = names[i];\r\n    slot = $scopedSlots[name] || $slots[name];\r\n  } // Note: in Vue 2.6.x, all named slots are also scoped slots\r\n\r\n\r\n  return isFunction(slot) ? slot(scope) : slot;\r\n};"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,SAASC,QAAQ,QAAQ,YAAY;AACrC,SAASC,UAAU,QAAQ,WAAW,CAAC,CAAC;AACxC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIC,iBAAiB,GAAG,SAASA,iBAAiBA,CAACC,KAAK,EAAE;EAC/D,IAAIC,YAAY,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACzF,IAAIG,MAAM,GAAGH,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACnF;EACAF,KAAK,GAAGJ,MAAM,CAACI,KAAK,CAAC,CAACM,MAAM,CAACT,QAAQ,CAAC,CAAC,CAAC;;EAExC,OAAOG,KAAK,CAACO,IAAI,CAAC,UAAUC,IAAI,EAAE;IAChC,OAAOP,YAAY,CAACO,IAAI,CAAC,IAAIH,MAAM,CAACG,IAAI,CAAC;EAC3C,CAAC,CAAC;AACJ,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIC,aAAa,GAAG,SAASA,aAAaA,CAACT,KAAK,EAAE;EACvD,IAAIU,KAAK,GAAGR,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAClF,IAAID,YAAY,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACzF,IAAIG,MAAM,GAAGH,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACnF;EACAF,KAAK,GAAGJ,MAAM,CAACI,KAAK,CAAC,CAACM,MAAM,CAACT,QAAQ,CAAC;EACtC,IAAIc,IAAI;EAER,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,KAAK,CAACG,MAAM,IAAI,CAACQ,IAAI,EAAEC,CAAC,EAAE,EAAE;IAC9C,IAAIJ,IAAI,GAAGR,KAAK,CAACY,CAAC,CAAC;IACnBD,IAAI,GAAGV,YAAY,CAACO,IAAI,CAAC,IAAIH,MAAM,CAACG,IAAI,CAAC;EAC3C,CAAC,CAAC;;EAGF,OAAOV,UAAU,CAACa,IAAI,CAAC,GAAGA,IAAI,CAACD,KAAK,CAAC,GAAGC,IAAI;AAC9C,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { debounce, extend } from './util';\nimport { Browser } from './browser';\n/**\n * EventHandler class provides option to add, remove, clear and trigger events to a HTML DOM element\n * ```html\n * <div id=\"Eventdiv\">  </div>\n * <script>\n *   let node: HTMLElement = document.querySelector(\"#Eventdiv\");\n *   EventHandler.addEventListener(node, \"click\", function(){\n *       // click handler function code\n *   });\n *   EventHandler.addEventListener(node, \"onmouseover\", function(){\n *       // mouseover handler function code\n *   });\n *   EventHandler.removeEventListener(node, \"click\", function(){\n *       // click handler function code\n *   });\n *   eventObj.clearEvents();\n * </script>\n * ```\n */\nvar EventHandler = /** @class */function () {\n  function EventHandler() {}\n  // to get the event data based on element\n  EventHandler.addOrGetEventData = function (element) {\n    if ('__eventList' in element) {\n      return element.__eventList.events;\n    } else {\n      element.__eventList = {};\n      return element.__eventList.events = [];\n    }\n  };\n  /**\n   * Add an event to the specified DOM element.\n   *\n   * @param {any} element - Target HTML DOM element\n   * @param {string} eventName - A string that specifies the name of the event\n   * @param {Function} listener - Specifies the function to run when the event occurs\n   * @param {Object} bindTo - A object that binds 'this' variable in the event handler\n   * @param {number} intDebounce - Specifies at what interval given event listener should be triggered.\n   * @returns {Function} ?\n   */\n  EventHandler.add = function (element, eventName, listener, bindTo, intDebounce) {\n    var eventData = EventHandler.addOrGetEventData(element);\n    var debounceListener;\n    if (intDebounce) {\n      debounceListener = debounce(listener, intDebounce);\n    } else {\n      debounceListener = listener;\n    }\n    if (bindTo) {\n      debounceListener = debounceListener.bind(bindTo);\n    }\n    var event = eventName.split(' ');\n    for (var i = 0; i < event.length; i++) {\n      eventData.push({\n        name: event[parseInt(i.toString(), 10)],\n        listener: listener,\n        debounce: debounceListener\n      });\n      if (Browser.isIE) {\n        element.addEventListener(event[parseInt(i.toString(), 10)], debounceListener);\n      } else {\n        element.addEventListener(event[parseInt(i.toString(), 10)], debounceListener, {\n          passive: false\n        });\n      }\n    }\n    return debounceListener;\n  };\n  /**\n   * Remove an event listener that has been attached before.\n   *\n   * @param {any} element - Specifies the target html element to remove the event\n   * @param {string} eventName - A string that specifies the name of the event to remove\n   * @param {Function} listener - Specifies the function to remove\n   * @returns {void} ?\n   */\n  EventHandler.remove = function (element, eventName, listener) {\n    var eventData = EventHandler.addOrGetEventData(element);\n    var event = eventName.split(' ');\n    var _loop_1 = function (j) {\n      var index = -1;\n      var debounceListener;\n      if (eventData && eventData.length !== 0) {\n        eventData.some(function (x, i) {\n          return x.name === event[parseInt(j.toString(), 10)] && x.listener === listener ? (index = i, debounceListener = x.debounce, true) : false;\n        });\n      }\n      if (index !== -1) {\n        eventData.splice(index, 1);\n      }\n      if (debounceListener) {\n        element.removeEventListener(event[parseInt(j.toString(), 10)], debounceListener);\n      }\n    };\n    for (var j = 0; j < event.length; j++) {\n      _loop_1(j);\n    }\n  };\n  /**\n   * Clear all the event listeners that has been previously attached to the element.\n   *\n   * @param {any} element - Specifies the target html element to clear the events\n   * @returns {void} ?\n   */\n  EventHandler.clearEvents = function (element) {\n    var eventData;\n    var copyData;\n    // eslint-disable-next-line\n    eventData = EventHandler.addOrGetEventData(element);\n    // eslint-disable-next-line\n    copyData = extend([], copyData, eventData);\n    for (var i = 0; i < copyData.length; i++) {\n      element.removeEventListener(copyData[parseInt(i.toString(), 10)].name, copyData[parseInt(i.toString(), 10)].debounce);\n      eventData.shift();\n    }\n  };\n  /**\n   * Trigger particular event of the element.\n   *\n   * @param {any} element - Specifies the target html element to trigger the events\n   * @param {string} eventName - Specifies the event to trigger for the specified element.\n   * Can be a custom event, or any of the standard events.\n   * @param {any} eventProp - Additional parameters to pass on to the event properties\n   * @returns {void} ?\n   */\n  EventHandler.trigger = function (element, eventName, eventProp) {\n    var eventData = EventHandler.addOrGetEventData(element);\n    for (var _i = 0, eventData_1 = eventData; _i < eventData_1.length; _i++) {\n      var event_1 = eventData_1[_i];\n      if (event_1.name === eventName) {\n        event_1.debounce.call(this, eventProp);\n      }\n    }\n  };\n  return EventHandler;\n}();\nexport { EventHandler };","map":{"version":3,"names":["debounce","extend","Browser","EventHandler","addOrGetEventData","element","__eventList","events","add","eventName","listener","bindTo","intDebounce","eventData","debounceListener","bind","event","split","i","length","push","name","parseInt","toString","isIE","addEventListener","passive","remove","_loop_1","j","index","some","x","splice","removeEventListener","clearEvents","copyData","shift","trigger","eventProp","_i","eventData_1","event_1","call"],"sources":["C:/Users/Pedro Uema/Desktop/thaiweb/front-end/node_modules/@syncfusion/ej2-base/src/event-handler.js"],"sourcesContent":["import { debounce, extend } from './util';\nimport { Browser } from './browser';\n/**\n * EventHandler class provides option to add, remove, clear and trigger events to a HTML DOM element\n * ```html\n * <div id=\"Eventdiv\">  </div>\n * <script>\n *   let node: HTMLElement = document.querySelector(\"#Eventdiv\");\n *   EventHandler.addEventListener(node, \"click\", function(){\n *       // click handler function code\n *   });\n *   EventHandler.addEventListener(node, \"onmouseover\", function(){\n *       // mouseover handler function code\n *   });\n *   EventHandler.removeEventListener(node, \"click\", function(){\n *       // click handler function code\n *   });\n *   eventObj.clearEvents();\n * </script>\n * ```\n */\nvar EventHandler = /** @class */ (function () {\n    function EventHandler() {\n    }\n    // to get the event data based on element\n    EventHandler.addOrGetEventData = function (element) {\n        if ('__eventList' in element) {\n            return element.__eventList.events;\n        }\n        else {\n            element.__eventList = {};\n            return element.__eventList.events = [];\n        }\n    };\n    /**\n     * Add an event to the specified DOM element.\n     *\n     * @param {any} element - Target HTML DOM element\n     * @param {string} eventName - A string that specifies the name of the event\n     * @param {Function} listener - Specifies the function to run when the event occurs\n     * @param {Object} bindTo - A object that binds 'this' variable in the event handler\n     * @param {number} intDebounce - Specifies at what interval given event listener should be triggered.\n     * @returns {Function} ?\n     */\n    EventHandler.add = function (element, eventName, listener, bindTo, intDebounce) {\n        var eventData = EventHandler.addOrGetEventData(element);\n        var debounceListener;\n        if (intDebounce) {\n            debounceListener = debounce(listener, intDebounce);\n        }\n        else {\n            debounceListener = listener;\n        }\n        if (bindTo) {\n            debounceListener = debounceListener.bind(bindTo);\n        }\n        var event = eventName.split(' ');\n        for (var i = 0; i < event.length; i++) {\n            eventData.push({\n                name: event[parseInt(i.toString(), 10)],\n                listener: listener,\n                debounce: debounceListener\n            });\n            if (Browser.isIE) {\n                element.addEventListener(event[parseInt(i.toString(), 10)], debounceListener);\n            }\n            else {\n                element.addEventListener(event[parseInt(i.toString(), 10)], debounceListener, { passive: false });\n            }\n        }\n        return debounceListener;\n    };\n    /**\n     * Remove an event listener that has been attached before.\n     *\n     * @param {any} element - Specifies the target html element to remove the event\n     * @param {string} eventName - A string that specifies the name of the event to remove\n     * @param {Function} listener - Specifies the function to remove\n     * @returns {void} ?\n     */\n    EventHandler.remove = function (element, eventName, listener) {\n        var eventData = EventHandler.addOrGetEventData(element);\n        var event = eventName.split(' ');\n        var _loop_1 = function (j) {\n            var index = -1;\n            var debounceListener;\n            if (eventData && eventData.length !== 0) {\n                eventData.some(function (x, i) {\n                    return x.name === event[parseInt(j.toString(), 10)] && x.listener === listener ?\n                        (index = i, debounceListener = x.debounce, true) : false;\n                });\n            }\n            if (index !== -1) {\n                eventData.splice(index, 1);\n            }\n            if (debounceListener) {\n                element.removeEventListener(event[parseInt(j.toString(), 10)], debounceListener);\n            }\n        };\n        for (var j = 0; j < event.length; j++) {\n            _loop_1(j);\n        }\n    };\n    /**\n     * Clear all the event listeners that has been previously attached to the element.\n     *\n     * @param {any} element - Specifies the target html element to clear the events\n     * @returns {void} ?\n     */\n    EventHandler.clearEvents = function (element) {\n        var eventData;\n        var copyData;\n        // eslint-disable-next-line\n        eventData = EventHandler.addOrGetEventData(element);\n        // eslint-disable-next-line\n        copyData = extend([], copyData, eventData);\n        for (var i = 0; i < copyData.length; i++) {\n            element.removeEventListener(copyData[parseInt(i.toString(), 10)].name, copyData[parseInt(i.toString(), 10)].debounce);\n            eventData.shift();\n        }\n    };\n    /**\n     * Trigger particular event of the element.\n     *\n     * @param {any} element - Specifies the target html element to trigger the events\n     * @param {string} eventName - Specifies the event to trigger for the specified element.\n     * Can be a custom event, or any of the standard events.\n     * @param {any} eventProp - Additional parameters to pass on to the event properties\n     * @returns {void} ?\n     */\n    EventHandler.trigger = function (element, eventName, eventProp) {\n        var eventData = EventHandler.addOrGetEventData(element);\n        for (var _i = 0, eventData_1 = eventData; _i < eventData_1.length; _i++) {\n            var event_1 = eventData_1[_i];\n            if (event_1.name === eventName) {\n                event_1.debounce.call(this, eventProp);\n            }\n        }\n    };\n    return EventHandler;\n}());\nexport { EventHandler };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
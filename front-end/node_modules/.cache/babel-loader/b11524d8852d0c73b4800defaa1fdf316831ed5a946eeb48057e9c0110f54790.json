{"ast":null,"code":"import { isDate, isObject, isUndefinedOrNull } from './inspect';\nimport { keys } from './object';\nimport { toString } from './string'; // Recursively stringifies the values of an object, space separated, in an\n// SSR safe deterministic way (keys are sorted before stringification)\n//\n//   ex:\n//     { b: 3, c: { z: 'zzz', d: null, e: 2 }, d: [10, 12, 11], a: 'one' }\n//   becomes\n//     'one 3 2 zzz 10 12 11'\n//\n// Strings are returned as-is\n// Numbers get converted to string\n// `null` and `undefined` values are filtered out\n// Dates are converted to their native string format\n\nexport var stringifyObjectValues = function stringifyObjectValues(value) {\n  if (isUndefinedOrNull(value)) {\n    return '';\n  } // Arrays are also object, and keys just returns the array indexes\n  // Date objects we convert to strings\n\n  if (isObject(value) && !isDate(value)) {\n    return keys(value).sort() // Sort to prevent SSR issues on pre-rendered sorted tables\n    .map(function (k) {\n      return stringifyObjectValues(value[k]);\n    }).filter(function (v) {\n      return !!v;\n    }) // Ignore empty strings\n    .join(' ');\n  }\n  return toString(value);\n};","map":{"version":3,"names":["isDate","isObject","isUndefinedOrNull","keys","toString","stringifyObjectValues","value","sort","map","k","filter","v","join"],"sources":["C:/Users/Pedro Uema/Desktop/thaiweb/front-end/node_modules/bootstrap-vue/esm/utils/stringify-object-values.js"],"sourcesContent":["import { isDate, isObject, isUndefinedOrNull } from './inspect';\r\nimport { keys } from './object';\r\nimport { toString } from './string'; // Recursively stringifies the values of an object, space separated, in an\r\n// SSR safe deterministic way (keys are sorted before stringification)\r\n//\r\n//   ex:\r\n//     { b: 3, c: { z: 'zzz', d: null, e: 2 }, d: [10, 12, 11], a: 'one' }\r\n//   becomes\r\n//     'one 3 2 zzz 10 12 11'\r\n//\r\n// Strings are returned as-is\r\n// Numbers get converted to string\r\n// `null` and `undefined` values are filtered out\r\n// Dates are converted to their native string format\r\n\r\nexport var stringifyObjectValues = function stringifyObjectValues(value) {\r\n  if (isUndefinedOrNull(value)) {\r\n    return '';\r\n  } // Arrays are also object, and keys just returns the array indexes\r\n  // Date objects we convert to strings\r\n\r\n\r\n  if (isObject(value) && !isDate(value)) {\r\n    return keys(value).sort() // Sort to prevent SSR issues on pre-rendered sorted tables\r\n    .map(function (k) {\r\n      return stringifyObjectValues(value[k]);\r\n    }).filter(function (v) {\r\n      return !!v;\r\n    }) // Ignore empty strings\r\n    .join(' ');\r\n  }\r\n\r\n  return toString(value);\r\n};"],"mappings":"AAAA,SAASA,MAAM,EAAEC,QAAQ,EAAEC,iBAAiB,QAAQ,WAAW;AAC/D,SAASC,IAAI,QAAQ,UAAU;AAC/B,SAASC,QAAQ,QAAQ,UAAU,CAAC,CAAC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIC,qBAAqB,GAAG,SAASA,qBAAqBA,CAACC,KAAK,EAAE;EACvE,IAAIJ,iBAAiB,CAACI,KAAK,CAAC,EAAE;IAC5B,OAAO,EAAE;EACX,CAAC,CAAC;EACF;;EAGA,IAAIL,QAAQ,CAACK,KAAK,CAAC,IAAI,CAACN,MAAM,CAACM,KAAK,CAAC,EAAE;IACrC,OAAOH,IAAI,CAACG,KAAK,CAAC,CAACC,IAAI,EAAE,CAAC;IAAA,CACzBC,GAAG,CAAC,UAAUC,CAAC,EAAE;MAChB,OAAOJ,qBAAqB,CAACC,KAAK,CAACG,CAAC,CAAC,CAAC;IACxC,CAAC,CAAC,CAACC,MAAM,CAAC,UAAUC,CAAC,EAAE;MACrB,OAAO,CAAC,CAACA,CAAC;IACZ,CAAC,CAAC,CAAC;IAAA,CACFC,IAAI,CAAC,GAAG,CAAC;EACZ;EAEA,OAAOR,QAAQ,CAACE,KAAK,CAAC;AACxB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
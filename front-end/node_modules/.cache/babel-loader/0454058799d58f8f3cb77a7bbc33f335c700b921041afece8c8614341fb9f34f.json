{"ast":null,"code":"import _defineProperty from \"C:/Users/Pedro Uema/Desktop/thaiweb/front-end/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.unshift.js\";\n/*!\n * Chart.js v4.2.1\n * https://www.chartjs.org\n * (c) 2023 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as _elementsEqual, ai as _isClickEvent, aj as _isBetween, ak as _readValueToProps, al as _updateBezierControlPoints, am as _computeSegments, an as _boundSegments, ao as _steppedInterpolation, ap as _bezierInterpolation, aq as _pointInLine, ar as _steppedLineTo, as as _bezierCurveTo, at as drawPoint, au as addRoundedRectPath, av as toTRBL, aw as toTRBLCorners, ax as _boundSegment, ay as _normalizeAngle, az as getRtlAdapter, aA as overrideTextDirection, aB as _textX, aC as restoreTextDirection, aD as drawPointLegend, aE as distanceBetweenPoints, aF as noop, aG as _setMinAndMaxByKey, aH as niceNum, aI as almostWhole, aJ as almostEquals, aK as _decimalPlaces, aL as Ticks, aM as log10, aN as _longestText, aO as _filterBetween, aP as _lookup } from './chunks/helpers.segment.js';\nexport { aL as Ticks, d as defaults } from './chunks/helpers.segment.js';\nimport '@kurkle/color';\nclass Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n    this._running = true;\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n      this._request = null;\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n  _update(date = Date.now()) {\n    let remaining = 0;\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n      for (; i >= 0; --i) {\n        item = items[i];\n        if (item._active) {\n          if (item._total > anims.duration) {\n            anims.duration = item._total;\n          }\n          item.tick(date);\n          draw = true;\n        } else {\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n      if (draw) {\n        chart.draw();\n        this._notify(chart, anims, date, 'progress');\n      }\n      if (!items.length) {\n        anims.running = false;\n        this._notify(chart, anims, date, 'complete');\n        anims.initial = false;\n      }\n      remaining += items.length;\n    });\n    this._lastDate = date;\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n    return anims;\n  }\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n    this._getAnims(chart).items.push(...items);\n  }\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n  start(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims) {\n      return;\n    }\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n    this._refresh();\n  }\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n    return true;\n  }\n  stop(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.items.length) {\n      return;\n    }\n    const items = anims.items;\n    let i = items.length - 1;\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n    anims.items = [];\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n}\nvar animator = /* #__PURE__ */new Animator();\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  color(from, to, factor) {\n    const c0 = color(from || transparent);\n    const c1 = c0.valid && color(to || transparent);\n    return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n  },\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\nclass Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n  active() {\n    return this._active;\n  }\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n  cancel() {\n    if (this._active) {\n      this.tick(Date.now());\n      this._active = false;\n      this._notify(false);\n    }\n  }\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n    this._active = from !== to && (loop || elapsed < duration);\n    if (!this._active) {\n      this._target[prop] = to;\n      this._notify(true);\n      return;\n    }\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n    factor = elapsed / duration % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n    this._target[prop] = this._fn(from, to, factor);\n  }\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({\n        res,\n        rej\n      });\n    });\n  }\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n}\nclass Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n    const animationOptions = Object.keys(defaults.animation);\n    const animatedProps = this._properties;\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n      if (!isObject(cfg)) {\n        return;\n      }\n      const resolved = {};\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach(prop => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n    if (!options) {\n      return [];\n    }\n    const animations = this._createAnimations(options, newOptions);\n    if (newOptions.$shared) {\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {});\n    }\n    return animations;\n  }\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n      if (animation) {\n        if (cfg && animation.active()) {\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n      if (!cfg || !cfg.duration) {\n        target[prop] = value;\n        continue;\n      }\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n    return animations;\n  }\n  update(target, values) {\n    if (this._properties.size === 0) {\n      Object.assign(target, values);\n      return;\n    }\n    const animations = this._createAnimations(target, values);\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n}\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  let options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    target.options = options = Object.assign({}, options, {\n      $shared: false,\n      $animations: {}\n    });\n  }\n  return options;\n}\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\nfunction toClip(value) {\n  let t, r, b, l;\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n  let i, ilen;\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\nfunction applyStack(stack, value, dsIndex, options = {}) {\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n  if (value === null) {\n    return;\n  }\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n      value += otherValue;\n    }\n  }\n  return value;\n}\nfunction convertObjectDataToArray(data) {\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      x: key,\n      y: data[key]\n    };\n  }\n  return adata;\n}\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n  const {\n    min,\n    max,\n    minDefined,\n    maxDefined\n  } = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n    if (positive && value > 0 || !positive && value < 0) {\n      return meta.index;\n    }\n  }\n  return null;\n}\nfunction updateStacks(controller, parsed) {\n  const {\n    chart,\n    _cachedMeta: meta\n  } = controller;\n  const stacks = chart._stacks || (chart._stacks = {});\n  const {\n    iScale,\n    vScale,\n    index: datasetIndex\n  } = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {\n      [iAxis]: index,\n      [vAxis]: value\n    } = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n    const visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n  return createContext(parent, {\n    active: false,\n    dataset: undefined,\n    datasetIndex: index,\n    index,\n    mode: 'default',\n    type: 'dataset'\n  });\n}\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\nfunction clearStacks(meta, items) {\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n  items = items || meta._parsed;\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n    delete stacks[axis][datasetIndex];\n    if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n      delete stacks[axis]._visualValues[datasetIndex];\n    }\n  }\n}\nconst isDirectUpdateMode = mode => mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked && {\n  keys: getSortedDatasetIndices(chart, true),\n  values: null\n};\nclass DatasetController {\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = new.target.datasetElementType;\n    this.dataElementType = new.target.dataElementType;\n    this.initialize();\n  }\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n    }\n  }\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n    this.index = datasetIndex;\n  }\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale ? meta.vScale : meta.iScale;\n  }\n  reset() {\n    this._update('reset');\n  }\n  _destroy() {\n    const meta = this._cachedMeta;\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n    if (isObject(data)) {\n      this._data = convertObjectDataToArray(data);\n    } else if (_data !== data) {\n      if (_data) {\n        unlistenArrayEvents(_data, this);\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n  addElements() {\n    const meta = this._cachedMeta;\n    this._dataCheck();\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n    this._dataCheck();\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n    this._resyncElements(resetNewElements);\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n    }\n  }\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n  parse(start, count) {\n    const {\n      _cachedMeta: meta,\n      _data: data\n    } = this;\n    const {\n      iScale,\n      _stacked\n    } = meta;\n    const iAxis = iScale.axis;\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n          prev = cur;\n        }\n      }\n      meta._sorted = sorted;\n    }\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n  parsePrimitiveData(meta, data, start, count) {\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n    return parsed;\n  }\n  parseArrayData(meta, data, start, count) {\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n    return parsed;\n  }\n  parseObjectData(meta, data, start, count) {\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const {\n      xAxisKey = 'x',\n      yAxisKey = 'y'\n    } = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n    return parsed;\n  }\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]._visualValues\n    };\n    return applyStack(stack, value, meta.index, {\n      mode\n    });\n  }\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n    const otherScale = this._getOtherScale(scale);\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {\n      min: Number.POSITIVE_INFINITY,\n      max: Number.NEGATIVE_INFINITY\n    };\n    const {\n      min: otherMin,\n      max: otherMax\n    } = getUserBounds(otherScale);\n    let i, parsed;\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n      if (sorted) {\n        break;\n      }\n    }\n    if (sorted) {\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n    return range;\n  }\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n      if (isNumberFinite(value)) {\n        values.push(value);\n      }\n    }\n    return values;\n  }\n  getMaxOverflow() {\n    return false;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n  update(mode) {}\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || elements.length - start;\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n      if (element.hidden) {\n        continue;\n      }\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n  }\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n  _resolveElementOptions(elementType, mode = 'default', index) {\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n    const context = () => this.getContext(index, active, mode);\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n    if (values.$shared) {\n      values.$shared = sharing;\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n    return values;\n  }\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n    if (cached) {\n      return cached;\n    }\n    let options;\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n    const animations = new Animations(chart, options && options.animations);\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n    return animations;\n  }\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {\n      sharedOptions,\n      includeOptions\n    };\n  }\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n    this._resolveAnimations(index, mode, active).update(element, {\n      options: !active && this.getSharedOptions(options) || options\n    });\n  }\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n    this._syncList = [];\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n    if (count) {\n      this.parse(0, count);\n    }\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n  _insertElements(start, count, resetNewElements = true) {\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n    const move = arr => {\n      arr.length += count;\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n    move(data);\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n    this.parse(start, count);\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n  updateElements(element, start, count, mode) {}\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n    meta.data.splice(start, count);\n  }\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n  _onDataPush() {\n    const count = arguments.length;\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n    const newCount = arguments.length - 2;\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n}\n_defineProperty(DatasetController, \"defaults\", {});\n_defineProperty(DatasetController, \"datasetElementType\", null);\n_defineProperty(DatasetController, \"dataElementType\", null);\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n  return scale._cache.$bar;\n}\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      return;\n    }\n    if (defined(prev)) {\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n  return min;\n}\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - size / 2\n  };\n}\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n  if (prev === null) {\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n  if (next === null) {\n    next = curr + curr - prev;\n  }\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n  item[vScale.axis] = barEnd;\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {\n    start,\n    end,\n    reverse,\n    top,\n    bottom\n  };\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n  if (edge === true) {\n    properties.borderSkipped = {\n      top: true,\n      right: true,\n      bottom: true,\n      left: true\n    };\n    return;\n  }\n  const {\n    start,\n    end,\n    reverse,\n    top,\n    bottom\n  } = borderProps(properties);\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, {\n  inflateAmount\n}, ratio) {\n  properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nclass BarController extends DatasetController {\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n  parseObjectData(meta, data, start, count) {\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const {\n      xAxisKey = 'x',\n      yAxisKey = 'y'\n    } = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n    return parsed;\n  }\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n    if (custom && scale === this._cachedMeta.vScale) {\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n  getMaxOverflow() {\n    return 0;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      index,\n      _cachedMeta: {\n        vScale\n      }\n    } = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n    const ruler = this._getRuler();\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n        base,\n        head: base\n      } : this._calculateBarValuePixels(i);\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n      const stack = (parsed._stacks || {})[vScale.axis];\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n  _getStacks(last, dataIndex) {\n    const {\n      iScale\n    } = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type).filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n    const skipNull = meta => {\n      const parsed = meta.controller.getParsed(dataIndex);\n      const val = parsed && parsed[meta.vScale.axis];\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n        stacks.push(meta.stack);\n      }\n      if (meta.index === last) {\n        break;\n      }\n    }\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n    return stacks;\n  }\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n    const index = name !== undefined ? stacks.indexOf(name) : -1;\n    return index === -1 ? stacks.length - 1 : index;\n  }\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n  _calculateBarValuePixels(index) {\n    const {\n      _cachedMeta: {\n        vScale,\n        _stacked,\n        index: datasetIndex\n      },\n      options: {\n        base: baseValue,\n        minBarLength\n      }\n    } = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n      start += value;\n    }\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      head = base;\n    }\n    size = head - base;\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n      if (_stacked && !floating) {\n        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n      }\n    }\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n      center = range.start + range.chunk * stackIndex + range.chunk / 2;\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n}\n_defineProperty(BarController, \"id\", 'bar');\n_defineProperty(BarController, \"defaults\", {\n  datasetElementType: false,\n  dataElementType: 'bar',\n  categoryPercentage: 0.8,\n  barPercentage: 0.9,\n  grouped: true,\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'base', 'width', 'height']\n    }\n  }\n});\n_defineProperty(BarController, \"overrides\", {\n  scales: {\n    _index_: {\n      type: 'category',\n      offset: true,\n      grid: {\n        offset: true\n      }\n    },\n    _value_: {\n      type: 'linear',\n      beginAtZero: true\n    }\n  }\n});\nclass BubbleController extends DatasetController {\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n    return parsed;\n  }\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n    let max = 0;\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n    return max > 0 && max;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n  update(mode) {\n    const points = this._cachedMeta.data;\n    this.updateElements(points, 0, points.length, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale\n    } = this._cachedMeta;\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n    if (values.$shared) {\n      values = Object.assign({}, values, {\n        $shared: false\n      });\n    }\n    const radius = values.radius;\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n    return values;\n  }\n}\n_defineProperty(BubbleController, \"id\", 'bubble');\n_defineProperty(BubbleController, \"defaults\", {\n  datasetElementType: false,\n  dataElementType: 'point',\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'borderWidth', 'radius']\n    }\n  }\n});\n_defineProperty(BubbleController, \"overrides\", {\n  scales: {\n    x: {\n      type: 'linear'\n    },\n    y: {\n      type: 'linear'\n    }\n  }\n});\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {\n    ratioX,\n    ratioY,\n    offsetX,\n    offsetY\n  };\n}\nclass DoughnutController extends DatasetController {\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n  linkScales() {}\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = i => +data[i];\n      if (isObject(data[start])) {\n        const {\n          key = 'value'\n        } = this._parsing;\n        getter = i => +resolveObjectKey(data[i], key);\n      }\n      let i, ilen;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n        const rotation = controller._getRotation();\n        const circumference = controller._getCircumference();\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n    return {\n      rotation: min,\n      circumference: max - min\n    };\n  }\n  update(mode) {\n    const chart = this.chart;\n    const {\n      chartArea\n    } = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n    const chartWeight = this._getRingWeight(this.index);\n    const {\n      circumference,\n      rotation\n    } = this._getRotationExtents();\n    const {\n      ratioX,\n      ratioY,\n      offsetX,\n      offsetY\n    } = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n    meta.total = this.calculateTotal();\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const circumference = this._getCircumference();\n    if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    let startAngle = this._getRotation();\n    let i;\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n      startAngle += circumference;\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n    return total;\n  }\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n    return 0;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value\n    };\n  }\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n    if (!arcs) {\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n    if (!arcs) {\n      return 0;\n    }\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n    return max;\n  }\n  getMaxOffset(arcs) {\n    let max = 0;\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n    return max;\n  }\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n    return ringWeightOffset;\n  }\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n}\n_defineProperty(DoughnutController, \"id\", 'doughnut');\n_defineProperty(DoughnutController, \"defaults\", {\n  datasetElementType: false,\n  dataElementType: 'arc',\n  animation: {\n    animateRotate: true,\n    animateScale: false\n  },\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n    }\n  },\n  cutout: '50%',\n  rotation: 0,\n  circumference: 360,\n  radius: '100%',\n  spacing: 0,\n  indexAxis: 'r'\n});\n_defineProperty(DoughnutController, \"descriptors\", {\n  _scriptable: name => name !== 'spacing',\n  _indexable: name => name !== 'spacing'\n});\n_defineProperty(DoughnutController, \"overrides\", {\n  aspectRatio: 1,\n  plugins: {\n    legend: {\n      labels: {\n        generateLabels(chart) {\n          const data = chart.data;\n          if (data.labels.length && data.datasets.length) {\n            const {\n              labels: {\n                pointStyle,\n                color\n              }\n            } = chart.legend.options;\n            return data.labels.map((label, i) => {\n              const meta = chart.getDatasetMeta(0);\n              const style = meta.controller.getStyle(i);\n              return {\n                text: label,\n                fillStyle: style.backgroundColor,\n                strokeStyle: style.borderColor,\n                fontColor: color,\n                lineWidth: style.borderWidth,\n                pointStyle: pointStyle,\n                hidden: !chart.getDataVisibility(i),\n                index: i\n              };\n            });\n          }\n          return [];\n        }\n      },\n      onClick(e, legendItem, legend) {\n        legend.chart.toggleDataVisibility(legendItem.index);\n        legend.chart.update();\n      }\n    }\n  }\n});\nclass LineController extends DatasetController {\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {\n      dataset: line,\n      data: points = [],\n      _dataset\n    } = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {\n      start,\n      count\n    } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n    this._drawStart = start;\n    this._drawCount = count;\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n    const options = this.resolveDatasetElementOptions(mode);\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n    this.updateElements(points, start, count, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale,\n      _stacked,\n      _dataset\n    } = this._cachedMeta;\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {\n      spanGaps,\n      segment\n    } = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    const end = start + count;\n    const pointsCount = points.length;\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n    for (let i = 0; i < pointsCount; ++i) {\n      const point = points[i];\n      const properties = directUpdate ? point : {};\n      if (i < start || i >= end) {\n        properties.skip = true;\n        continue;\n      }\n      const parsed = this.getParsed(i);\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n      prevParsed = parsed;\n    }\n  }\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n}\n_defineProperty(LineController, \"id\", 'line');\n_defineProperty(LineController, \"defaults\", {\n  datasetElementType: 'line',\n  dataElementType: 'point',\n  showLine: true,\n  spanGaps: false\n});\n_defineProperty(LineController, \"overrides\", {\n  scales: {\n    _index_: {\n      type: 'category'\n    },\n    _value_: {\n      type: 'linear'\n    }\n  }\n});\nclass PolarAreaController extends DatasetController {\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value\n    };\n  }\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n    this._updateRadius();\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {\n      min: Number.POSITIVE_INFINITY,\n      max: Number.NEGATIVE_INFINITY\n    };\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n    return range;\n  }\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n    this.outerRadius = outerRadius - radiusLength * this.index;\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n    const defaultAngle = 360 / this.countVisibleElements();\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n    return count;\n  }\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n  }\n}\n_defineProperty(PolarAreaController, \"id\", 'polarArea');\n_defineProperty(PolarAreaController, \"defaults\", {\n  dataElementType: 'arc',\n  animation: {\n    animateRotate: true,\n    animateScale: true\n  },\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n    }\n  },\n  indexAxis: 'r',\n  startAngle: 0\n});\n_defineProperty(PolarAreaController, \"overrides\", {\n  aspectRatio: 1,\n  plugins: {\n    legend: {\n      labels: {\n        generateLabels(chart) {\n          const data = chart.data;\n          if (data.labels.length && data.datasets.length) {\n            const {\n              labels: {\n                pointStyle,\n                color\n              }\n            } = chart.legend.options;\n            return data.labels.map((label, i) => {\n              const meta = chart.getDatasetMeta(0);\n              const style = meta.controller.getStyle(i);\n              return {\n                text: label,\n                fillStyle: style.backgroundColor,\n                strokeStyle: style.borderColor,\n                fontColor: color,\n                lineWidth: style.borderWidth,\n                pointStyle: pointStyle,\n                hidden: !chart.getDataVisibility(i),\n                index: i\n              };\n            });\n          }\n          return [];\n        }\n      },\n      onClick(e, legendItem, legend) {\n        legend.chart.toggleDataVisibility(legendItem.index);\n        legend.chart.update();\n      }\n    }\n  },\n  scales: {\n    r: {\n      type: 'radialLinear',\n      angleLines: {\n        display: false\n      },\n      beginAtZero: true,\n      grid: {\n        circular: true\n      },\n      pointLabels: {\n        display: false\n      },\n      startAngle: 0\n    }\n  }\n});\nclass PieController extends DoughnutController {}\n_defineProperty(PieController, \"id\", 'pie');\n_defineProperty(PieController, \"defaults\", {\n  cutout: 0,\n  rotation: 0,\n  circumference: 360,\n  radius: '100%'\n});\nclass RadarController extends DatasetController {\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n    line.points = points;\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n      this.updateElement(line, undefined, properties, mode);\n    }\n    this.updateElements(points, 0, points.length, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n}\n_defineProperty(RadarController, \"id\", 'radar');\n_defineProperty(RadarController, \"defaults\", {\n  datasetElementType: 'line',\n  dataElementType: 'point',\n  indexAxis: 'r',\n  showLine: true,\n  elements: {\n    line: {\n      fill: 'start'\n    }\n  }\n});\n_defineProperty(RadarController, \"overrides\", {\n  aspectRatio: 1,\n  scales: {\n    r: {\n      type: 'radialLinear'\n    }\n  }\n});\nclass ScatterController extends DatasetController {\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + ')'\n    };\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {\n      data: points = []\n    } = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {\n      start,\n      count\n    } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n    this._drawStart = start;\n    this._drawCount = count;\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n    if (this.options.showLine) {\n      const {\n        dataset: line,\n        _dataset\n      } = meta;\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    }\n    this.updateElements(points, start, count, mode);\n  }\n  addElements() {\n    const {\n      showLine\n    } = this.options;\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = this.chart.registry.getElement('line');\n    }\n    super.addElements();\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale,\n      _stacked,\n      _dataset\n    } = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {\n      spanGaps,\n      segment\n    } = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n      prevParsed = parsed;\n    }\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n    if (!this.options.showLine) {\n      let max = 0;\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n      return max > 0 && max;\n    }\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n}\n_defineProperty(ScatterController, \"id\", 'scatter');\n_defineProperty(ScatterController, \"defaults\", {\n  datasetElementType: false,\n  dataElementType: 'point',\n  showLine: false,\n  fill: false\n});\n_defineProperty(ScatterController, \"overrides\", {\n  interaction: {\n    mode: 'point'\n  },\n  scales: {\n    x: {\n      type: 'linear'\n    },\n    y: {\n      type: 'linear'\n    }\n  }\n});\nvar controllers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  BarController: BarController,\n  BubbleController: BubbleController,\n  DoughnutController: DoughnutController,\n  LineController: LineController,\n  PolarAreaController: PolarAreaController,\n  PieController: PieController,\n  RadarController: RadarController,\n  ScatterController: ScatterController\n});\n\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */\nfunction abstract() {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\nclass DateAdapterBase {\n  /**\n  * Override default date adapter methods.\n  * Accepts type parameter to define options type.\n  * @example\n  * Chart._adapters._date.override<{myAdapterOption: string}>({\n  *   init() {\n  *     console.log(this.options.myAdapterOption);\n  *   }\n  * })\n  */\n  static override(members) {\n    Object.assign(DateAdapterBase.prototype, members);\n  }\n  constructor(options) {\n    this.options = options || {};\n  }\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  init() {}\n  formats() {\n    return abstract();\n  }\n  parse() {\n    return abstract();\n  }\n  format() {\n    return abstract();\n  }\n  add() {\n    return abstract();\n  }\n  diff() {\n    return abstract();\n  }\n  startOf() {\n    return abstract();\n  }\n  endOf() {\n    return abstract();\n  }\n}\nvar adapters = {\n  _date: DateAdapterBase\n};\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {\n    controller,\n    data,\n    _sorted\n  } = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      return lookupMethod(data, axis, value);\n    } else if (controller._sharedOptions) {\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {\n          lo: start.lo,\n          hi: end.hi\n        };\n      }\n    }\n  }\n  return {\n    lo: 0,\n    hi: data.length - 1\n  };\n}\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {\n      index,\n      data\n    } = metasets[i];\n    const {\n      lo,\n      hi\n    } = binarySearch(metasets[i], axis, value, intersect);\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n  return function (pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n  const evaluationFunc = function (element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  };\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n  function evaluationFunc(element, datasetIndex, index) {\n    const {\n      startAngle,\n      endAngle\n    } = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {\n      angle\n    } = getAngleFromPoint(element, {\n      x: position.x,\n      y: position.y\n    });\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  }\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n    const distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{\n        element,\n        datasetIndex,\n        index\n      }];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  }\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n  return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\nvar Interaction = {\n  evaluateInteractionItems,\n  modes: {\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n      if (!items.length) {\n        return [];\n      }\n      chart.getSortedVisibleDatasetMetas().forEach(meta => {\n        const index = items[0].index;\n        const element = meta.data[index];\n        if (element && !element.skip) {\n          elements.push({\n            element,\n            datasetIndex: meta.index,\n            index\n          });\n        }\n      });\n      return elements;\n    },\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (let i = 0; i < data.length; ++i) {\n          items.push({\n            element: data[i],\n            datasetIndex,\n            index: i\n          });\n        }\n      }\n      return items;\n    },\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n  }\n};\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n  });\n}\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({\n      position: pos,\n      options: {\n        stack,\n        stackWeight = 1\n      }\n    } = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && pos + stack,\n      stackWeight\n    });\n  }\n  return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n  const stacks = {};\n  for (const wrap of layouts) {\n    const {\n      stack,\n      pos,\n      stackWeight\n    } = wrap;\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n    const _stack = stacks[stack] || (stacks[stack] = {\n      count: 0,\n      placed: 0,\n      weight: 0,\n      size: 0\n    });\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n  return stacks;\n}\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {\n    vBoxMaxWidth,\n    hBoxMaxHeight\n  } = params;\n  let i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {\n      fullSize\n    } = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {\n    pos,\n    box\n  } = layout;\n  const maxPadding = chartArea.maxPadding;\n  if (!isObject(pos)) {\n    if (layout.size) {\n      chartArea[pos] -= layout.size;\n    }\n    const stack = stacks[layout.stack] || {\n      size: 0,\n      count: 1\n    };\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n  return layout.horizontal ? {\n    same: widthChanged,\n    other: heightChanged\n  } : {\n    same: heightChanged,\n    other: widthChanged\n  };\n}\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n  function marginForPositions(positions) {\n    const margin = {\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0\n    };\n    positions.forEach(pos => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n  return horizontal ? marginForPositions(['left', 'right']) : marginForPositions(['top', 'bottom']);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n    box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n    const {\n      same,\n      other\n    } = updateDims(chartArea, params, layout, stacks);\n    refit |= same && refitBoxes.length;\n    changed = changed || other;\n    if (!box.fullSize) {\n      refitBoxes.push(layout);\n    }\n  }\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {\n    x,\n    y\n  } = chartArea;\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {\n      count: 1,\n      placed: 0,\n      weight: 1\n    };\n    const weight = layout.stackWeight / stack.weight || 1;\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height1 = chartArea.h * weight;\n      const width1 = stack.size || box.width;\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width1, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width1, height1);\n      }\n      stack.start = x;\n      stack.placed += height1;\n      x = box.right;\n    }\n  }\n  chartArea.x = x;\n  chartArea.y = y;\n}\nvar layouts = {\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    item._layers = item._layers || function () {\n      return [{\n        z: 0,\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n    chart.boxes.push(item);\n  },\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) => wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n    handleMaxPadding(chartArea);\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w\n    };\n    each(boxes.chartArea, layout => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0\n      });\n    });\n  }\n};\nclass BasePlatform {\n  acquireContext(canvas, aspectRatio) {}\n  releaseContext(context) {\n    return false;\n  }\n  addEventListener(chart, type, listener) {}\n  removeEventListener(chart, type, listener) {}\n  getDevicePixelRatio() {\n    return 1;\n  }\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n  isAttached(canvas) {\n    return true;\n  }\n  updateConfig(config) {}\n}\nclass BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n}\nconst EXPANDO_KEY = '$chartjs';\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\nconst isNullOrEmpty = value => value === null || value === '';\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n  style.display = style.display || 'block';\n  style.boxSizing = style.boxSizing || 'border-box';\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n  return canvas;\n}\nconst eventListenerOptions = supportsEventListenerOptions ? {\n  passive: true\n} : false;\nfunction addListener(node, type, listener) {\n  node.addEventListener(type, listener, eventListenerOptions);\n}\nfunction removeListener(chart, type, listener) {\n  chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n}\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {\n    x,\n    y\n  } = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null\n  };\n}\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      listener();\n    }\n  }, window);\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n  return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled(event => {\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n  addListener(canvas, type, proxy);\n  return proxy;\n}\nclass DomPlatform extends BasePlatform {\n  acquireContext(canvas, aspectRatio) {\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n    if (context && context.canvas === canvas) {\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n    return null;\n  }\n  releaseContext(context) {\n    const canvas = context.canvas;\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach(prop => {\n      const value = initial[prop];\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n    const style = initial.style || {};\n    Object.keys(style).forEach(key => {\n      canvas.style[key] = style[key];\n    });\n    canvas.width = canvas.width;\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n  addEventListener(chart, type, listener) {\n    this.removeEventListener(chart, type);\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n    if (!proxy) {\n      return;\n    }\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n  isAttached(canvas) {\n    const container = _getParentNode(canvas);\n    return !!(container && container.isConnected);\n  }\n}\nfunction _detectPlatform(canvas) {\n  if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\nclass Element {\n  constructor() {\n    _defineProperty(this, \"active\", false);\n  }\n  tooltipPosition(useFinalPosition) {\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return {\n      x,\n      y\n    };\n  }\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n  getProps(props, final) {\n    const anims = this.$animations;\n    if (!final || !anims) {\n      // let's not create an object, if not needed\n      return this;\n    }\n    const ret = {};\n    props.forEach(prop => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n    });\n    return ret;\n  }\n}\n_defineProperty(Element, \"defaults\", {});\n_defineProperty(Element, \"defaultRoutes\", undefined);\nfunction autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const determinedMaxTicks = determineMaxTicks(scale);\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n  const tickLength = scale._tickSize();\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n  const factors = _factorize(evenMajorSpacing);\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n  next = start;\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n  if (len < 2) {\n    return false;\n  }\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\nconst reverseAlign = align => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit) => Math.min(maxTicksLimit || ticksLength, ticksLength);\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6;\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\nfunction garbageCollect(caches, length) {\n  each(caches, cache => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n  return lines * font.lineHeight + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\nfunction titleAlign(align, position, reverse) {\n  let ret = _toLeftRightCenter(align);\n  if (reverse && position !== 'right' || !reverse && position === 'right') {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n  const {\n    top,\n    left,\n    bottom,\n    right,\n    chart\n  } = scale;\n  const {\n    chartArea,\n    scales\n  } = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID1 = Object.keys(position)[0];\n      const value1 = position[positionAxisID1];\n      titleX = scales[positionAxisID1].getPixelForValue(value1) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {\n    titleX,\n    titleY,\n    maxWidth,\n    rotation\n  };\n}\nclass Scale extends Element {\n  constructor(cfg) {\n    super();\n    this.id = cfg.id;\n    this.type = cfg.type;\n    this.options = undefined;\n    this.ctx = cfg.ctx;\n    this.chart = cfg.chart;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    this.maxWidth = undefined;\n    this.maxHeight = undefined;\n    this.paddingTop = undefined;\n    this.paddingBottom = undefined;\n    this.paddingLeft = undefined;\n    this.paddingRight = undefined;\n    this.axis = undefined;\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    this.ticks = [];\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    this._startPixel = undefined;\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n  init(options) {\n    this.options = options.setContext(this.getContext());\n    this.axis = options.axis;\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n  parse(raw, index) {\n    return raw;\n  }\n  getUserBounds() {\n    let {\n      _userMin,\n      _userMax,\n      _suggestedMin,\n      _suggestedMax\n    } = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isNumberFinite(_userMin),\n      maxDefined: isNumberFinite(_userMax)\n    };\n  }\n  getMinMax(canStack) {\n    let {\n      min,\n      max,\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let range;\n    if (minDefined && maxDefined) {\n      return {\n        min,\n        max\n      };\n    }\n    const metas = this.getMatchingVisibleMetas();\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n  getTicks() {\n    return this.ticks;\n  }\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n  getLabelItems(chartArea = this.chart.chartArea) {\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n    return items;\n  }\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n  beforeUpdate() {\n    callback(this.options.beforeUpdate, [this]);\n  }\n  update(maxWidth, maxHeight, margins) {\n    const {\n      beginAtZero,\n      grace,\n      ticks: tickOpts\n    } = this.options;\n    const sampleSize = tickOpts.sampleSize;\n    this.beforeUpdate();\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n    this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n    this.beforeBuildTicks();\n    this.ticks = this.buildTicks() || [];\n    this.afterBuildTicks();\n    const samplingEnabled = sampleSize < this.ticks.length;\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n    this.configure();\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation();\n    this.afterCalculateLabelRotation();\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n    if (samplingEnabled) {\n      this._convertTicksToLabels(this.ticks);\n    }\n    this.beforeFit();\n    this.fit();\n    this.afterFit();\n    this.afterUpdate();\n  }\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      reversePixels = !reversePixels;\n    }\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n  afterUpdate() {\n    callback(this.options.afterUpdate, [this]);\n  }\n  beforeSetDimensions() {\n    callback(this.options.beforeSetDimensions, [this]);\n  }\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = 0;\n      this.bottom = this.height;\n    }\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n  afterSetDimensions() {\n    callback(this.options.afterSetDimensions, [this]);\n  }\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    callback(this.options[name], [this]);\n  }\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n  determineDataLimits() {}\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n  buildTicks() {\n    return [];\n  }\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n  beforeTickToLabelConversion() {\n    callback(this.options.beforeTickToLabelConversion, [this]);\n  }\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = callback(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n  afterTickToLabelConversion() {\n    callback(this.options.afterTickToLabelConversion, [this]);\n  }\n  beforeCalculateLabelRotation() {\n    callback(this.options.beforeCalculateLabelRotation, [this]);\n  }\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n    const labelSizes = this._getLabelSizes();\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n    this.labelRotation = labelRotation;\n  }\n  afterCalculateLabelRotation() {\n    callback(this.options.afterCalculateLabelRotation, [this]);\n  }\n  afterAutoSkip() {}\n  beforeFit() {\n    callback(this.options.beforeFit, [this]);\n  }\n  fit() {\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n    const {\n      chart,\n      options: {\n        ticks: tickOpts,\n        title: titleOpts,\n        grid: gridOpts\n      }\n    } = this;\n    const display = this._isVisible();\n    const isHorizontal = this.isHorizontal();\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight;\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n      if (tickOpts.display && this.ticks.length) {\n        const {\n          first,\n          last,\n          widest,\n          highest\n        } = this._getLabelSizes();\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n        if (isHorizontal) {\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n    this._handleMargins();\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n  _calculatePadding(first, last, sin, cos) {\n    const {\n      ticks: {\n        align,\n        padding\n      },\n      position\n    } = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n  afterFit() {\n    callback(this.options.afterFit, [this]);\n  }\n  isHorizontal() {\n    const {\n      axis,\n      position\n    } = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n  isFullSize() {\n    return this.options.fullSize;\n  }\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n    this.generateTickLabels(ticks);\n    let i, ilen;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n    this.afterTickToLabelConversion();\n  }\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n    }\n    return labelSizes;\n  }\n  _computeLabelSizes(ticks, length, maxTicksLimit) {\n    const {\n      ctx,\n      _longestTextCache: caches\n    } = this;\n    const widths = [];\n    const heights = [];\n    const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n    for (i = 0; i < length; i += increment) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {\n        data: {},\n        gc: []\n      };\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = label[j];\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n    garbageCollect(caches, length);\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n    const valueAt = idx => ({\n      width: widths[idx] || 0,\n      height: heights[idx] || 0\n    });\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights\n    };\n  }\n  getLabelForValue(value) {\n    return value;\n  }\n  getPixelForValue(value, index) {\n    return NaN;\n  }\n  getValueForPixel(pixel) {}\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n  getBaseValue() {\n    const {\n      min,\n      max\n    } = this;\n    return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n  }\n  getContext(index) {\n    const ticks = this.ticks || [];\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n    return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n    const labelSizes = this._getLabelSizes();\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n    return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n  }\n  _isVisible() {\n    const display = this.options.display;\n    if (display !== 'auto') {\n      return !!display;\n    }\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {\n      grid,\n      position,\n      border\n    } = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\n    const axisHalfWidth = axisWidth / 2;\n    const alignBorderValue = function (pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID1 = Object.keys(position)[0];\n        const value1 = position[positionAxisID1];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID1].getPixelForValue(value1));\n      }\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n    for (i = 0; i < ticksLength; i += step) {\n      const context = this.getContext(i);\n      const optsAtIndex = grid.setContext(context);\n      const optsAtIndexBorder = border.setContext(context);\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndexBorder.dash || [];\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n      lineValue = getPixelForGridLine(this, i, offset);\n      if (lineValue === undefined) {\n        continue;\n      }\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset\n      });\n    }\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n    return items;\n  }\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {\n      position,\n      ticks: optionTicks\n    } = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {\n      align,\n      crossAlign,\n      padding,\n      mirror\n    } = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret1 = this._getYAxisLabelAlignment(tl);\n      textAlign = ret1.textAlign;\n      x = ret1.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID1 = Object.keys(position)[0];\n        const value1 = position[positionAxisID1];\n        x = this.chart.scales[positionAxisID1].getPixelForValue(value1);\n      }\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n    const labelSizes = this._getLabelSizes();\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n      if (isHorizontal) {\n        x = pixel;\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n        if (mirror) {\n          textOffset *= -1;\n        }\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n          x += lineHeight / 2 * Math.sin(rotation);\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n      let backdrop;\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n        let top = textOffset - labelPadding.top;\n        let left = 0 - labelPadding.left;\n        switch (textBaseline) {\n          case 'middle':\n            top -= height / 2;\n            break;\n          case 'bottom':\n            top -= height;\n            break;\n        }\n        switch (textAlign) {\n          case 'center':\n            left -= width / 2;\n            break;\n          case 'right':\n            left -= width;\n            break;\n        }\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n          color: optsAtIndex.backdropColor\n        };\n      }\n      items.push({\n        label,\n        font,\n        textOffset,\n        options: {\n          rotation,\n          color,\n          strokeColor,\n          strokeWidth,\n          textAlign: tickTextAlign,\n          textBaseline,\n          translation: [x, y],\n          backdrop\n        }\n      });\n    }\n    return items;\n  }\n  _getXAxisLabelAlignment() {\n    const {\n      position,\n      ticks\n    } = this.options;\n    const rotation = -toRadians(this.labelRotation);\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n    let align = 'center';\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n    return align;\n  }\n  _getYAxisLabelAlignment(tl) {\n    const {\n      position,\n      ticks: {\n        crossAlign,\n        mirror,\n        padding\n      }\n    } = this.options;\n    const labelSizes = this._getLabelSizes();\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n    let textAlign;\n    let x;\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= widest / 2;\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= widest / 2;\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n    return {\n      textAlign,\n      x\n    };\n  }\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n    const chart = this.chart;\n    const position = this.options.position;\n    if (position === 'left' || position === 'right') {\n      return {\n        top: 0,\n        left: this.left,\n        bottom: chart.height,\n        right: this.right\n      };\n    }\n    if (position === 'top' || position === 'bottom') {\n      return {\n        top: this.top,\n        left: 0,\n        bottom: this.bottom,\n        right: chart.width\n      };\n    }\n  }\n  drawBackground() {\n    const {\n      ctx,\n      options: {\n        backgroundColor\n      },\n      left,\n      top,\n      width,\n      height\n    } = this;\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n    return 0;\n  }\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n    let i, ilen;\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n        if (grid.drawOnChartArea) {\n          drawLine({\n            x: item.x1,\n            y: item.y1\n          }, {\n            x: item.x2,\n            y: item.y2\n          }, item);\n        }\n        if (grid.drawTicks) {\n          drawLine({\n            x: item.tx1,\n            y: item.ty1\n          }, {\n            x: item.tx2,\n            y: item.ty2\n          }, {\n            color: item.tickColor,\n            width: item.tickWidth,\n            borderDash: item.tickBorderDash,\n            borderDashOffset: item.tickBorderDashOffset\n          });\n        }\n      }\n    }\n  }\n  drawBorder() {\n    const {\n      chart,\n      ctx,\n      options: {\n        border,\n        grid\n      }\n    } = this;\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = border.display ? borderOpts.width : 0;\n    if (!axisWidth) {\n      return;\n    }\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n    ctx.save();\n    ctx.lineWidth = borderOpts.width;\n    ctx.strokeStyle = borderOpts.color;\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n    ctx.restore();\n  }\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n    if (!optionTicks.display) {\n      return;\n    }\n    const ctx = this.ctx;\n    const area = this._computeLabelArea();\n    if (area) {\n      clipArea(ctx, area);\n    }\n    const items = this.getLabelItems(chartArea);\n    for (const item of items) {\n      const renderTextOptions = item.options;\n      const tickFont = item.font;\n      const label = item.label;\n      const y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n    }\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n  drawTitle() {\n    const {\n      ctx,\n      options: {\n        position,\n        title,\n        reverse\n      }\n    } = this;\n    if (!title.display) {\n      return;\n    }\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n    const {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    } = titleArgs(this, offset, position, align);\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY]\n    });\n  }\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      return [{\n        z: tz,\n        draw: chartArea => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n    return [{\n      z: gz,\n      draw: chartArea => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: bz,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: chartArea => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n}\nclass TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n    if (isIChartComponent(proto)) {\n      parentScope = this.register(proto);\n    }\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n    if (id in items) {\n      return scope;\n    }\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n    return scope;\n  }\n  get(id) {\n    return this.items[id];\n  }\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n    if (id in items) {\n      delete items[id];\n    }\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n}\nfunction registerDefaults(item, scope, parentScope) {\n  const itemDefaults = merge(Object.create(null), [parentScope ? defaults.get(parentScope) : {}, defaults.get(scope), item.defaults]);\n  defaults.set(scope, itemDefaults);\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\nclass Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n  add(...args) {\n    this._each('register', args);\n  }\n  remove(...args) {\n    this._each('unregister', args);\n  }\n  addControllers(...args) {\n    this._each('register', args, this.controllers);\n  }\n  addElements(...args) {\n    this._each('register', args, this.elements);\n  }\n  addPlugins(...args) {\n    this._each('register', args, this.plugins);\n  }\n  addScales(...args) {\n    this._each('register', args, this.scales);\n  }\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n  removeControllers(...args) {\n    this._each('unregister', args, this.controllers);\n  }\n  removeElements(...args) {\n    this._each('unregister', args, this.elements);\n  }\n  removePlugins(...args) {\n    this._each('unregister', args, this.plugins);\n  }\n  removeScales(...args) {\n    this._each('unregister', args, this.scales);\n  }\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n      if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n        this._exec(method, reg, arg);\n      } else {\n        each(arg, item => {\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n    callback(component['before' + camelMethod], [], component);\n    registry[method](component);\n    callback(component['after' + camelMethod], [], component);\n  }\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n    return this.plugins;\n  }\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n    return item;\n  }\n}\nvar registry = /* #__PURE__ */new Registry();\nclass PluginService {\n  constructor() {\n    this._init = [];\n  }\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n      this._notify(this._init, chart, 'install');\n    }\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n    const result = this._notify(descriptors, chart, hook, args);\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n      this._notify(this._init, chart, 'uninstall');\n    }\n    return result;\n  }\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n      if (callback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n    return true;\n  }\n  invalidate() {\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n    const descriptors = this._cache = this._createDescriptors(chart);\n    this._notifyStateChanges(chart);\n    return descriptors;\n  }\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n}\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n  const local = config.plugins || [];\n  for (let i1 = 0; i1 < local.length; i1++) {\n    const plugin = local[i1];\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n  return {\n    plugins,\n    localIds\n  };\n}\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\nfunction createDescriptors(chart, {\n  plugins,\n  localIds\n}, options, all) {\n  const result = [];\n  const context = chart.getContext();\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n    if (opts === null) {\n      continue;\n    }\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {\n        plugin,\n        local: localIds[id]\n      }, opts, context)\n    });\n  }\n  return result;\n}\nfunction pluginOpts(config, {\n  plugin,\n  local\n}, opts, context) {\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n  if (local && plugin.defaults) {\n    scopes.push(plugin.defaults);\n  }\n  return config.createResolver(scopes, context, [''], {\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\nfunction getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\nfunction determineAxis(id, scaleOptions) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n  id = scaleOptions.axis || axisFromPosition(scaleOptions.position) || id.length > 1 && determineAxis(id[0].toLowerCase(), scaleOptions);\n  if (id) {\n    return id;\n  }\n  throw new Error(`Cannot determine type of '${name}' axis. Please provide 'axis' or 'position' option.`);\n}\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {\n    scales: {}\n  };\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const scales = Object.create(null);\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n    const axis = determineAxis(id, scaleConf);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{\n      axis\n    }, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{\n        axis\n      }, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n  return scales;\n}\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n  initOptions(config);\n  return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\nclass Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n  get platform() {\n    return this._config.platform;\n  }\n  get type() {\n    return this._config.type;\n  }\n  set type(type) {\n    this._config.type = type;\n  }\n  get data() {\n    return this._config.data;\n  }\n  set data(data) {\n    this._config.data = initData(data);\n  }\n  get options() {\n    return this._config.options;\n  }\n  set options(options) {\n    this._config.options = options;\n  }\n  get plugins() {\n    return this._config.plugins;\n  }\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n  clearCache() {\n    this._scopeCache.clear();\n    this._resolverCache.clear();\n  }\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType, () => [[`datasets.${datasetType}`, '']]);\n  }\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`, () => [[`datasets.${datasetType}.transitions.${transition}`, `transitions.${transition}`], [`datasets.${datasetType}`, '']]);\n  }\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`, () => [[`datasets.${datasetType}.elements.${elementType}`, `datasets.${datasetType}`, `elements.${elementType}`, '']]);\n  }\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`, () => [[`plugins.${id}`, ...(plugin.additionalOptionScopes || [])]]);\n  }\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n    let cache = _scopeCache.get(mainScope);\n    if (!cache || resetCache) {\n      cache = new Map();\n      _scopeCache.set(mainScope, cache);\n    }\n    return cache;\n  }\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {\n      options,\n      type\n    } = this;\n    const cache = this._cachedScopes(mainScope, resetCache);\n    const cached = cache.get(keyLists);\n    if (cached) {\n      return cached;\n    }\n    const scopes = new Set();\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n    const array = Array.from(scopes);\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n    return array;\n  }\n  chartOptionScopes() {\n    const {\n      options,\n      type\n    } = this;\n    return [options, overrides[type] || {}, defaults.datasets[type] || {}, {\n      type\n    }, defaults, descriptors];\n  }\n  resolveNamedOptions(scopes, names, context, prefixes = ['']) {\n    const result = {\n      $shared: true\n    };\n    const {\n      resolver,\n      subPrefixes\n    } = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n    return result;\n  }\n  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {\n    const {\n      resolver\n    } = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n  }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\nconst hasFunction = value => isObject(value) && Object.getOwnPropertyNames(value).reduce((acc, key) => acc || isFunction(value[key]), false);\nfunction needContext(proxy, names) {\n  const {\n    isScriptable,\n    isIndexable\n  } = _descriptors(proxy);\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n    if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n      return true;\n    }\n  }\n  return false;\n}\nvar version = \"4.2.1\";\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\nfunction compare2Level(l1, l2) {\n  return function (a, b) {\n    return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n  };\n}\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  chart.notifyPlugins('afterRender');\n  callback(animationOptions && animationOptions.onComplete, [context], chart);\n}\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callback(animationOptions && animationOptions.onProgress, [context], chart);\n}\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    item = item[0];\n  }\n  if (item && item.canvas) {\n    item = item.canvas;\n  }\n  return item;\n}\nconst instances = {};\nconst getChart = key => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter(c => c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const intKey = +key;\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\nfunction getDatasetArea(meta) {\n  const {\n    xScale,\n    yScale\n  } = meta;\n  if (xScale && yScale) {\n    return {\n      left: xScale.left,\n      right: xScale.right,\n      top: yScale.top,\n      bottom: yScale.bottom\n    };\n  }\n}\nclass Chart {\n  static register(...items) {\n    registry.add(...items);\n    invalidatePlugins();\n  }\n  static unregister(...items) {\n    registry.remove(...items);\n    invalidatePlugins();\n  }\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n    }\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n    instances[this.id] = this;\n    if (!context || !canvas) {\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n  get aspectRatio() {\n    const {\n      options: {\n        aspectRatio,\n        maintainAspectRatio\n      },\n      width,\n      height,\n      _aspectRatio\n    } = this;\n    if (!isNullOrUndef(aspectRatio)) {\n      return aspectRatio;\n    }\n    if (maintainAspectRatio && _aspectRatio) {\n      return _aspectRatio;\n    }\n    return height ? width / height : null;\n  }\n  get data() {\n    return this.config.data;\n  }\n  set data(data) {\n    this.config.data = data;\n  }\n  get options() {\n    return this._options;\n  }\n  set options(options) {\n    this.config.options = options;\n  }\n  get registry() {\n    return registry;\n  }\n  _initialize() {\n    this.notifyPlugins('beforeInit');\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n    this.bindEvents();\n    this.notifyPlugins('afterInit');\n    return this;\n  }\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {\n        width,\n        height\n      };\n    }\n  }\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n    this.notifyPlugins('resize', {\n      size: newSize\n    });\n    callback(options.onResize, [this, newSize], this);\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        this.render();\n      }\n    }\n  }\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n    if (scaleOpts) {\n      items = items.concat(Object.keys(scaleOpts).map(id => {\n        const scaleOptions = scaleOpts[id];\n        const axis = determineAxis(id, scaleOptions);\n        const isRadial = axis === 'r';\n        const isHorizontal = axis === 'x';\n        return {\n          options: scaleOptions,\n          dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n          dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n        };\n      }));\n    }\n    each(items, item => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n      updated[id] = true;\n      let scale = null;\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n      scale.init(scaleOptions, options);\n    });\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n    each(scales, scale => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n    metasets.sort((a, b) => a.index - b.index);\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n      metasets.splice(numData, numMeta - numData);\n    }\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n  _removeUnreferencedMetasets() {\n    const {\n      _metasets: metasets,\n      data: {\n        datasets\n      }\n    } = this;\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n    this._removeUnreferencedMetasets();\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n        meta = this.getDatasetMeta(i);\n      }\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {\n          datasetElementType,\n          dataElementType\n        } = defaults.datasets[type];\n        Object.assign(ControllerClass, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n    this._updateMetasets();\n    return newControllers;\n  }\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n  reset() {\n    this._resetElements();\n    this.notifyPlugins('reset');\n  }\n  update(mode) {\n    const config = this.config;\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n    this._updateScales();\n    this._checkEventBindings();\n    this._updateHiddenIndices();\n    this._plugins.invalidate();\n    if (this.notifyPlugins('beforeUpdate', {\n      mode,\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    const newControllers = this.buildOrUpdateControllers();\n    this.notifyPlugins('beforeElementsUpdate');\n    let minPadding = 0;\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {\n        controller\n      } = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n    this._updateLayout(minPadding);\n    if (!animsDisabled) {\n      each(newControllers, controller => {\n        controller.reset();\n      });\n    }\n    this._updateDatasets(mode);\n    this.notifyPlugins('afterUpdate', {\n      mode\n    });\n    this._layers.sort(compare2Level('z', '_idx'));\n    const {\n      _active,\n      _lastEvent\n    } = this;\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n    this.render();\n  }\n  _updateScales() {\n    each(this.scales, scale => {\n      layouts.removeBox(this, scale);\n    });\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n  _updateHiddenIndices() {\n    const {\n      _hiddenIndices\n    } = this;\n    const changes = this._getUniformDataChanges() || [];\n    for (const {\n      method,\n      start,\n      count\n    } of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n    const makeSet = idx => new Set(_dataChanges.filter(c => c[0] === idx).map((c, i) => i + ',' + c.splice(1).join(',')));\n    const changeSet = makeSet(0);\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n    return Array.from(changeSet).map(c => c.split(',')).map(a => ({\n      method: a[1],\n      start: +a[2],\n      count: +a[3]\n    }));\n  }\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    layouts.update(this, this.width, this.height, minPadding);\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n    this._layers = [];\n    each(this.boxes, box => {\n      if (noArea && box.position === 'chartArea') {\n        return;\n      }\n      if (box.configure) {\n        box.configure();\n      }\n      this._layers.push(...box._layers());\n    }, this);\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n    this.notifyPlugins('afterLayout');\n  }\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {\n      mode,\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n    for (let i1 = 0, ilen1 = this.data.datasets.length; i1 < ilen1; ++i1) {\n      this._updateDataset(i1, isFunction(mode) ? mode({\n        datasetIndex: i1\n      }) : mode);\n    }\n    this.notifyPlugins('afterDatasetsUpdate', {\n      mode\n    });\n  }\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {\n      meta,\n      index,\n      mode,\n      cancelable: true\n    };\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n    meta.controller._update(mode);\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n  render() {\n    if (this.notifyPlugins('beforeRender', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({\n        chart: this\n      });\n    }\n  }\n  draw() {\n    let i;\n    if (this._resizeBeforeDraw) {\n      const {\n        width,\n        height\n      } = this._resizeBeforeDraw;\n      this._resize(width, height);\n      this._resizeBeforeDraw = null;\n    }\n    this.clear();\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n    if (this.notifyPlugins('beforeDraw', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    const layers = this._layers;\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n    this._drawDatasets();\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n    this.notifyPlugins('afterDraw');\n  }\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    const metasets = this.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const clip = meta._clip;\n    const useClip = !clip.disabled;\n    const area = getDatasetArea(meta) || this.chartArea;\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n    if (useClip) {\n      clipArea(ctx, {\n        left: clip.left === false ? 0 : area.left - clip.left,\n        right: clip.right === false ? this.width : area.right + clip.right,\n        top: clip.top === false ? 0 : area.top - clip.top,\n        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n      });\n    }\n    meta.controller.draw();\n    if (useClip) {\n      unclipArea(ctx);\n    }\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n    return [];\n  }\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n    return meta;\n  }\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {\n      chart: this,\n      type: 'chart'\n    }));\n  }\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    if (!dataset) {\n      return false;\n    }\n    const meta = this.getDatasetMeta(datasetIndex);\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      anims.update(meta, {\n        visible\n      });\n      this.update(ctx => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n    delete this._metasets[datasetIndex];\n  }\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {\n      canvas,\n      ctx\n    } = this;\n    this._stop();\n    this.config.clearCache();\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n    delete instances[this.id];\n    this.notifyPlugins('afterDestroy');\n  }\n  toBase64Image(...args) {\n    return this.canvas.toDataURL(...args);\n  }\n  bindEvents() {\n    this.bindUserEvents();\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n      this._eventHandler(e);\n    };\n    each(this.options.events, type => _add(type, listener));\n  }\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n    let detached;\n    const attached = () => {\n      _remove('attach', attached);\n      this.attached = true;\n      this.resize();\n      _add('resize', listener);\n      _add('detach', detached);\n    };\n    detached = () => {\n      this.attached = false;\n      _remove('resize', listener);\n      this._stop();\n      this._resize(0, 0);\n      _add('attach', attached);\n    };\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n  getActiveElements() {\n    return this._active || [];\n  }\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(({\n      datasetIndex,\n      index\n    }) => {\n      const meta = this.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed) {\n      this._active = active;\n      this._lastEvent = null;\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n  isPluginEnabled(pluginId) {\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\n  }\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n    const eventFilter = plugin => (plugin.options.events || this.options.events).includes(e.native.type);\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n    if (changed || args.changed) {\n      this.render();\n    }\n    return this;\n  }\n  _handleEvent(e, replay, inChartArea) {\n    const {\n      _active: lastActive = [],\n      options\n    } = this;\n    const useFinalPosition = replay;\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n    const isClick = _isClickEvent(e);\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n    if (inChartArea) {\n      this._lastEvent = null;\n      callback(options.onHover, [e, active, this], this);\n      if (isClick) {\n        callback(options.onClick, [e, active, this], this);\n      }\n    }\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed || replay) {\n      this._active = active;\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n    this._lastEvent = lastEvent;\n    return changed;\n  }\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n    if (!inChartArea) {\n      return lastActive;\n    }\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n}\n_defineProperty(Chart, \"defaults\", defaults);\n_defineProperty(Chart, \"instances\", instances);\n_defineProperty(Chart, \"overrides\", overrides);\n_defineProperty(Chart, \"registry\", registry);\n_defineProperty(Chart, \"version\", version);\n_defineProperty(Chart, \"getChart\", getChart);\nfunction invalidatePlugins() {\n  return each(Chart.instances, chart => chart._plugins.invalidate());\n}\nfunction clipArc(ctx, element, endAngle) {\n  const {\n    startAngle,\n    pixelMargin,\n    x,\n    y,\n    outerRadius,\n    innerRadius\n  } = element;\n  let angleMargin = pixelMargin / outerRadius;\n  // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n/**\n * Parse border radius from the provided options\n */\nfunction parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n  // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n  const computeOuterLimit = val => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n  };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */\nfunction rThetaToXY(r, theta, x, y) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta)\n  };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */\nfunction pathArc(ctx, element, offset, spacing, end, circular) {\n  const {\n    x,\n    y,\n    startAngle: start,\n    pixelMargin,\n    innerRadius: innerR\n  } = element;\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n  let spacingOffset = 0;\n  const alpha = end - start;\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {\n    outerStart,\n    outerEnd,\n    innerStart,\n    innerEnd\n  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n  ctx.beginPath();\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n    // The corner segment from point 2 to point 3\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    }\n    // The line from point 3 to point 4\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n    // The corner segment from point 4 to point 5\n    if (innerEnd > 0) {\n      const pCenter1 = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter1.x, pCenter1.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n    // The inner arc from point 5 to point b to point 6\n    const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n    // The corner segment from point 6 to point 7\n    if (innerStart > 0) {\n      const pCenter2 = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter2.x, pCenter2.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    }\n    // The line from point 7 to point 8\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n    // The corner segment from point 8 to point 1\n    if (outerStart > 0) {\n      const pCenter3 = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter3.x, pCenter3.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n  ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n  const {\n    fullCircles,\n    startAngle,\n    circumference\n  } = element;\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n  const {\n    fullCircles,\n    startAngle,\n    circumference,\n    options\n  } = element;\n  const {\n    borderWidth,\n    borderJoinStyle\n  } = options;\n  const inner = options.borderAlign === 'inner';\n  if (!borderWidth) {\n    return;\n  }\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\nclass ArcElement extends Element {\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  inRange(chartX, chartY, useFinalPosition) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {\n      angle,\n      distance\n    } = getAngleFromPoint(point, {\n      x: chartX,\n      y: chartY\n    });\n    const {\n      startAngle,\n      endAngle,\n      innerRadius,\n      outerRadius,\n      circumference\n    } = this.getProps(['startAngle', 'endAngle', 'innerRadius', 'outerRadius', 'circumference'], useFinalPosition);\n    const rAdjust = this.options.spacing / 2;\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n    const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n    return betweenAngles && withinRadius;\n  }\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y,\n      startAngle,\n      endAngle,\n      innerRadius,\n      outerRadius\n    } = this.getProps(['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius'], useFinalPosition);\n    const {\n      offset,\n      spacing\n    } = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n  tooltipPosition(useFinalPosition) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n  draw(ctx) {\n    const {\n      options,\n      circumference\n    } = this;\n    const offset = (options.offset || 0) / 4;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n    ctx.save();\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n    const radiusOffset = offset * fix;\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, circular);\n    ctx.restore();\n  }\n}\n_defineProperty(ArcElement, \"id\", 'arc');\n_defineProperty(ArcElement, \"defaults\", {\n  borderAlign: 'center',\n  borderColor: '#fff',\n  borderJoinStyle: undefined,\n  borderRadius: 0,\n  borderWidth: 2,\n  offset: 0,\n  spacing: 0,\n  angle: undefined,\n  circular: true\n});\n_defineProperty(ArcElement, \"defaultRoutes\", {\n  backgroundColor: 'backgroundColor'\n});\nfunction setStyle(ctx, options, style = options) {\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n  return lineTo;\n}\nfunction pathVars(points, segment, params = {}) {\n  const count = points.length;\n  const {\n    start: paramsStart = 0,\n    end: paramsEnd = count - 1\n  } = params;\n  const {\n    start: segmentStart,\n    end: segmentEnd\n  } = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\nfunction pathSegment(ctx, line, segment, params) {\n  const {\n    points,\n    options\n  } = line;\n  const {\n    count,\n    start,\n    loop,\n    ilen\n  } = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  let {\n    move = true,\n    reverse\n  } = params || {};\n  let i, point, prev;\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n    if (point.skip) {\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    prev = point;\n  }\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n  return !!loop;\n}\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {\n    count,\n    start,\n    ilen\n  } = pathVars(points, segment, params);\n  const {\n    move = true,\n    reverse\n  } = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n  const pointIndex = index => (start + (reverse ? ilen - index : index)) % count;\n  const drawX = () => {\n    if (minY !== maxY) {\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n    if (point.skip) {\n      continue;\n    }\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      ctx.lineTo(x, y);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    lastY = y;\n  }\n  drawX();\n}\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n  return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n  const {\n    segments,\n    options\n  } = line;\n  const segmentMethod = _getSegmentMethod(line);\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n    if (segmentMethod(ctx, line, segment, {\n      start,\n      end: start + count - 1\n    })) {\n      ctx.closePath();\n    }\n    ctx.stroke();\n  }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\nclass LineElement extends Element {\n  constructor(cfg) {\n    super();\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n      this._pointsUpdated = true;\n    }\n  }\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n  get points() {\n    return this._points;\n  }\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n    const segments = _boundSegments(this, {\n      property,\n      start: value,\n      end: value\n    });\n    if (!segments.length) {\n      return;\n    }\n    const result = [];\n    const _interpolate = _getInterpolationMethod(options);\n    let i, ilen;\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {\n        start,\n        end\n      } = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n    return result.length === 1 ? result[0] : result;\n  }\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n    return segmentMethod(ctx, this, segment, params);\n  }\n  path(ctx, start, count) {\n    const segments = this.segments;\n    const segmentMethod = _getSegmentMethod(this);\n    let loop = this._loop;\n    start = start || 0;\n    count = count || this.points.length - start;\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {\n        start,\n        end: start + count - 1\n      });\n    }\n    return !!loop;\n  }\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n    if (points.length && options.borderWidth) {\n      ctx.save();\n      draw(ctx, this, start, count);\n      ctx.restore();\n    }\n    if (this.animated) {\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n}\n_defineProperty(LineElement, \"id\", 'line');\n_defineProperty(LineElement, \"defaults\", {\n  borderCapStyle: 'butt',\n  borderDash: [],\n  borderDashOffset: 0,\n  borderJoinStyle: 'miter',\n  borderWidth: 3,\n  capBezierPoints: true,\n  cubicInterpolationMode: 'default',\n  fill: false,\n  spanGaps: false,\n  stepped: false,\n  tension: 0\n});\n_defineProperty(LineElement, \"defaultRoutes\", {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n});\n_defineProperty(LineElement, \"descriptors\", {\n  _scriptable: true,\n  _indexable: name => name !== 'borderDash' && name !== 'fill'\n});\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n  const options = el.options;\n  const {\n    [axis]: value\n  } = el.getProps([axis], useFinalPosition);\n  return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nclass PointElement extends Element {\n  /**\n  * @type {any}\n  */\n\n  /**\n  * @type {any}\n  */\n\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  inRange(mouseX, mouseY, useFinalPosition) {\n    const options = this.options;\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n  }\n  inXRange(mouseX, useFinalPosition) {\n    return inRange$1(this, mouseX, 'x', useFinalPosition);\n  }\n  inYRange(mouseY, useFinalPosition) {\n    return inRange$1(this, mouseY, 'y', useFinalPosition);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return {\n      x,\n      y\n    };\n  }\n  size(options) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n  draw(ctx, area) {\n    const options = this.options;\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n  getRange() {\n    const options = this.options || {};\n    // @ts-expect-error Fallbacks should never be hit in practice\n    return options.radius + options.hitRadius;\n  }\n}\n_defineProperty(PointElement, \"id\", 'point');\n_defineProperty(PointElement, \"defaults\", {\n  borderWidth: 1,\n  hitRadius: 1,\n  hoverBorderWidth: 1,\n  hoverRadius: 4,\n  pointStyle: 'circle',\n  radius: 3,\n  rotation: 0\n});\n_defineProperty(PointElement, \"defaultRoutes\", {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n});\nfunction getBarBounds(bar, useFinalPosition) {\n  const {\n    x,\n    y,\n    base,\n    width,\n    height\n  } = bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition);\n  let left, right, top, bottom, half;\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n  return {\n    left,\n    top,\n    right,\n    bottom\n  };\n}\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {\n    enableBorderRadius\n  } = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n  const enableBorder = enableBorderRadius || isObject(value);\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n      }\n    }\n  };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n  return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount, refRect = {}) {\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\nclass BarElement extends Element {\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  draw(ctx) {\n    const {\n      inflateAmount,\n      options: {\n        borderColor,\n        backgroundColor\n      }\n    } = this;\n    const {\n      inner,\n      outer\n    } = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n    ctx.save();\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n    ctx.restore();\n  }\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y,\n      base,\n      horizontal\n    } = this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition);\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\n_defineProperty(BarElement, \"id\", 'bar');\n_defineProperty(BarElement, \"defaults\", {\n  borderSkipped: 'start',\n  borderWidth: 0,\n  borderRadius: 0,\n  inflateAmount: 'auto',\n  pointStyle: undefined\n});\n_defineProperty(BarElement, \"defaultRoutes\", {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n});\nvar elements = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ArcElement: ArcElement,\n  LineElement: LineElement,\n  PointElement: PointElement,\n  BarElement: BarElement\n});\nconst BORDER_COLORS = ['rgb(54, 162, 235)', 'rgb(255, 99, 132)', 'rgb(255, 159, 64)', 'rgb(255, 205, 86)', 'rgb(75, 192, 192)', 'rgb(153, 102, 255)', 'rgb(201, 203, 207)' // grey\n];\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */BORDER_COLORS.map(color => color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\nfunction getBorderColor(i) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\nfunction getBackgroundColor(i) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\nfunction colorizeDefaultDataset(dataset, i) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n  return ++i;\n}\nfunction colorizeDoughnutDataset(dataset, i) {\n  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));\n  return i;\n}\nfunction colorizePolarAreaDataset(dataset, i) {\n  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));\n  return i;\n}\nfunction getColorizer(chart) {\n  let i = 0;\n  return (dataset, datasetIndex) => {\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\nfunction containsColorsDefinitions(descriptors) {\n  let k;\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction containsColorsDefinition(descriptor) {\n  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\nvar plugin_colors = {\n  id: 'colors',\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  },\n  beforeLayout(chart, _args, options) {\n    if (!options.enabled) {\n      return;\n    }\n    const {\n      data: {\n        datasets\n      },\n      options: chartOptions\n    } = chart.config;\n    const {\n      elements\n    } = chartOptions;\n    if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements))) {\n      return;\n    }\n    const colorizer = getColorizer(chart);\n    datasets.forEach(colorizer);\n  }\n};\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  const samples = options.samples || availableWidth;\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n  const decimated = [];\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n  decimated[sampledIndex++] = data[a];\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {\n      x: pointAx,\n      y: pointAy\n    } = data[a];\n    maxArea = area = -1;\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n  decimated[sampledIndex++] = data[endIndex];\n  return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      const lastIndex = i - 1;\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex1],\n            x: avgX\n          });\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n      if (i > 0 && lastIndex !== startIndex) {\n        decimated.push(data[lastIndex]);\n      }\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n  return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: data\n    });\n  }\n}\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach(dataset => {\n    cleanDecimatedDataset(dataset);\n  });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n  let start = 0;\n  let count;\n  const {\n    iScale\n  } = meta;\n  const {\n    min,\n    max,\n    minDefined,\n    maxDefined\n  } = iScale.getUserBounds();\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n  return {\n    start,\n    count\n  };\n}\nvar plugin_decimation = {\n  id: 'decimation',\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false\n  },\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      cleanDecimatedData(chart);\n      return;\n    }\n    const availableWidth = chart.width;\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {\n        _data,\n        indexAxis\n      } = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        return;\n      }\n      if (!meta.controller.supportsDecimation) {\n        return;\n      }\n      const xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        return;\n      }\n      if (chart.options.parsing) {\n        return;\n      }\n      let {\n        start,\n        count\n      } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n      if (isNullOrUndef(_data)) {\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function () {\n            return this._decimated;\n          },\n          set: function (d) {\n            this._data = d;\n          }\n        });\n      }\n      let decimated;\n      switch (options.algorithm) {\n        case 'lttb':\n          decimated = lttbDecimation(data, start, count, availableWidth, options);\n          break;\n        case 'min-max':\n          decimated = minMaxDecimation(data, start, count, availableWidth);\n          break;\n        default:\n          throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n      dataset._decimated = decimated;\n    });\n  },\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\nfunction _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n  for (const segment of segments) {\n    let {\n      start,\n      end\n    } = segment;\n    end = _findSegmentEnd(start, end, points);\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n    if (!target.segments) {\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n    const targetSegments = _boundSegments(target, bounds);\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n      const fillSources = _boundSegment(segment, points, subBounds);\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n  return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  let start = first[property];\n  let end = last[property];\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {\n    property,\n    start,\n    end\n  };\n}\nfunction _pointsFromSegments(boundary, line) {\n  const {\n    x = null,\n    y = null\n  } = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(({\n    start,\n    end\n  }) => {\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n    if (y !== null) {\n      points.push({\n        x: first.x,\n        y\n      });\n      points.push({\n        x: last.x,\n        y\n      });\n    } else if (x !== null) {\n      points.push({\n        x,\n        y: first.y\n      });\n      points.push({\n        x,\n        y: last.y\n      });\n    }\n  });\n  return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n  for (; end > start; end--) {\n    const point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\nfunction _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n  if (isArray(boundary)) {\n    _loop = true;\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n  return points.length ? new LineElement({\n    points,\n    options: {\n      tension: 0\n    },\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\nfunction _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\nfunction _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n  if (!propagate) {\n    return fill;\n  }\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isNumberFinite(fill)) {\n      return fill;\n    }\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n    if (target.visible) {\n      return fill;\n    }\n    visited.push(fill);\n    fill = target.fill;\n  }\n  return false;\n}\nfunction _decodeFill(line, index, count) {\n  const fill = parseFillOption(line);\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n  let target = parseFloat(fill);\n  if (isNumberFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n  return target;\n}\nfunction _getTargetPixel(fill, scale) {\n  let pixel = null;\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n  return pixel;\n}\nfunction _getTargetValue(fill, scale, startValue) {\n  let value;\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  return value;\n}\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n  if (fill === false || fill === null) {\n    return false;\n  }\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\nfunction _buildStackLine(source) {\n  const {\n    scale,\n    index,\n    line\n  } = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({\n    x: null,\n    y: scale.bottom\n  }, line));\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({\n    points,\n    options: {}\n  });\n}\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {\n      first,\n      last,\n      point\n    } = findPoint(line, sourcePoint, 'x');\n    if (!point || first && last) {\n      continue;\n    }\n    if (first) {\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        break;\n      }\n    }\n  }\n  points.push(...postponed);\n}\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {\n    first,\n    last,\n    point\n  };\n}\nclass simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n  pathSegment(ctx, bounds, opts) {\n    const {\n      x,\n      y,\n      radius\n    } = this;\n    bounds = bounds || {\n      start: 0,\n      end: TAU\n    };\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n  interpolate(point) {\n    const {\n      x,\n      y,\n      radius\n    } = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n}\nfunction _getTarget(source) {\n  const {\n    chart,\n    fill,\n    line\n  } = source;\n  if (isNumberFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n  if (fill === 'shape') {\n    return true;\n  }\n  const boundary = computeBoundary(source);\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n  return _createBoundaryLine(boundary, line);\n}\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n  const {\n    scale = {},\n    fill\n  } = source;\n  const pixel = _getTargetPixel(fill, scale);\n  if (isNumberFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n  return null;\n}\nfunction computeCircularBoundary(source) {\n  const {\n    scale,\n    fill\n  } = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n  const value = _getTargetValue(fill, scale, start);\n  const target = [];\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\nfunction _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n  const {\n    line,\n    scale,\n    axis\n  } = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {\n    above = color,\n    below = color\n  } = fillOption || {};\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {\n      line,\n      target,\n      above,\n      below,\n      area,\n      scale,\n      axis\n    });\n    unclipArea(ctx);\n  }\n}\nfunction doFill(ctx, cfg) {\n  const {\n    line,\n    target,\n    above,\n    below,\n    area,\n    scale\n  } = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n  ctx.save();\n  if (property === 'x' && below !== above) {\n    clipVertical(ctx, target, area.top);\n    fill(ctx, {\n      line,\n      target,\n      color: above,\n      scale,\n      property\n    });\n    ctx.restore();\n    ctx.save();\n    clipVertical(ctx, target, area.bottom);\n  }\n  fill(ctx, {\n    line,\n    target,\n    color: below,\n    scale,\n    property\n  });\n  ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n  const {\n    segments,\n    points\n  } = target;\n  let first = true;\n  let lineLoop = false;\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {\n      start,\n      end\n    } = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {\n      move: lineLoop\n    });\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\nfunction fill(ctx, cfg) {\n  const {\n    line,\n    target,\n    property,\n    color,\n    scale\n  } = cfg;\n  const segments = _segments(line, target, property);\n  for (const {\n    source: src,\n    target: tgt,\n    start,\n    end\n  } of segments) {\n    const {\n      style: {\n        backgroundColor = color\n      } = {}\n    } = src;\n    const notShape = target !== true;\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n    ctx.beginPath();\n    const lineLoop = !!line.pathSegment(ctx, src);\n    let loop;\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n      const targetLoop = !!target.pathSegment(ctx, tgt, {\n        move: lineLoop,\n        reverse: true\n      });\n      loop = lineLoop && targetLoop;\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n    ctx.restore();\n  }\n}\nfunction clipBounds(ctx, scale, bounds) {\n  const {\n    top,\n    bottom\n  } = scale.chart.chartArea;\n  const {\n    property,\n    start,\n    end\n  } = bounds || {};\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\nvar index = {\n  id: 'filler',\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line\n        };\n      }\n      meta.$filler = source;\n      sources.push(source);\n    }\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n      source.line.updateControlPoints(area, source.axis);\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {\n    boxHeight = fontSize,\n    boxWidth = fontSize\n  } = labelOpts;\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n  constructor(config) {\n    super();\n    this._added = false;\n    this.legendHitBoxes = [];\n    this._hoveredItem = null;\n    this.doughnutMode = false;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = callback(labelOpts.generateLabels, [this.chart], this) || [];\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter(item => labelOpts.filter(item, this.chart.data));\n    }\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n    this.legendItems = legendItems;\n  }\n  fit() {\n    const {\n      options,\n      ctx\n    } = this;\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n    const titleHeight = this._computeTitleHeight();\n    const {\n      boxWidth,\n      itemHeight\n    } = getBoxSize(labelOpts, fontSize);\n    let width, height;\n    ctx.font = labelFont.string;\n    if (this.isHorizontal()) {\n      width = this.maxWidth;\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight;\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n    }\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {\n      ctx,\n      maxWidth,\n      options: {\n        labels: {\n          padding\n        }\n      }\n    } = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n      hitboxes[i] = {\n        left: 0,\n        top,\n        row,\n        width: itemWidth,\n        height: itemHeight\n      };\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n    return totalHeight;\n  }\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n    const {\n      ctx,\n      maxHeight,\n      options: {\n        labels: {\n          padding\n        }\n      }\n    } = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n    let left = 0;\n    let col = 0;\n    this.legendItems.forEach((legendItem, i) => {\n      const {\n        itemWidth,\n        itemHeight\n      } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({\n          width: currentColWidth,\n          height: currentColHeight\n        });\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n      hitboxes[i] = {\n        left,\n        top: currentColHeight,\n        col,\n        width: itemWidth,\n        height: itemHeight\n      };\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n    totalWidth += currentColWidth;\n    columnSizes.push({\n      width: currentColWidth,\n      height: currentColHeight\n    });\n    return totalWidth;\n  }\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n    const titleHeight = this._computeTitleHeight();\n    const {\n      legendHitBoxes: hitboxes,\n      options: {\n        align,\n        labels: {\n          padding\n        },\n        rtl\n      }\n    } = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n    if (this.isHorizontal()) {\n      let row = 0;\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n      for (const hitbox1 of hitboxes) {\n        if (hitbox1.col !== col) {\n          col = hitbox1.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n        hitbox1.top = top;\n        hitbox1.left += this.left + padding;\n        hitbox1.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox1.left), hitbox1.width);\n        top += hitbox1.height + padding;\n      }\n    }\n  }\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n      this._draw();\n      unclipArea(ctx);\n    }\n  }\n  _draw() {\n    const {\n      options: opts,\n      columnSizes,\n      lineWidths,\n      ctx\n    } = this;\n    const {\n      align,\n      labels: labelOpts\n    } = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {\n      padding\n    } = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n    this.drawTitle();\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n    const {\n      boxWidth,\n      boxHeight,\n      itemHeight\n    } = getBoxSize(labelOpts, fontSize);\n    const drawLegendBox = function (x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n      ctx.save();\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n      if (labelOpts.usePointStyle) {\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n        ctx.beginPath();\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n        ctx.fill();\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n      ctx.restore();\n    };\n    const fillText = function (x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n    const isHorizontal = this.isHorizontal();\n    const titleHeight = this._computeTitleHeight();\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n    overrideTextDirection(this.ctx, opts.textDirection);\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor;\n      ctx.fillStyle = legendItem.fontColor;\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n      rtlHelper.setWidth(this.width);\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n      const realX = rtlHelper.x(x);\n      drawLegendBox(realX, y, legendItem);\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n      fillText(rtlHelper.x(x), y, legendItem);\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else if (typeof legendItem.text !== 'string') {\n        const fontLineHeight = labelFont.lineHeight;\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight);\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    if (!titleOpts.display) {\n      return;\n    }\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n    let left = this.left;\n    let maxWidth = this.width;\n    if (this.isHorizontal()) {\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n    const x = _alignStartEnd(position, left, left + maxWidth);\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n    if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n      lh = this.legendHitBoxes;\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          return this.legendItems[i];\n        }\n      }\n    }\n    return null;\n  }\n  handleEvent(e) {\n    const opts = this.options;\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n      if (previous && !sameItem) {\n        callback(opts.onLeave, [e, previous, this], this);\n      }\n      this._hoveredItem = hoveredItem;\n      if (hoveredItem && !sameItem) {\n        callback(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      callback(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n}\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {\n    itemWidth,\n    itemHeight\n  };\n}\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  let legendItemText = legendItem.text;\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\n  }\n  return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  let itemHeight = _itemHeight;\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n  return itemHeight;\n}\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  const labelHeight = legendItem.text ? legendItem.text.length + 0.5 : 0;\n  return fontLineHeight * labelHeight;\n}\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\nvar plugin_legend = {\n  id: 'legend',\n  _element: Legend,\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n    onHover: null,\n    onLeave: null,\n    labels: {\n      color: ctx => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {\n          labels: {\n            usePointStyle,\n            pointStyle,\n            textAlign,\n            color,\n            useBorderRadius,\n            borderRadius\n          }\n        } = chart.legend.options;\n        return chart._getSortedDatasetMetas().map(meta => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n    title: {\n      color: ctx => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: ''\n    }\n  },\n  descriptors: {\n    _scriptable: name => !name.startsWith('on'),\n    labels: {\n      _scriptable: name => !['generateLabels', 'filter', 'sort'].includes(name)\n    }\n  }\n};\nclass Title extends Element {\n  constructor(config) {\n    super();\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n    this.left = 0;\n    this.top = 0;\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n  _drawArgs(offset) {\n    const {\n      top,\n      left,\n      bottom,\n      right,\n      options\n    } = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n      maxWidth = bottom - top;\n    }\n    return {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    };\n  }\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    if (!opts.display) {\n      return;\n    }\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n    const {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    } = this._drawArgs(offset);\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY]\n    });\n  }\n}\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\nvar plugin_title = {\n  id: 'title',\n  _element: Title,\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold'\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nconst map = new WeakMap();\nvar plugin_subtitle = {\n  id: 'subtitle',\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal'\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nconst positioners = {\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n    let i, len;\n    let x = 0;\n    let y = 0;\n    let count = 0;\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        x += pos.x;\n        y += pos.y;\n        ++count;\n      }\n    }\n    return {\n      x: x / count,\n      y: y / count\n    };\n  },\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n    return {\n      x,\n      y\n    };\n  }\n};\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n  return base;\n}\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\nfunction createTooltipItem(chart, item) {\n  const {\n    element,\n    datasetIndex,\n    index\n  } = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {\n    label,\n    value\n  } = controller.getLabelAndValue(index);\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {\n    body,\n    footer,\n    title\n  } = tooltip;\n  const {\n    boxWidth,\n    boxHeight\n  } = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n  }\n  let widthPadding = 0;\n  const maxLineWidth = function (line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n  ctx.save();\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n  widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n  each(body, bodyItem => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n  widthPadding = 0;\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n  ctx.restore();\n  width += padding.width;\n  return {\n    width,\n    height\n  };\n}\nfunction determineYAlign(chart, size) {\n  const {\n    y,\n    height\n  } = size;\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > chart.height - height / 2) {\n    return 'bottom';\n  }\n  return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {\n    x,\n    width\n  } = size;\n  const caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {\n    x,\n    width\n  } = size;\n  const {\n    width: chartWidth,\n    chartArea: {\n      left,\n      right\n    }\n  } = chart;\n  let xAlign = 'center';\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n  return xAlign;\n}\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\nfunction alignX(size, xAlign) {\n  let {\n    x,\n    width\n  } = size;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= width / 2;\n  }\n  return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n  let {\n    y,\n    height\n  } = size;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= height / 2;\n  }\n  return y;\n}\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {\n    caretSize,\n    caretPadding,\n    cornerRadius\n  } = options;\n  const {\n    xAlign,\n    yAlign\n  } = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {\n    topLeft,\n    topRight,\n    bottomLeft,\n    bottomRight\n  } = toTRBLCorners(cornerRadius);\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n  return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\nconst defaultCallbacks = {\n  beforeTitle: noop,\n  title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      const item = tooltipItems[0];\n      const labels = item.chart.data.labels;\n      const labelCount = labels ? labels.length : 0;\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n    return '';\n  },\n  afterTitle: noop,\n  beforeBody: noop,\n  beforeLabel: noop,\n  label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n    let label = tooltipItem.dataset.label || '';\n    if (label) {\n      label += ': ';\n    }\n    const value = tooltipItem.formattedValue;\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n    return label;\n  },\n  labelColor(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0\n    };\n  },\n  labelTextColor() {\n    return this.options.bodyColor;\n  },\n  labelPointStyle(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation\n    };\n  },\n  afterLabel: noop,\n  afterBody: noop,\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  const result = callbacks[name].call(ctx, arg);\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n  return result;\n}\nclass Tooltip extends Element {\n  constructor(config) {\n    super();\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n    if (cached) {\n      return cached;\n    }\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n    return animations;\n  }\n  getContext() {\n    return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n  getTitle(context, options) {\n    const {\n      callbacks\n    } = options;\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n    return lines;\n  }\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n  }\n  getBody(tooltipItems, options) {\n    const {\n      callbacks\n    } = options;\n    const bodyItems = [];\n    each(tooltipItems, context => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n      bodyItems.push(bodyItem);\n    });\n    return bodyItems;\n  }\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n  }\n  getFooter(tooltipItems, options) {\n    const {\n      callbacks\n    } = options;\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n    return lines;\n  }\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n    each(tooltipItems, context => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n    });\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n    if (changed && options.external) {\n      options.external.call(this, {\n        chart: this.chart,\n        tooltip: this,\n        replay\n      });\n    }\n  }\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n  getCaretPosition(tooltipPoint, size, options) {\n    const {\n      xAlign,\n      yAlign\n    } = this;\n    const {\n      caretSize,\n      cornerRadius\n    } = options;\n    const {\n      topLeft,\n      topRight,\n      bottomLeft,\n      bottomRight\n    } = toTRBLCorners(cornerRadius);\n    const {\n      x: ptX,\n      y: ptY\n    } = tooltipPoint;\n    const {\n      width,\n      height\n    } = size;\n    let x1, x2, x3, y1, y2, y3;\n    if (yAlign === 'center') {\n      y2 = ptY + height / 2;\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n      y3 = y1;\n    }\n    return {\n      x1,\n      x2,\n      x3,\n      y1,\n      y2,\n      y3\n    };\n  }\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.titleAlign, options);\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing;\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing;\n        }\n      }\n    }\n  }\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColors = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {\n      boxHeight,\n      boxWidth,\n      boxPadding\n    } = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2,\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n      ctx.strokeStyle = labelColors.borderColor;\n      ctx.fillStyle = labelColors.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      ctx.lineWidth = isObject(labelColors.borderWidth) ? Math.max(...Object.values(labelColors.borderWidth)) : labelColors.borderWidth || 1;\n      ctx.strokeStyle = labelColors.borderColor;\n      ctx.setLineDash(labelColors.borderDash || []);\n      ctx.lineDashOffset = labelColors.borderDashOffset || 0;\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth - boxPadding);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - boxPadding - 2);\n      const borderRadius = toTRBLCorners(labelColors.borderRadius);\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius\n        });\n        ctx.fill();\n        ctx.stroke();\n        ctx.fillStyle = labelColors.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius\n        });\n        ctx.fill();\n      } else {\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.fillStyle = labelColors.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n  drawBody(pt, ctx, options) {\n    const {\n      body\n    } = this;\n    const {\n      bodySpacing,\n      bodyAlign,\n      displayColors,\n      boxHeight,\n      boxWidth,\n      boxPadding\n    } = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n    const fillLineOfText = function (line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n      lines = bodyItem.lines;\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n      each(bodyItem.after, fillLineOfText);\n    }\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing;\n  }\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n      footerFont = toFont(options.footerFont);\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {\n      xAlign,\n      yAlign\n    } = this;\n    const {\n      x,\n      y\n    } = pt;\n    const {\n      width,\n      height\n    } = tooltipSize;\n    const {\n      topLeft,\n      topRight,\n      bottomLeft,\n      bottomRight\n    } = toTRBLCorners(options.cornerRadius);\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n    ctx.fill();\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n      if (!position) {\n        return;\n      }\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n  _willRender() {\n    return !!this.opacity;\n  }\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n    if (!opacity) {\n      return;\n    }\n    this._updateAnimationTarget(options);\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n    const padding = toPadding(options.padding);\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n      this.drawBackground(pt, ctx, tooltipSize, options);\n      overrideTextDirection(ctx, options.textDirection);\n      pt.y += padding.top;\n      this.drawTitle(pt, ctx, options);\n      this.drawBody(pt, ctx, options);\n      this.drawFooter(pt, ctx, options);\n      restoreTextDirection(ctx, options.textDirection);\n      ctx.restore();\n    }\n  }\n  getActiveElements() {\n    return this._active || [];\n  }\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(({\n      datasetIndex,\n      index\n    }) => {\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n    const positionChanged = this._positionChanged(active, eventPosition);\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n  handleEvent(e, replay, inChartArea = true) {\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n    this._ignoreReplayEvents = false;\n    const options = this.options;\n    const lastActive = this._active || [];\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n    const positionChanged = this._positionChanged(active, e);\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n    if (changed) {\n      this._active = active;\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n        this.update(true, replay);\n      }\n    }\n    return changed;\n  }\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n    if (e.type === 'mouseout') {\n      return [];\n    }\n    if (!inChartArea) {\n      return lastActive;\n    }\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n    if (options.reverse) {\n      active.reverse();\n    }\n    return active;\n  }\n  _positionChanged(active, e) {\n    const {\n      caretX,\n      caretY,\n      options\n    } = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n}\n_defineProperty(Tooltip, \"positioners\", positioners);\nvar plugin_tooltip = {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({\n        chart,\n        options\n      });\n    }\n  },\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n      if (chart.notifyPlugins('beforeTooltipDraw', {\n        ...args,\n        cancelable: true\n      }) === false) {\n        return;\n      }\n      tooltip.draw(chart.ctx);\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      const useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        args.changed = true;\n      }\n    }\n  },\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold'\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {},\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold'\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart'\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY']\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n  descriptors: {\n    _scriptable: name => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n  additionalOptionScopes: ['interaction']\n};\nvar plugins = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  Colors: plugin_colors,\n  Decimation: plugin_decimation,\n  Filler: index,\n  Legend: plugin_legend,\n  SubTitle: plugin_subtitle,\n  Title: plugin_title,\n  Tooltip: plugin_tooltip\n});\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({\n      index,\n      label: raw\n    });\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\nfunction _getLabelForValue(value) {\n  const labels = this.getLabels();\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n  return value;\n}\nclass CategoryScale extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n  init(scaleOptions) {\n    const added = this._addedLabels;\n    if (added.length) {\n      const labels = this.getLabels();\n      for (const {\n        index,\n        label\n      } of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n      this._addedLabels = [];\n    }\n    super.init(scaleOptions);\n  }\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n  determineDataLimits() {\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let {\n      min,\n      max\n    } = this.getMinMax(true);\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n    labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n    for (let value = min; value <= max; value++) {\n      ticks.push({\n        value\n      });\n    }\n    return ticks;\n  }\n  getLabelForValue(value) {\n    return _getLabelForValue.call(this, value);\n  }\n  configure() {\n    super.configure();\n    if (!this.isHorizontal()) {\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n  getBasePixel() {\n    return this.bottom;\n  }\n}\n_defineProperty(CategoryScale, \"id\", 'category');\n_defineProperty(CategoryScale, \"defaults\", {\n  ticks: {\n    callback: _getLabelForValue\n  }\n});\nfunction generateTicks$1(generationOptions, dataRange) {\n  const ticks = [];\n  const MIN_SPACING = 1e-14;\n  const {\n    bounds,\n    step,\n    min,\n    max,\n    precision,\n    count,\n    maxTicks,\n    maxDigits,\n    includeBounds\n  } = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {\n    min: rmin,\n    max: rmax\n  } = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{\n      value: rmin\n    }, {\n      value: rmax\n    }];\n  }\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n  if (!isNullOrUndef(precision)) {\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    numSpaces = (niceMax - niceMin) / spacing;\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n  const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n  let j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({\n        value: min\n      });\n      if (niceMin < min) {\n        j++;\n      }\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n  for (; j < numSpaces; ++j) {\n    ticks.push({\n      value: Math.round((niceMin + j * spacing) * factor) / factor\n    });\n  }\n  if (maxDefined && includeBounds && niceMax !== max) {\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({\n        value: max\n      });\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({\n      value: niceMax\n    });\n  }\n  return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, {\n  horizontal,\n  minRotation\n}) {\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n    return +raw;\n  }\n  handleTickRangeOptions() {\n    const {\n      beginAtZero\n    } = this.options;\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let {\n      min,\n      max\n    } = this;\n    const setMin = v => min = minDefined ? min : v;\n    const setMax = v => max = maxDefined ? max : v;\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n    if (min === max) {\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n      setMax(max + offset);\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    let {\n      maxTicksLimit,\n      stepSize\n    } = tickOpts;\n    let maxTicks;\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n    return maxTicks;\n  }\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n    return ticks;\n  }\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n    super.configure();\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n}\nclass LinearScale extends LinearScaleBase {\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? min : 0;\n    this.max = isNumberFinite(max) ? max : 1;\n    this.handleTickRangeOptions();\n  }\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n    const tickFont = this._resolveTickFontOptions(0);\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n}\n_defineProperty(LinearScale, \"id\", 'linear');\n_defineProperty(LinearScale, \"defaults\", {\n  ticks: {\n    callback: Ticks.formatters.numeric\n  }\n});\nconst log10Floor = v => Math.floor(log10(v));\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\nfunction isMajor(tickVal) {\n  const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n  return remain === 1;\n}\nfunction steps(min, max, rangeExp) {\n  const rangeStep = Math.pow(10, rangeExp);\n  const start = Math.floor(min / rangeStep);\n  const end = Math.ceil(max / rangeStep);\n  return end - start;\n}\nfunction startExp(min, max) {\n  const range = max - min;\n  let rangeExp = log10Floor(range);\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n  return Math.min(rangeExp, log10Floor(min));\n}\nfunction generateTicks(generationOptions, {\n  min,\n  max\n}) {\n  min = finiteOrDefault(generationOptions.min, min);\n  const ticks = [];\n  const minExp = log10Floor(min);\n  let exp = startExp(min, max);\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  const stepSize = Math.pow(10, exp);\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\n  const start = Math.round((min - base) * precision) / precision;\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n  while (value < max) {\n    ticks.push({\n      value,\n      major: isMajor(value),\n      significand\n    });\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n  const lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({\n    value: lastTick,\n    major: isMajor(lastTick),\n    significand\n  });\n  return ticks;\n}\nclass LogarithmicScale extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n    return isNumberFinite(value) && value > 0 ? value : null;\n  }\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n    this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n    if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n    }\n    this.handleTickRangeOptions();\n  }\n  handleTickRangeOptions() {\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n    const setMin = v => min = minDefined ? min : v;\n    const setMax = v => max = maxDefined ? max : v;\n    if (min === max) {\n      if (min <= 0) {\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(changeExponent(min, -1));\n        setMax(changeExponent(max, +1));\n      }\n    }\n    if (min <= 0) {\n      setMin(changeExponent(max, -1));\n    }\n    if (max <= 0) {\n      setMax(changeExponent(min, +1));\n    }\n    this.min = min;\n    this.max = max;\n  }\n  buildTicks() {\n    const opts = this.options;\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n    return ticks;\n  }\n  getLabelForValue(value) {\n    return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n  configure() {\n    const start = this.min;\n    super.configure();\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n    return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n  }\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n}\n_defineProperty(LogarithmicScale, \"id\", 'logarithmic');\n_defineProperty(LogarithmicScale, \"defaults\", {\n  ticks: {\n    callback: Ticks.formatters.logarithmic,\n    major: {\n      enabled: true\n    }\n  }\n});\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - size / 2,\n      end: pos + size / 2\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\nfunction fitWithPointLabels(scale) {\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n  scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const extra = getTickBackdropHeight(opts) / 2;\n  const outerDistance = scale.drawingArea;\n  const additionalAngle = opts.pointLabels.centerPointLabels ? PI / valueCount : 0;\n  for (let i = 0; i < valueCount; i++) {\n    const pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + padding[i], additionalAngle);\n    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n    const size = labelSizes[i];\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = getTextAlignForAngle(angle);\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n    items.push({\n      x: pointLabelPosition.x,\n      y,\n      textAlign,\n      left,\n      top: y,\n      right: left + size.w,\n      bottom: y + size.h\n    });\n  }\n  return items;\n}\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n  return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= w / 2;\n  }\n  return x;\n}\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= h / 2;\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\nfunction drawPointLabels(scale, labelCount) {\n  const {\n    ctx,\n    options: {\n      pointLabels\n    }\n  } = scale;\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    const plFont = toFont(optsAtIndex.font);\n    const {\n      x,\n      y,\n      textAlign,\n      left,\n      top,\n      right,\n      bottom\n    } = scale._pointLabelItems[i];\n    const {\n      backdropColor\n    } = optsAtIndex;\n    if (!isNullOrUndef(backdropColor)) {\n      const borderRadius = toTRBLCorners(optsAtIndex.borderRadius);\n      const padding = toPadding(optsAtIndex.backdropPadding);\n      ctx.fillStyle = backdropColor;\n      const backdropLeft = left - padding.left;\n      const backdropTop = top - padding.top;\n      const backdropWidth = right - left + padding.width;\n      const backdropHeight = bottom - top + padding.height;\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: backdropLeft,\n          y: backdropTop,\n          w: backdropWidth,\n          h: backdropHeight,\n          radius: borderRadius\n        });\n        ctx.fill();\n      } else {\n        ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n      }\n    }\n    renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n      color: optsAtIndex.color,\n      textAlign: textAlign,\n      textBaseline: 'middle'\n    });\n  }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {\n    ctx\n  } = scale;\n  if (circular) {\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n  const {\n    color,\n    lineWidth\n  } = gridLineOpts;\n  if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n    return;\n  }\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\nclass RadialLinearScale extends LinearScaleBase {\n  constructor(cfg) {\n    super(cfg);\n    this.xCenter = undefined;\n    this.yCenter = undefined;\n    this.drawingArea = undefined;\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n  setDimensions() {\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(false);\n    this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n    this.handleTickRangeOptions();\n  }\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n    this._pointLabels = this.getLabels().map((value, index) => {\n      const label = callback(this.options.pointLabels.callback, [value, index], this);\n      return label || label === 0 ? label : '';\n    }).filter((v, i) => this.chart.getDataVisibility(i));\n  }\n  fit() {\n    const opts = this.options;\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n    return (value - this.min) * scalingFactor;\n  }\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n  getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n  getPointLabelPosition(index) {\n    const {\n      left,\n      top,\n      right,\n      bottom\n    } = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom\n    };\n  }\n  drawBackground() {\n    const {\n      backgroundColor,\n      grid: {\n        circular\n      }\n    } = this.options;\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {\n      angleLines,\n      grid,\n      border\n    } = opts;\n    const labelCount = this._pointLabels.length;\n    let i, offset, position;\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const context = this.getContext(index);\n          const optsAtIndex = grid.setContext(context);\n          const optsAtIndexBorder = border.setContext(context);\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n        }\n      });\n    }\n    if (angleLines.display) {\n      ctx.save();\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {\n          color,\n          lineWidth\n        } = optsAtIndex;\n        if (!lineWidth || !color) {\n          continue;\n        }\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n        offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n      ctx.restore();\n    }\n  }\n  drawBorder() {}\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n    if (!tickOpts.display) {\n      return;\n    }\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    this.ticks.forEach((tick, index) => {\n      if (index === 0 && !opts.reverse) {\n        return;\n      }\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n      }\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color\n      });\n    });\n    ctx.restore();\n  }\n  drawTitle() {}\n}\n_defineProperty(RadialLinearScale, \"id\", 'radialLinear');\n_defineProperty(RadialLinearScale, \"defaults\", {\n  display: true,\n  animate: true,\n  position: 'chartArea',\n  angleLines: {\n    display: true,\n    lineWidth: 1,\n    borderDash: [],\n    borderDashOffset: 0.0\n  },\n  grid: {\n    circular: false\n  },\n  startAngle: 0,\n  ticks: {\n    showLabelBackdrop: true,\n    callback: Ticks.formatters.numeric\n  },\n  pointLabels: {\n    backdropColor: undefined,\n    backdropPadding: 2,\n    display: true,\n    font: {\n      size: 10\n    },\n    callback(label) {\n      return label;\n    },\n    padding: 5,\n    centerPointLabels: false\n  }\n});\n_defineProperty(RadialLinearScale, \"defaultRoutes\", {\n  'angleLines.color': 'borderColor',\n  'pointLabels.color': 'color',\n  'ticks.color': 'color'\n});\n_defineProperty(RadialLinearScale, \"descriptors\", {\n  angleLines: {\n    _fallback: 'grid'\n  }\n});\nconst INTERVALS = {\n  millisecond: {\n    common: true,\n    size: 1,\n    steps: 1000\n  },\n  second: {\n    common: true,\n    size: 1000,\n    steps: 60\n  },\n  minute: {\n    common: true,\n    size: 60000,\n    steps: 60\n  },\n  hour: {\n    common: true,\n    size: 3600000,\n    steps: 24\n  },\n  day: {\n    common: true,\n    size: 86400000,\n    steps: 30\n  },\n  week: {\n    common: false,\n    size: 604800000,\n    steps: 4\n  },\n  month: {\n    common: true,\n    size: 2.628e9,\n    steps: 12\n  },\n  quarter: {\n    common: false,\n    size: 7.884e9,\n    steps: 4\n  },\n  year: {\n    common: true,\n    size: 3.154e10\n  }\n};\nconst UNITS = /* #__PURE__ */Object.keys(INTERVALS);\nfunction sorter(a, b) {\n  return a - b;\n}\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n  const adapter = scale._adapter;\n  const {\n    parser,\n    round,\n    isoWeekday\n  } = scale._parseOpts;\n  let value = input;\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n  if (!isNumberFinite(value)) {\n    value = typeof parser === 'string' ? adapter.parse(value, parser) : adapter.parse(value);\n  }\n  if (value === null) {\n    return null;\n  }\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n  }\n  return +value;\n}\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n  return UNITS[ilen - 1];\n}\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {\n      lo,\n      hi\n    } = _lookup(timestamps, time);\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n  return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n  constructor(props) {\n    super(props);\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n    this._unit = 'day';\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n  init(scaleOpts, opts = {}) {\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n    adapter.init(opts);\n    mergeIf(time.displayFormats, adapter.formats());\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n    super.init(scaleOpts);\n    this._normalized = opts.normalized;\n  }\n  parse(raw, index) {\n    if (raw === undefined) {\n      return null;\n    }\n    return parse(this, raw);\n  }\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    let {\n      min,\n      max,\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n    if (!minDefined || !maxDefined) {\n      _applyBounds(this._getLabelBounds());\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n    min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n    return {\n      min,\n      max\n    };\n  }\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n    const min = this.min;\n    const max = this.max;\n    const ticks = _filterBetween(timestamps, min, max);\n    this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n    if (options.reverse) {\n      ticks.reverse();\n    }\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n  afterAutoSkip() {\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n  initOffsets(timestamps = []) {\n    let start = 0;\n    let end = 0;\n    let first, last;\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n    this._offsets = {\n      start,\n      end,\n      factor: 1 / (start + 1 + end)\n    };\n  }\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n    return Object.keys(ticks).sort((a, b) => a - b).map(x => +x);\n  }\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n  format(value, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const fmt = format || formats[unit];\n    return this._adapter.format(value, fmt);\n  }\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formatter = options.ticks.callback;\n    if (formatter) {\n      return callback(formatter, [time, index, ticks], this);\n    }\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n  }\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n    return {\n      w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n      h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n    };\n  }\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n    const size = this._getLabelSize(exampleLabel);\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const metas = this.getMatchingVisibleMetas();\n    if (this._normalized && metas.length) {\n      return this._cache.data = metas[0].controller.getAllParsedValues(this);\n    }\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n    return this._cache.data = this.normalize(timestamps);\n  }\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const labels = this.getLabels();\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n    return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n  }\n  normalize(values) {\n    return _arrayUnique(values.sort(sorter));\n  }\n}\n_defineProperty(TimeScale, \"id\", 'time');\n_defineProperty(TimeScale, \"defaults\", {\n  bounds: 'data',\n  adapters: {},\n  time: {\n    parser: false,\n    unit: false,\n    round: false,\n    isoWeekday: false,\n    minUnit: 'millisecond',\n    displayFormats: {}\n  },\n  ticks: {\n    source: 'auto',\n    callback: false,\n    major: {\n      enabled: false\n    }\n  }\n});\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({\n        lo,\n        hi\n      } = _lookupByKey(table, 'pos', val));\n    }\n    ({\n      pos: prevSource,\n      time: prevTarget\n    } = table[lo]);\n    ({\n      pos: nextSource,\n      time: nextTarget\n    } = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({\n        lo,\n        hi\n      } = _lookupByKey(table, 'time', val));\n    }\n    ({\n      time: prevSource,\n      pos: prevTarget\n    } = table[lo]);\n    ({\n      time: nextSource,\n      pos: nextTarget\n    } = table[hi]);\n  }\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n  constructor(props) {\n    super(props);\n    this._table = [];\n    this._minPos = undefined;\n    this._tableRange = undefined;\n  }\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n  buildLookupTable(timestamps) {\n    const {\n      min,\n      max\n    } = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n    if (items.length < 2) {\n      return [{\n        time: min,\n        pos: 0\n      }, {\n        time: max,\n        pos: 1\n      }];\n    }\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({\n          time: curr,\n          pos: i / (ilen - 1)\n        });\n      }\n    }\n    return table;\n  }\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n    if (data.length && label.length) {\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n    timestamps = this._cache.all = timestamps;\n    return timestamps;\n  }\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n}\n_defineProperty(TimeSeriesScale, \"id\", 'timeseries');\n_defineProperty(TimeSeriesScale, \"defaults\", TimeScale.defaults);\nvar scales = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  CategoryScale: CategoryScale,\n  LinearScale: LinearScale,\n  LogarithmicScale: LogarithmicScale,\n  RadialLinearScale: RadialLinearScale,\n  TimeScale: TimeScale,\n  TimeSeriesScale: TimeSeriesScale\n});\nconst registerables = [controllers, elements, plugins, scales];\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, elements, layouts, plugins, registerables, registry, scales };","map":{"version":3,"names":["Animator","constructor","_request","_charts","Map","_running","_lastDate","undefined","_notify","chart","anims","date","type","callbacks","listeners","numSteps","duration","forEach","fn","initial","currentStep","Math","min","start","_refresh","requestAnimFrame","call","window","_update","Date","now","remaining","running","items","length","i","draw","item","_active","_total","tick","pop","_getAnims","charts","get","complete","progress","set","listen","event","cb","push","add","has","reduce","acc","cur","max","_duration","stop","cancel","remove","delete","animator","transparent","interpolators","boolean","from","to","factor","color","c0","c1","valid","mix","hexString","number","Animation","cfg","target","prop","currentValue","resolve","_fn","_easing","effects","easing","linear","_start","floor","delay","_loop","loop","_target","_prop","_from","_to","_promises","active","update","elapsed","remain","wait","promises","Promise","res","rej","resolved","method","Animations","config","_chart","_properties","configure","isObject","animationOptions","Object","keys","defaults","animation","animatedProps","getOwnPropertyNames","key","option","isArray","properties","_animateOptions","values","newOptions","options","resolveTargetOptions","animations","_createAnimations","$shared","awaitAll","$animations","then","props","charAt","value","size","assign","anim","all","scaleClip","scale","allowedOverflow","opts","reverse","end","defaultClip","xScale","yScale","x","y","top","right","bottom","left","toClip","t","r","b","l","disabled","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","ilen","index","applyStack","stack","dsIndex","singleMode","mode","datasetIndex","otherValue","isNumberFinite","sign","convertObjectDataToArray","data","adata","Array","isStacked","meta","stacked","getStackKey","indexScale","valueScale","id","getUserBounds","minDefined","maxDefined","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","vScale","positive","getMatchingVisibleMetas","updateStacks","controller","parsed","_cachedMeta","_stacks","iScale","iAxis","axis","vAxis","itemStacks","_top","_bottom","visualValues","_visualValues","getFirstScaleId","scales","filter","shift","createDatasetContext","parent","createContext","dataset","createDataContext","element","dataIndex","raw","clearStacks","_parsed","isDirectUpdateMode","cloneIfNotShared","cached","shared","createStack","canStack","hidden","_stacked","DatasetController","_ctx","ctx","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","datasetElementType","new","dataElementType","initialize","linkScales","addElements","fill","isPluginEnabled","console","warn","updateIndex","getDataset","chooseId","xid","xAxisID","valueOrDefault","yid","yAxisID","rid","rAxisID","indexAxis","iid","iAxisID","vid","vAxisID","getScaleForId","rScale","datasets","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","unlistenArrayEvents","_dataCheck","isExtensible","listenArrayEvents","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","scopes","getOptionScopes","createResolver","getContext","parsing","parse","count","sorted","_sorted","prev","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","resolveObjectKey","getParsed","getDataElement","updateRangeFromParsed","range","parsedValue","NaN","getMinMax","otherScale","otherMin","otherMax","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","_clip","clip","elements","area","chartArea","drawActiveElementsOnTop","getStyle","resolveDatasetElementOptions","resolveDataElementOptions","context","_resolveElementOptions","elementType","cache","cacheKey","sharing","defined","datasetElementScopeKeys","prefixes","names","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","_cacheable","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","arr","updateElements","removed","splice","_sync","args","_dataChanges","_onDataPush","arguments","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","_defineProperty","getAllScaleValues","_cache","$bar","visibleMetas","concat","_arrayUnique","sort","a","computeMinSampleSize","_length","curr","updateMinAndPrev","abs","getPixelForValue","ticks","getPixelForTick","computeFitCategoryTraits","ruler","stackCount","thickness","barThickness","ratio","isNullOrUndef","categoryPercentage","barPercentage","chunk","pixels","computeFlexCategoryTraits","next","percent","parseFloatBar","entry","startValue","endValue","barStart","barEnd","_custom","parseValue","parseArrayOrPrimitive","isFloatBar","custom","barSign","actualBase","isHorizontal","borderProps","horizontal","base","setBorderSkipped","edge","borderSkipped","enableBorderRadius","parseEdge","swap","startEnd","orig","v1","v2","v","setInflateAmount","inflateAmount","BarController","iAxisKey","vAxisKey","obj","bars","getBasePixel","_getRuler","vpixels","head","_calculateBarValuePixels","ipixels","_calculateBarIndexPixels","center","height","width","_getStacks","last","grouped","skipNull","val","isNaN","indexOf","_getStackCount","_getStackIndex","name","_startPixel","_endPixel","baseValue","minBarLength","floating","getDataVisibility","startPixel","getPixelForDecimal","endPixel","getValueForPixel","halfGrid","getLineWidthForValue","maxBarThickness","Infinity","stackIndex","rects","numbers","_index_","offset","grid","_value_","beginAtZero","BubbleController","radius","points","point","iPixel","vPixel","skip","getRatioAndOffset","rotation","circumference","cutout","ratioX","ratioY","offsetX","offsetY","TAU","startAngle","endAngle","startX","cos","startY","sin","endX","endY","calcMax","angle","_angleBetween","calcMin","maxX","maxY","HALF_PI","minX","PI","minY","DoughnutController","innerRadius","outerRadius","getter","_getRotation","toRadians","_getCircumference","_getRotationExtents","isDatasetVisible","arcs","spacing","getMaxBorderWidth","getMaxOffset","maxSize","toPercentage","chartWeight","_getRingWeight","maxWidth","maxHeight","maxRadius","toDimension","radiusLength","_getVisibleDatasetWeightTotal","total","calculateTotal","_getRingWeightOffset","_circumference","animateRotate","calculateCircumference","animationOpts","centerX","centerY","animateScale","arc","metaData","formatNumber","locale","borderAlign","borderWidth","hoverBorderWidth","hoverOffset","ringWeightOffset","weight","_scriptable","_indexable","aspectRatio","plugins","legend","generateLabels","pointStyle","map","style","text","fillStyle","backgroundColor","strokeStyle","borderColor","fontColor","lineWidth","onClick","e","legendItem","toggleDataVisibility","LineController","line","_dataset","animationsDisabled","_getStartAndCountOfVisiblePoints","_scaleRangesChanged","_datasetIndex","_decimated","showLine","segment","animated","spanGaps","maxGapLength","isNumber","directUpdate","pointsCount","prevParsed","nullData","border","firstPoint","lastPoint","updateControlPoints","PolarAreaController","_parseObjectDataRadialScale","bind","_updateRadius","minSize","cutoutPercentage","getVisibleDatasetCount","xCenter","yCenter","datasetStartAngle","getIndexAngle","defaultAngle","countVisibleElements","_computeAngle","getDistanceFromCenterForValue","angleLines","display","circular","pointLabels","PieController","RadarController","_fullLoop","pointPosition","getPointPositionForValue","ScatterController","registry","getElement","interaction","abstract","Error","DateAdapterBase","override","members","prototype","init","formats","format","diff","startOf","endOf","adapters","_date","binarySearch","metaset","intersect","lookupMethod","_reversePixels","_rlookupByKey","_lookupByKey","el","getRange","lo","hi","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","j","getDistanceMetricForAxis","useX","useY","pt1","pt2","deltaX","deltaY","sqrt","pow","getIntersectItems","useFinalPosition","includeInvisible","isPointInArea","evaluationFunc","_isPointInArea","inRange","getNearestRadialItems","getProps","getAngleFromPoint","getNearestCartesianItems","distanceMetric","minDistance","getCenterPoint","pointInArea","distance","getNearestItems","getAxisItems","rangeMethod","intersectsItem","Interaction","modes","getRelativePosition","nearest","STATIC_POSITIONS","filterByPosition","array","pos","filterDynamicPositionByAxis","box","sortByWeight","v0","wrapBoxes","boxes","layoutBoxes","stackWeight","buildStacks","layouts","wrap","includes","_stack","placed","setLayoutDims","params","vBoxMaxWidth","hBoxMaxHeight","layout","fullSize","availableWidth","availableHeight","buildLayoutBoxes","centerHorizontal","centerVertical","leftAndTop","rightAndBottom","vertical","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","w","heightChanged","h","same","other","handleMaxPadding","updatePos","change","getMargins","marginForPositions","positions","margin","fitBoxes","refitBoxes","refit","changed","setBoxDims","placeBoxes","userPadding","padding","height1","width1","addBox","_layers","z","removeBox","layoutItem","minPadding","toPadding","verticalBoxes","horizontalBoxes","each","beforeLayout","visibleVerticalBoxCount","BasePlatform","acquireContext","canvas","releaseContext","addEventListener","listener","removeEventListener","getDevicePixelRatio","getMaximumSize","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","initCanvas","renderHeight","getAttribute","renderWidth","boxSizing","displayWidth","readUsedSize","displayHeight","eventListenerOptions","supportsEventListenerOptions","passive","addListener","node","removeListener","fromNativeEvent","native","nodeListContains","nodeList","contains","createAttachObserver","observer","MutationObserver","entries","trigger","addedNodes","removedNodes","observe","document","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","devicePixelRatio","resize","currentDevicePixelRatio","listenDevicePixelRatioChanges","unlistenDevicePixelRatioChanges","createResizeObserver","container","_getParentNode","throttled","clientWidth","ResizeObserver","contentRect","releaseObserver","disconnect","createProxyAndListen","proxy","DomPlatform","removeAttribute","setAttribute","proxies","$proxies","handlers","attach","detach","isConnected","_detectPlatform","_isDomSupported","OffscreenCanvas","Element","tooltipPosition","hasValue","final","ret","autoSkip","tickOpts","determinedMaxTicks","determineMaxTicks","ticksLimit","maxTicksLimit","majorIndices","major","enabled","getMajorIndices","numMajorIndices","first","newTicks","skipMajors","calculateSpacing","avgMajorSpacing","round","tickLength","_tickSize","maxScale","maxChart","_maxLength","evenMajorSpacing","getEvenSpacing","factors","_factorize","result","ceil","majorStart","majorEnd","len","reverseAlign","align","offsetFromEdge","getTicksLimit","ticksLength","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","epsilon","lineValue","garbageCollect","caches","gc","gcLen","getTickMarkLength","drawTicks","getTitleHeight","fallback","font","toFont","lines","lineHeight","createScaleContext","createTickContext","titleAlign","_toLeftRightCenter","titleArgs","titleX","titleY","_alignStartEnd","positionAxisID","positionAxisID1","value1","Scale","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_dataLimitsCached","setContext","suggestedMin","suggestedMax","finiteOrDefault","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","callback","margins","grace","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","_addGrace","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","source","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","afterTickToLabelConversion","numTicks","minRotation","maxRotation","tickWidth","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","_limitValue","title","toDegrees","asin","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","mirror","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","widths","heights","widestLabelSize","highestLabelSize","jlen","tickFont","fontString","nestedLabel","_resolveTickFontOptions","string","_measureText","valueAt","idx","pixel","decimal","_int16Range","_alignPixel","getDecimalForPixel","getBaseValue","optionTicks","rot","autoSkipPadding","_computeGridLineItems","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","borderDash","dash","borderDashOffset","dashOffset","tickColor","tickBorderDash","tickBorderDashOffset","crossAlign","tickAndPadding","hTickAndPadding","textAlign","lineCount","textOffset","textBaseline","_getXAxisLabelAlignment","_getYAxisLabelAlignment","ret1","labelOffset","halfCount","strokeColor","textStrokeColor","strokeWidth","textStrokeWidth","tickTextAlign","showLabelBackdrop","backdrop","labelPadding","backdropPadding","backdropColor","translation","_computeLabelArea","drawBackground","save","fillRect","restore","findIndex","drawGrid","drawLine","p1","p2","setLineDash","lineDashOffset","beginPath","moveTo","lineTo","stroke","drawOnChartArea","drawBorder","lastLineWidth","drawLabels","clipArea","renderTextOptions","renderText","unclipArea","drawTitle","tz","gz","bz","axisID","_maxDigits","fontSize","TypedRegistry","scope","create","isForType","isPrototypeOf","register","proto","getPrototypeOf","parentScope","isIChartComponent","registerDefaults","overrides","unregister","itemDefaults","merge","defaultRoutes","routeDefaults","descriptors","describe","routes","property","propertyParts","split","sourceName","sourceScope","join","parts","targetName","targetScope","route","Registry","controllers","_typedRegistries","_each","addControllers","addPlugins","addScales","getController","_get","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","arg","reg","_getRegistryForType","_exec","itemReg","component","camelMethod","_capitalize","PluginService","_init","notify","hook","_createDescriptors","_descriptors","descriptor","plugin","cancelable","invalidate","_oldCache","_notifyStateChanges","allPlugins","createDescriptors","previousDescriptors","some","localIds","local","i1","getOpts","pluginOpts","pluginScopeKeys","scriptable","indexable","allKeys","getIndexAxis","datasetDefaults","datasetOptions","getAxisFromDefaultScaleID","getDefaultScaleIDFromAxis","axisFromPosition","determineAxis","scaleOptions","toLowerCase","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","error","_proxy","defaultId","defaultScaleOptions","mergeIf","defaultID","initOptions","initData","initConfig","keyCache","keysCached","Set","cachedKeys","generate","addIfFound","Config","_config","_scopeCache","_resolverCache","platform","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","resolver","subPrefixes","getResolver","needContext","isFunction","subResolver","_attachContext","descriptorDefaults","resolverCache","_createResolver","p","hasFunction","isScriptable","isIndexable","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","c","moveNumericKeys","intKey","determineLastEvent","lastEvent","inChartArea","isClick","getDatasetArea","Chart","invalidatePlugins","userConfig","initialCanvas","existingChart","uid","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","debounce","resizeDelay","_initialize","maintainAspectRatio","responsive","retinaScale","bindEvents","clearCanvas","_resize","_resizeBeforeDraw","newSize","newRatio","onResize","render","ensureScalesHaveIDs","scalesOptions","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","scaleClass","hasUpdated","_updateMetasets","_destroyDatasetMeta","slice","_removeUnreferencedMetasets","buildOrUpdateControllers","newControllers","order","visible","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","autoPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","events","setsEqual","unbindEvents","changes","_getUniformDataChanges","datasetCount","makeSet","changeSet","noArea","_idx","ilen1","_updateDataset","layers","_drawDatasets","_drawDataset","useClip","getElementsAtEventForMode","setDatasetVisibility","_updateVisibility","hide","show","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","_remove","detached","updateHoverStyle","prefix","getActiveElements","setActiveElements","activeElements","lastActive","_elementsEqual","pluginId","replay","hoverOptions","hover","deactivated","activated","eventFilter","_handleEvent","_getActiveElements","_isClickEvent","onHover","version","clipArc","pixelMargin","angleMargin","closePath","toRadiusCorners","_readValueToProps","parseBorderRadius$1","angleDelta","o","borderRadius","halfThickness","innerLimit","computeOuterLimit","outerArcLimit","outerStart","outerEnd","innerStart","innerEnd","rThetaToXY","theta","pathArc","innerR","spacingOffset","alpha","noSpacingInnerRadius","noSpacingOuterRadius","avNogSpacingRadius","adjustedAngle","beta","angleOffset","outerStartAdjustedRadius","outerEndAdjustedRadius","outerStartAdjustedAngle","outerEndAdjustedAngle","innerStartAdjustedRadius","innerEndAdjustedRadius","innerStartAdjustedAngle","innerEndAdjustedAngle","outerMidAdjustedAngle","pCenter","p4","pCenter1","innerMidAdjustedAngle","pCenter2","p8","pCenter3","outerStartX","outerStartY","outerEndX","outerEndY","drawArc","fullCircles","borderJoinStyle","inner","lineJoin","ArcElement","chartX","chartY","rAdjust","betweenAngles","withinRadius","_isBetween","halfAngle","halfRadius","translate","fix","radiusOffset","setStyle","lineCap","borderCapStyle","previous","getLineMethod","stepped","_steppedLineTo","tension","cubicInterpolationMode","_bezierCurveTo","pathVars","paramsStart","paramsEnd","segmentStart","segmentEnd","outside","pathSegment","lineMethod","fastPathSegment","avgX","countX","prevX","lastY","pointIndex","drawX","truncX","_getSegmentMethod","useFastPath","_getInterpolationMethod","_steppedInterpolation","_bezierInterpolation","_pointInLine","strokePathWithCache","path","_path","Path2D","strokePathDirect","segments","segmentMethod","usePath2D","LineElement","_points","_segments","_pointsUpdated","_updateBezierControlPoints","_computeSegments","interpolate","_boundSegments","_interpolate","interpolated","capBezierPoints","inRange$1","hitRadius","PointElement","mouseX","mouseY","inXRange","inYRange","hoverRadius","drawPoint","getBarBounds","bar","half","skipOrLimit","parseBorderWidth","maxW","maxH","toTRBL","parseBorderRadius","toTRBLCorners","maxR","enableBorder","topLeft","topRight","bottomLeft","bottomRight","boundingRects","bounds","outer","skipX","skipY","skipBoth","hasRadius","addNormalRectPath","rect","inflateRect","amount","refRect","BarElement","addRectPath","addRoundedRectPath","BORDER_COLORS","BACKGROUND_COLORS","replace","getBorderColor","getBackgroundColor","colorizeDefaultDataset","colorizeDoughnutDataset","colorizePolarAreaDataset","getColorizer","containsColorsDefinitions","k","containsColorsDefinition","plugin_colors","forceOverride","_args","chartOptions","colorizer","lttbDecimation","samples","decimated","bucketWidth","sampledIndex","endIndex","maxAreaPoint","maxArea","nextA","avgY","avgRangeStart","avgRangeEnd","avgRangeLength","rangeOffs","rangeTo","pointAx","pointAy","minMaxDecimation","minIndex","maxIndex","startIndex","xMin","xMax","dx","lastIndex","intermediateIndex1","intermediateIndex2","cleanDecimatedDataset","defineProperty","configurable","enumerable","writable","cleanDecimatedData","getStartAndCountOfVisiblePointsSimplified","pointCount","plugin_decimation","algorithm","beforeElementsUpdate","xAxis","threshold","d","tpoints","_findSegmentEnd","_getBounds","targetSegments","tgt","subBounds","fillSources","_boundSegment","fillSource","_getEdge","_normalizeAngle","_pointsFromSegments","boundary","linePoints","_createBoundaryLine","_shouldApplyFill","_resolveTarget","sources","propagate","visited","_decodeFill","parseFillOption","parseFloat","decodeTargetIndex","firstCh","_getTargetPixel","_getTargetValue","fillOption","_buildStackLine","sourcePoints","linesBelow","getLinesBelow","addPointsBelow","below","unshift","sourcePoint","postponed","findPoint","pointValue","firstValue","lastValue","simpleArc","_getTarget","getLineByIndex","computeBoundary","computeCircularBoundary","computeLinearBoundary","_drawfill","lineOpts","above","doFill","clipVertical","clipY","lineLoop","src","notShape","clipBounds","interpolatedLineTo","targetLoop","interpolatedPoint","afterDatasetsUpdate","$filler","beforeDraw","drawTime","beforeDatasetsDraw","beforeDatasetDraw","getBoxSize","labelOpts","boxHeight","boxWidth","usePointStyle","pointStyleWidth","itemHeight","itemsEqual","Legend","_added","legendHitBoxes","_hoveredItem","doughnutMode","legendItems","columnSizes","lineWidths","buildLabels","labelFont","_computeTitleHeight","_fitRows","_fitCols","hitboxes","totalHeight","row","itemWidth","measureText","_itemHeight","heightLimit","totalWidth","currentColWidth","currentColHeight","col","calculateItemSize","adjustHitBoxes","rtl","rtlHelper","getRtlAdapter","hitbox","leftForLtr","hitbox1","_draw","defaultColor","halfFontSize","cursor","drawLegendBox","lineDash","drawOptions","SQRT2","xPlus","drawPointLegend","yBoxTop","xBoxLeft","fillText","strikethrough","overrideTextDirection","textDirection","textWidth","setWidth","realX","_textX","fontLineHeight","calculateLegendItemHeight","restoreTextDirection","titleFont","titlePadding","topPaddingPlusHalfFontSize","_getLegendItemAt","hitBox","lh","handleEvent","isListened","hoveredItem","sameItem","onLeave","calculateItemWidth","calculateItemHeight","legendItemText","plugin_legend","_element","afterEvent","ci","useBorderRadius","startsWith","Title","_padding","textSize","_drawArgs","fontOpts","createTitle","titleBlock","plugin_title","WeakMap","plugin_subtitle","positioners","average","eventPosition","nearestElement","distanceBetweenPoints","tp","pushOrConcat","toPush","apply","splitNewlines","str","String","createTooltipItem","formattedValue","getTooltipSize","tooltip","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","bodyLineHeight","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineYAlign","doesNotFitWithAlign","xAlign","caret","caretSize","caretPadding","determineXAlign","yAlign","chartWidth","determineAlignment","alignX","alignY","paddingAndSize","getBackgroundPoint","alignment","cornerRadius","getAlignedX","getBeforeAfterBodyLines","createTooltipContext","tooltipItems","overrideCallbacks","defaultCallbacks","beforeTitle","noop","labelCount","afterTitle","beforeLabel","tooltipItem","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","bodyItems","scoped","getAfterBody","getFooter","_createItems","itemSort","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","pt","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","multiKeyBackground","outerX","innerX","strokeRect","drawBody","bodyAlign","xLinePadding","fillLineOfText","bodyAlignForCalculation","textColor","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","positionChanged","_positionChanged","_ignoreReplayEvents","plugin_tooltip","afterInit","afterDraw","_fallback","addIfString","addedLabels","findOrAddLabel","lastIndexOf","_getLabelForValue","CategoryScale","_startValue","_valueRange","_addedLabels","added","isFinite","generateTicks$1","generationOptions","dataRange","MIN_SPACING","precision","maxTicks","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","minSpacing","niceNum","niceMin","niceMax","numSpaces","almostWhole","almostEquals","decimalPlaces","_decimalPlaces","relativeLabelSize","rad","LinearScaleBase","_endValue","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","stepSize","computeTickLimit","numericGeneratorOptions","_setMinAndMaxByKey","LinearScale","Ticks","formatters","numeric","log10Floor","log10","changeExponent","m","isMajor","tickVal","steps","rangeExp","rangeStep","startExp","generateTicks","minExp","exp","significand","lastTick","LogarithmicScale","_zero","logarithmic","getTickBackdropHeight","measureLabelSize","_longestText","determineLimits","fitWithPointLabels","limits","valueCount","_pointLabels","pointLabelOpts","additionalAngle","centerPointLabels","getPointLabelContext","getPointPosition","drawingArea","plFont","hLimits","vLimits","updateLimits","setCenterPoint","_pointLabelItems","buildPointLabelItems","extra","outerDistance","pointLabelPosition","yForAngle","getTextAlignForAngle","leftForTextAlign","drawPointLabels","backdropLeft","backdropTop","backdropWidth","backdropHeight","pathRadiusLine","drawRadiusLine","gridLineOpts","createPointLabelContext","RadialLinearScale","leftMovement","rightMovement","topMovement","bottomMovement","angleMultiplier","scalingFactor","getValueForDistanceFromCenter","scaledDistance","pointLabel","distanceFromCenter","getBasePosition","getPointLabelPosition","rotate","animate","INTERVALS","millisecond","common","second","minute","hour","day","week","month","quarter","year","UNITS","sorter","input","adapter","_adapter","parser","isoWeekday","_parseOpts","determineUnitForAutoTicks","minUnit","capacity","interval","MAX_SAFE_INTEGER","determineUnitForFormatting","determineMajorUnit","addTick","time","timestamps","_lookup","timestamp","setMajorTicks","majorUnit","ticksFromTimestamps","TimeScale","_unit","_majorUnit","_offsets","_normalized","displayFormats","normalized","_applyBounds","_getLabelBounds","getLabelTimestamps","timeOpts","_generate","_filterBetween","_getLabelCapacity","initOffsets","offsetAfterAutoskip","getDecimalForValue","minor","weekday","hasWeekday","getDataTimestamps","tooltipFormat","datetime","fmt","_tickFormatFunction","formatter","minorFormat","majorFormat","offsets","_getLabelSize","ticksOpts","tickLabelWidth","cosRotation","sinRotation","tickFontSize","exampleTime","exampleLabel","normalize","table","prevSource","nextSource","prevTarget","nextTarget","span","TimeSeriesScale","_table","_minPos","_tableRange","_getTimestampsForTable","buildLookupTable","registerables"],"sources":["../src/core/core.animator.js","../src/core/core.animation.js","../src/core/core.animations.js","../src/core/core.datasetController.js","../src/controllers/controller.bar.js","../src/controllers/controller.bubble.js","../src/controllers/controller.doughnut.js","../src/controllers/controller.line.js","../src/controllers/controller.polarArea.js","../src/controllers/controller.pie.js","../src/controllers/controller.radar.js","../src/controllers/controller.scatter.js","../src/core/core.adapters.ts","../src/core/core.interaction.js","../src/core/core.layouts.js","../src/platform/platform.base.js","../src/platform/platform.basic.js","../src/platform/platform.dom.js","../src/platform/index.js","../src/core/core.element.ts","../src/core/core.scale.autoskip.js","../src/core/core.scale.js","../src/core/core.typedRegistry.js","../src/core/core.registry.js","../src/core/core.plugins.js","../src/core/core.config.js","../src/core/core.controller.js","../src/elements/element.arc.ts","../src/elements/element.line.js","../src/elements/element.point.ts","../src/elements/element.bar.js","../src/plugins/plugin.colors.ts","../src/plugins/plugin.decimation.js","../src/plugins/plugin.filler/filler.segment.js","../src/plugins/plugin.filler/filler.helper.js","../src/plugins/plugin.filler/filler.options.js","../src/plugins/plugin.filler/filler.target.stack.js","../src/plugins/plugin.filler/simpleArc.js","../src/plugins/plugin.filler/filler.target.js","../src/plugins/plugin.filler/filler.drawing.js","../src/plugins/plugin.filler/index.js","../src/plugins/plugin.legend.js","../src/plugins/plugin.title.js","../src/plugins/plugin.subtitle.js","../src/plugins/plugin.tooltip.js","../src/scales/scale.category.js","../src/scales/scale.linearbase.js","../src/scales/scale.linear.js","../src/scales/scale.logarithmic.js","../src/scales/scale.radialLinear.js","../src/scales/scale.time.js","../src/scales/scale.timeseries.js","../src/index.ts"],"sourcesContent":["import {requestAnimFrame} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('./core.animation.js').default } Animation\n * @typedef { import('./core.controller.js').default } Chart\n */\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is export for typedoc\n */\nexport class Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n\n  /**\n\t * @private\n\t */\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n    this._running = true;\n\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n      this._request = null;\n\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _update(date = Date.now()) {\n    let remaining = 0;\n\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n\n      for (; i >= 0; --i) {\n        item = items[i];\n\n        if (item._active) {\n          if (item._total > anims.duration) {\n            // if the animation has been updated and its duration prolonged,\n            // update to total duration of current animations run (for progress event)\n            anims.duration = item._total;\n          }\n          item.tick(date);\n          draw = true;\n        } else {\n          // Remove the item by replacing it with last item and removing the last\n          // A lot faster than splice.\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n\n      if (draw) {\n        chart.draw();\n        this._notify(chart, anims, date, 'progress');\n      }\n\n      if (!items.length) {\n        anims.running = false;\n        this._notify(chart, anims, date, 'complete');\n        anims.initial = false;\n      }\n\n      remaining += items.length;\n    });\n\n    this._lastDate = date;\n\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n    return anims;\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} event - event name\n\t * @param {Function} cb - callback\n\t */\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n\n  /**\n\t * Add animations\n\t * @param {Chart} chart\n\t * @param {Animation[]} items - animations\n\t */\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n    this._getAnims(chart).items.push(...items);\n  }\n\n  /**\n\t * Counts number of active animations for the chart\n\t * @param {Chart} chart\n\t */\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n\n  /**\n\t * Start animating (all charts)\n\t * @param {Chart} chart\n\t */\n  start(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims) {\n      return;\n    }\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n    this._refresh();\n  }\n\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n\t * Stop all animations for the chart\n\t * @param {Chart} chart\n\t */\n  stop(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.items.length) {\n      return;\n    }\n    const items = anims.items;\n    let i = items.length - 1;\n\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n    anims.items = [];\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n\n  /**\n\t * Remove chart from Animator\n\t * @param {Chart} chart\n\t */\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Animator();\n","import effects from '../helpers/helpers.easing.js';\nimport {resolve} from '../helpers/helpers.options.js';\nimport {color as helpersColor} from '../helpers/helpers.color.js';\n\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  /**\n   * @param {string} from\n   * @param {string} to\n   * @param {number} factor\n   */\n  color(from, to, factor) {\n    const c0 = helpersColor(from || transparent);\n    const c1 = c0.valid && helpersColor(to || transparent);\n    return c1 && c1.valid\n      ? c1.mix(c0, factor).hexString()\n      : to;\n  },\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\n\nexport default class Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n\n  active() {\n    return this._active;\n  }\n\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n\n  cancel() {\n    if (this._active) {\n      // update current evaluated value, for smoother animations\n      this.tick(Date.now());\n      this._active = false;\n      this._notify(false);\n    }\n  }\n\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n\n    this._active = from !== to && (loop || (elapsed < duration));\n\n    if (!this._active) {\n      this._target[prop] = to;\n      this._notify(true);\n      return;\n    }\n\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n\n    factor = (elapsed / duration) % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n\n    this._target[prop] = this._fn(from, to, factor);\n  }\n\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({res, rej});\n    });\n  }\n\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n}\n","import animator from './core.animator.js';\nimport Animation from './core.animation.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isObject} from '../helpers/helpers.core.js';\n\nexport default class Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n\n    const animationOptions = Object.keys(defaults.animation);\n    const animatedProps = this._properties;\n\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n      if (!isObject(cfg)) {\n        return;\n      }\n      const resolved = {};\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach((prop) => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n\n  /**\n\t * Utility to handle animation of `options`.\n\t * @private\n\t */\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n    if (!options) {\n      return [];\n    }\n\n    const animations = this._createAnimations(options, newOptions);\n    if (newOptions.$shared) {\n      // Going to shared options:\n      // After all animations are done, assign the shared options object to the element\n      // So any new updates to the shared options are observed\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {\n        // rejected, noop\n      });\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @private\n\t */\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n\n      if (animation) {\n        if (cfg && animation.active()) {\n          // There is an existing active animation, let's update that\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n      if (!cfg || !cfg.duration) {\n        // not animated, set directly to new value\n        target[prop] = value;\n        continue;\n      }\n\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n    return animations;\n  }\n\n\n  /**\n\t * Update `target` properties to new values, using configured animations\n\t * @param {object} target - object to update\n\t * @param {object} values - new target properties\n\t * @returns {boolean|undefined} - `true` if animations were started\n\t **/\n  update(target, values) {\n    if (this._properties.size === 0) {\n      // Nothing is animated, just apply the new values.\n      Object.assign(target, values);\n      return;\n    }\n\n    const animations = this._createAnimations(target, values);\n\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n}\n\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  // @ts-ignore\n  return Promise.all(running);\n}\n\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  let options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    // Going from shared options to distinct one:\n    // Create new options object containing the old shared values and start updating that.\n    target.options = options = Object.assign({}, options, {$shared: false, $animations: {}});\n  }\n  return options;\n}\n","import Animations from './core.animations.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isFinite, isObject, valueOrDefault, resolveObjectKey, defined} from '../helpers/helpers.core.js';\nimport {listenArrayEvents, unlistenArrayEvents} from '../helpers/helpers.collection.js';\nimport {createContext, sign} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('./core.scale.js').default } Scale\n */\n\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\n\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\n\nfunction toClip(value) {\n  let t, r, b, l;\n\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\n\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n  let i, ilen;\n\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\n\nfunction applyStack(stack, value, dsIndex, options = {}) {\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n\n  if (value === null) {\n    return;\n  }\n\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isFinite(otherValue) && (singleMode || (value === 0 || sign(value) === sign(otherValue)))) {\n      value += otherValue;\n    }\n  }\n  return value;\n}\n\nfunction convertObjectDataToArray(data) {\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      x: key,\n      y: data[key]\n    };\n  }\n  return adata;\n}\n\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || (stacked === undefined && meta.stack !== undefined);\n}\n\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\n\nfunction getUserBounds(scale) {\n  const {min, max, minDefined, maxDefined} = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\n\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\n\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n    if ((positive && value > 0) || (!positive && value < 0)) {\n      return meta.index;\n    }\n  }\n\n  return null;\n}\n\nfunction updateStacks(controller, parsed) {\n  const {chart, _cachedMeta: meta} = controller;\n  const stacks = chart._stacks || (chart._stacks = {}); // map structure is {stackKey: {datasetIndex: value}}\n  const {iScale, vScale, index: datasetIndex} = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {[iAxis]: index, [vAxis]: value} = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n\n    const visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\n\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\n\nfunction createDatasetContext(parent, index) {\n  return createContext(parent,\n    {\n      active: false,\n      dataset: undefined,\n      datasetIndex: index,\n      index,\n      mode: 'default',\n      type: 'dataset'\n    }\n  );\n}\n\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\n\nfunction clearStacks(meta, items) {\n  // Not using meta.index here, because it might be already updated if the dataset changed location\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n\n  items = items || meta._parsed;\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n    delete stacks[axis][datasetIndex];\n    if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n      delete stacks[axis]._visualValues[datasetIndex];\n    }\n  }\n}\n\nconst isDirectUpdateMode = (mode) => mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked\n  && {keys: getSortedDatasetIndices(chart, true), values: null};\n\nexport default class DatasetController {\n\n  /**\n   * @type {any}\n   */\n  static defaults = {};\n\n  /**\n   * Element type used to generate a meta dataset (e.g. Chart.element.LineElement).\n   */\n  static datasetElementType = null;\n\n  /**\n   * Element type used to generate a meta data (e.g. Chart.element.PointElement).\n   */\n  static dataElementType = null;\n\n  /**\n\t * @param {Chart} chart\n\t * @param {number} datasetIndex\n\t */\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    /** @type {boolean | object} */\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = new.target.datasetElementType;\n    this.dataElementType = new.target.dataElementType;\n\n    this.initialize();\n  }\n\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n    }\n  }\n\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n    this.index = datasetIndex;\n  }\n\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n\n  /**\n\t * @param {string} scaleID\n\t * @return {Scale}\n\t */\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n\n  /**\n\t * @private\n\t */\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale\n      ? meta.vScale\n      : meta.iScale;\n  }\n\n  reset() {\n    this._update('reset');\n  }\n\n  /**\n\t * @private\n\t */\n  _destroy() {\n    const meta = this._cachedMeta;\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n\n    // In order to correctly handle data addition/deletion animation (an thus simulate\n    // real-time charts), we need to monitor these data modifications and synchronize\n    // the internal meta data accordingly.\n\n    if (isObject(data)) {\n      this._data = convertObjectDataToArray(data);\n    } else if (_data !== data) {\n      if (_data) {\n        // This case happens when the user replaced the data array instance.\n        unlistenArrayEvents(_data, this);\n        // Discard old parsed data and stacks\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n\n  addElements() {\n    const meta = this._cachedMeta;\n\n    this._dataCheck();\n\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n\n    this._dataCheck();\n\n    // make sure cached _stacked status is current\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n\n    // detect change in stack option\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      // remove values from old stack\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n\n    // Re-sync meta data in case the user replaced the data array or if we missed\n    // any updates and so make sure that we handle number of datapoints changing.\n    this._resyncElements(resetNewElements);\n\n    // if stack changed, update stack values for the whole dataset\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n    }\n  }\n\n  /**\n\t * Merges user-supplied and default dataset-level options\n\t * @private\n\t */\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n\n  /**\n\t * @param {number} start\n\t * @param {number} count\n\t */\n  parse(start, count) {\n    const {_cachedMeta: meta, _data: data} = this;\n    const {iScale, _stacked} = meta;\n    const iAxis = iScale.axis;\n\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || (prev && cur[iAxis] < prev[iAxis]);\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n          prev = cur;\n        }\n      }\n      meta._sorted = sorted;\n    }\n\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [1,3,4]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {xScale0: 0, yScale0: 1}\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [[1,2],[3,4]]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {x: 0, y: 1}\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [{x:1, y:5}, {x:2, y:10}]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id. _custom is optional\n\t * Example: {xScale0: 0, yScale0: 1, _custom: {r: 10, foo: 'bar'}}\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]._visualValues\n    };\n    return applyStack(stack, value, meta.index, {mode});\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n    const otherScale = this._getOtherScale(scale);\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n    const {min: otherMin, max: otherMax} = getUserBounds(otherScale);\n    let i, parsed;\n\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n      if (sorted) {\n        // if the data is sorted, we don't need to check further from this end of array\n        break;\n      }\n    }\n    if (sorted) {\n      // in the sorted case, find first non-skipped value from other end of array\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n    return range;\n  }\n\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n      if (isFinite(value)) {\n        values.push(value);\n      }\n    }\n    return values;\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return false;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {} // eslint-disable-line no-unused-vars\n\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || (elements.length - start);\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n      if (element.hidden) {\n        continue;\n      }\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n\n  /**\n\t * Returns a set of predefined style properties that should be used to represent the dataset\n\t * or the data if the index is specified\n\t * @param {number} index - data index\n\t * @param {boolean} [active] - true if hover\n\t * @return {object} style object\n\t */\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset\n      ? this.resolveDatasetElementOptions(mode)\n      : this.resolveDataElementOptions(index || 0, mode);\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context ||\n        (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context ||\n        (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n\n  /**\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveElementOptions(elementType, mode = 'default', index) {\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n    // context is provided as a function, and is called only if needed,\n    // so we don't create a context for each element if not needed.\n    const context = () => this.getContext(index, active, mode);\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n\n    if (values.$shared) {\n      // `$shared` indicates this set of options can be shared between multiple elements.\n      // Sharing is used to reduce number of properties to change during animation.\n      values.$shared = sharing;\n\n      // We cache options by `mode`, which can be 'active' for example. This enables us\n      // to have the 'active' element options and 'default' options to switch between\n      // when interacting.\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n\n    return values;\n  }\n\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n    if (cached) {\n      return cached;\n    }\n    let options;\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n    const animations = new Animations(chart, options && options.animations);\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n    return animations;\n  }\n\n  /**\n\t * Utility for getting the options object shared between elements\n\t * @protected\n\t */\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n\n  /**\n\t * Utility for determining if `options` should be included in the updated properties\n\t * @protected\n\t */\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n\n  /**\n   * @todo v4, rename to getSharedOptions and remove excess functions\n   */\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || (sharedOptions !== previouslySharedOptions);\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {sharedOptions, includeOptions};\n  }\n\n  /**\n\t * Utility for updating an element with new properties, using animations when appropriate.\n\t * @protected\n\t */\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n\n  /**\n\t * Utility to animate the shared options, that are potentially affecting multiple elements.\n\t * @protected\n\t */\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n    this._resolveAnimations(index, mode, active).update(element, {\n      // When going from active to inactive, we need to update to the shared options.\n      // This way the once hovered element will end up with the same original shared options instance, after animation.\n      options: (!active && this.getSharedOptions(options)) || options\n    });\n  }\n\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n\n  /**\n\t * @private\n\t */\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n\n    // Apply changes detected through array listeners\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n    this._syncList = [];\n\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n\n    if (count) {\n      // TODO: It is not optimal to always parse the old data\n      // This is done because we are not detecting direct assignments:\n      // chart.data.datasets[0].data[5] = 10;\n      // chart.data.datasets[0].data[5].y = 10;\n      this.parse(0, count);\n    }\n\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _insertElements(start, count, resetNewElements = true) {\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n\n    const move = (arr) => {\n      arr.length += count;\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n    move(data);\n\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n    this.parse(start, count);\n\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n\n  updateElements(element, start, count, mode) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @private\n\t */\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n    meta.data.splice(start, count);\n  }\n\n  /**\n\t * @private\n   */\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n\n  _onDataPush() {\n    const count = arguments.length;\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n    const newCount = arguments.length - 2;\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {\n  _arrayUnique, isArray, isNullOrUndef,\n  valueOrDefault, resolveObjectKey, sign, defined\n} from '../helpers/index.js';\n\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n  return scale._cache.$bar;\n}\n\n/**\n * Computes the \"optimal\" sample size to maintain bars equally sized while preventing overlap.\n * @private\n */\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      // Ignore truncated pixels\n      return;\n    }\n    if (defined(prev)) {\n      // curr - prev === 0 is ignored\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n\n  return min;\n}\n\n/**\n * Computes an \"ideal\" category based on the absolute bar thickness or, if undefined or null,\n * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This\n * mode currently always generates bars equally sized (until we introduce scriptable options?).\n * @private\n */\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    // When bar thickness is enforced, category and bar percentages are ignored.\n    // Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')\n    // and deprecate barPercentage since this value is ignored when thickness is absolute.\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - (size / 2)\n  };\n}\n\n/**\n * Computes an \"optimal\" category that globally arranges bars side by side (no gap when\n * percentage options are 1), based on the previous and following categories. This mode\n * generates bars with different widths when data are not evenly spaced.\n * @private\n */\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n\n  if (prev === null) {\n    // first data: its size is double based on the next point or,\n    // if it's also the last data, we use the scale size.\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n\n  if (next === null) {\n    // last data: its size is also double based on the previous point.\n    next = curr + curr - prev;\n  }\n\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\n\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n\n  // Store `barEnd` (furthest away from origin) as parsed value,\n  // to make stacking straight forward\n  item[vScale.axis] = barEnd;\n\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\n\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\n\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\n\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\n\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\n\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {start, end, reverse, top, bottom};\n}\n\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n\n  if (edge === true) {\n    properties.borderSkipped = {top: true, right: true, bottom: true, left: true};\n    return;\n  }\n\n  const {start, end, reverse, top, bottom} = borderProps(properties);\n\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\n\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\n\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\n\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\n\nfunction setInflateAmount(properties, {inflateAmount}, ratio) {\n  properties.inflateAmount = inflateAmount === 'auto'\n    ? ratio === 1 ? 0.33 : 0\n    : inflateAmount;\n}\n\nexport default class BarController extends DatasetController {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'bar',\n\n    categoryPercentage: 0.8,\n    barPercentage: 0.9,\n    grouped: true,\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'base', 'width', 'height']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n        offset: true,\n        grid: {\n          offset: true\n        }\n      },\n      _value_: {\n        type: 'linear',\n        beginAtZero: true,\n      }\n    }\n  };\n\n\n  /**\n\t * Overriding primitive data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding array data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding object data parsing since we support mixed primitive/array\n\t * value-scale data for float bars\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n    if (custom && scale === this._cachedMeta.vScale) {\n      // float bar: only one end of the bar is considered by `super`\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {iScale, vScale} = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom)\n      ? '[' + custom.start + ', ' + custom.end + ']'\n      : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n\n  initialize() {\n    this.enableOptionSharing = true;\n\n    super.initialize();\n\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {index, _cachedMeta: {vScale}} = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n    const ruler = this._getRuler();\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {base, head: base} : this._calculateBarValuePixels(i);\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n      const stack = (parsed._stacks || {})[vScale.axis];\n\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || (index === stack._top || index === stack._bottom),\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n\n  /**\n\t * Returns the stacks based on groups and bar visibility.\n\t * @param {number} [last] - The dataset index\n\t * @param {number} [dataIndex] - The data index of the ruler\n\t * @returns {string[]} The list of stack IDs\n\t * @private\n\t */\n  _getStacks(last, dataIndex) {\n    const {iScale} = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type)\n      .filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n\n    const skipNull = (meta) => {\n      const parsed = meta.controller.getParsed(dataIndex);\n      const val = parsed && parsed[meta.vScale.axis];\n\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n\n      // stacked   | meta.stack\n      //           | found | not found | undefined\n      // false     |   x   |     x     |     x\n      // true      |       |     x     |\n      // undefined |       |     x     |     x\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 ||\n\t\t\t\t(stacked === undefined && meta.stack === undefined)) {\n        stacks.push(meta.stack);\n      }\n      if (meta.index === last) {\n        break;\n      }\n    }\n\n    // No stacks? that means there is no visible data. Let's still initialize an `undefined`\n    // stack where possible invisible bars will be located.\n    // https://github.com/chartjs/Chart.js/issues/6368\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n\n    return stacks;\n  }\n\n  /**\n\t * Returns the effective number of stacks based on groups and bar visibility.\n\t * @private\n\t */\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n\n  /**\n\t * Returns the stack index for the given dataset based on groups and bar visibility.\n\t * @param {number} [datasetIndex] - The dataset index\n\t * @param {string} [name] - The stack name to find\n   * @param {number} [dataIndex]\n\t * @returns {number} The stack index\n\t * @private\n\t */\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n    const index = (name !== undefined)\n      ? stacks.indexOf(name)\n      : -1; // indexOf returns -1 if element is not present\n\n    return (index === -1)\n      ? stacks.length - 1\n      : index;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      // bar thickness ratio used for non-grouped bars\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n\n  /**\n\t * Note: pixel values are not clamped to the scale area.\n\t * @private\n\t */\n  _calculateBarValuePixels(index) {\n    const {_cachedMeta: {vScale, _stacked, index: datasetIndex}, options: {base: baseValue, minBarLength}} = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n      // bars crossing origin are not stacked\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n      start += value;\n    }\n\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      // When not visible, no height\n      head = base;\n    }\n\n    size = head - base;\n\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n\n      if (_stacked && !floating) {\n        // visual data coordinates after applying minBarLength\n        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n      }\n    }\n\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex'\n        ? computeFlexCategoryTraits(index, ruler, options, stackCount)\n        : computeFitCategoryTraits(index, ruler, options, stackCount);\n\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n      center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      // For non-grouped bar charts, exact pixel values are used\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {valueOrDefault} from '../helpers/helpers.core.js';\n\nexport default class BubbleController extends DatasetController {\n\n  static id = 'bubble';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'borderWidth', 'radius']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n\n    let max = 0;\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n    return max > 0 && max;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n\n  update(mode) {\n    const points = this._cachedMeta.data;\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n\n    // In case values were cached (and thus frozen), we need to clone the values\n    if (values.$shared) {\n      values = Object.assign({}, values, {$shared: false});\n    }\n\n    // Custom radius resolution\n    const radius = values.radius;\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n\n    return values;\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isObject, resolveObjectKey, toPercentage, toDimension, valueOrDefault} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {toRadians, PI, TAU, HALF_PI, _angleBetween} from '../helpers/helpers.math.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n  // If the chart's circumference isn't a full circle, calculate size as a ratio of the width/height of the arc\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {ratioX, ratioY, offsetX, offsetY};\n}\n\nexport default class DoughnutController extends DatasetController {\n\n  static id = 'doughnut';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'arc',\n    animation: {\n      // Boolean - Whether we animate the rotation of the Doughnut\n      animateRotate: true,\n      // Boolean - Whether we animate scaling the Doughnut from the centre\n      animateScale: false\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n      },\n    },\n    // The percentage of the chart that we cut out of the middle.\n    cutout: '50%',\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outr radius of the chart\n    radius: '100%',\n\n    // Spacing between arcs\n    spacing: 0,\n\n    indexAxis: 'r',\n  };\n\n  static descriptors = {\n    _scriptable: (name) => name !== 'spacing',\n    _indexable: (name) => name !== 'spacing',\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    // Need to override these to give a nice default\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n\n  linkScales() {}\n\n  /**\n\t * Override data parsing, since we are not using scales\n\t */\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = (i) => +data[i];\n\n      if (isObject(data[start])) {\n        const {key = 'value'} = this._parsing;\n        getter = (i) => +resolveObjectKey(data[i], key);\n      }\n\n      let i, ilen;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n\n  /**\n\t * @private\n\t */\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n\n  /**\n\t * Get the maximal rotation & circumference extents\n\t * across all visible datasets.\n\t */\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n        const rotation = controller._getRotation();\n        const circumference = controller._getCircumference();\n\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n\n    return {\n      rotation: min,\n      circumference: max - min,\n    };\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {\n    const chart = this.chart;\n    const {chartArea} = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n    const chartWeight = this._getRingWeight(this.index);\n\n    // Compute the maximal rotation & circumference limits.\n    // If we only consider our dataset, this can cause problems when two datasets\n    // are both less than a circle with different rotations (starting angles)\n    const {circumference, rotation} = this._getRotationExtents();\n    const {ratioX, ratioY, offsetX, offsetY} = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n\n    meta.total = this.calculateTotal();\n\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @private\n   */\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const circumference = this._getCircumference();\n    if ((reset && opts.animation.animateRotate) || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    let startAngle = this._getRotation();\n    let i;\n\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n      startAngle += circumference;\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n\n    return total;\n  }\n\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n    return 0;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n\n    if (!arcs) {\n      // Find the outmost visible dataset\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n\n    if (!arcs) {\n      return 0;\n    }\n\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n    return max;\n  }\n\n  getMaxOffset(arcs) {\n    let max = 0;\n\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n    return max;\n  }\n\n  /**\n\t * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly\n\t * @private\n\t */\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n\n    return ringWeightOffset;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n\n  /**\n\t * Returns the sum of all visible data set weights.\n\t * @private\n\t */\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class LineController extends DatasetController {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n\n    showLine: true,\n    spanGaps: false,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n      },\n      _value_: {\n        type: 'linear',\n      },\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {dataset: line, data: points = [], _dataset} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    // Update Line\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n\n    const options = this.resolveDatasetElementOptions(mode);\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    const end = start + count;\n    const pointsCount = points.length;\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = 0; i < pointsCount; ++i) {\n      const point = points[i];\n      const properties = directUpdate ? point : {};\n\n      if (i < start || i >= end) {\n        properties.skip = true;\n        continue;\n      }\n\n      const parsed = this.getParsed(i);\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {toRadians, PI, formatNumber, _parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class PolarAreaController extends DatasetController {\n\n  static id = 'polarArea';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: true\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n      },\n    },\n    indexAxis: 'r',\n    startAngle: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    },\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n        angleLines: {\n          display: false\n        },\n        beginAtZero: true,\n        grid: {\n          circular: true\n        },\n        pointLabels: {\n          display: false\n        },\n        startAngle: 0\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n\n    this._updateRadius();\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @protected\n   */\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n\n    return range;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? (outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n\n    this.outerRadius = outerRadius - (radiusLength * this.index);\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n\n    const defaultAngle = 360 / this.countVisibleElements();\n\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n\n    return count;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index)\n      ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle)\n      : 0;\n  }\n}\n","import DoughnutController from './controller.doughnut.js';\n\n// Pie charts are Doughnut chart with different defaults\nexport default class PieController extends DoughnutController {\n\n  static id = 'pie';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    // The percentage of the chart that we cut out of the middle.\n    cutout: 0,\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outr radius of the chart\n    radius: '100%'\n  };\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {_parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class RadarController extends DatasetController {\n\n  static id = 'radar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    indexAxis: 'r',\n    showLine: true,\n    elements: {\n      line: {\n        fill: 'start'\n      }\n    },\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n\n    // Update Line\n    line.points = points;\n    // In resize mode only point locations change, so no need to set the points or options.\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n\n      this.updateElement(line, undefined, properties, mode);\n    }\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class ScatterController extends DatasetController {\n\n  static id = 'scatter';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    showLine: false,\n    fill: false\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n\n    interaction: {\n      mode: 'point'\n    },\n\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + ')'\n    };\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {data: points = []} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    if (this.options.showLine) {\n\n      const {dataset: line, _dataset} = meta;\n\n      // Update Line\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    }\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  addElements() {\n    const {showLine} = this.options;\n\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = this.chart.registry.getElement('line');\n    }\n\n    super.addElements();\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n\n    if (!this.options.showLine) {\n      let max = 0;\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n      return max > 0 && max;\n    }\n\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n\n    if (!data.length) {\n      return border;\n    }\n\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n}\n","/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */\n\nimport type {AnyObject} from '../types/basic.js';\nimport type {ChartOptions} from '../types/index.js';\n\nexport type TimeUnit = 'millisecond' | 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year';\n\nexport interface DateAdapter<T extends AnyObject = AnyObject> {\n  readonly options: T;\n  /**\n   * Will called with chart options after adapter creation.\n   */\n  init(this: DateAdapter<T>, chartOptions: ChartOptions): void;\n  /**\n   * Returns a map of time formats for the supported formatting units defined\n   * in Unit as well as 'datetime' representing a detailed date/time string.\n   */\n  formats(this: DateAdapter<T>): Record<string, string>;\n  /**\n   * Parses the given `value` and return the associated timestamp.\n   * @param value - the value to parse (usually comes from the data)\n   * @param [format] - the expected data format\n   */\n  parse(this: DateAdapter<T>, value: unknown, format?: TimeUnit): number | null;\n  /**\n   * Returns the formatted date in the specified `format` for a given `timestamp`.\n   * @param timestamp - the timestamp to format\n   * @param format - the date/time token\n   */\n  format(this: DateAdapter<T>, timestamp: number, format: TimeUnit): string;\n  /**\n   * Adds the specified `amount` of `unit` to the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param amount - the amount to add\n   * @param unit - the unit as string\n   */\n  add(this: DateAdapter<T>, timestamp: number, amount: number, unit: TimeUnit): number;\n  /**\n   * Returns the number of `unit` between the given timestamps.\n   * @param a - the input timestamp (reference)\n   * @param b - the timestamp to subtract\n   * @param unit - the unit as string\n   */\n  diff(this: DateAdapter<T>, a: number, b: number, unit: TimeUnit): number;\n  /**\n   * Returns start of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   * @param [weekday] - the ISO day of the week with 1 being Monday\n   * and 7 being Sunday (only needed if param *unit* is `isoWeek`).\n   */\n  startOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek', weekday?: number): number;\n  /**\n   * Returns end of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   */\n  endOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek'): number;\n}\n\nfunction abstract<T = void>(): T {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\nclass DateAdapterBase implements DateAdapter {\n\n  /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */\n  static override<T extends AnyObject = AnyObject>(\n    members: Partial<Omit<DateAdapter<T>, 'options'>>\n  ) {\n    Object.assign(DateAdapterBase.prototype, members);\n  }\n\n  readonly options: AnyObject;\n\n  constructor(options: AnyObject) {\n    this.options = options || {};\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  init() {}\n\n  formats(): Record<string, string> {\n    return abstract();\n  }\n\n  parse(): number | null {\n    return abstract();\n  }\n\n  format(): string {\n    return abstract();\n  }\n\n  add(): number {\n    return abstract();\n  }\n\n  diff(): number {\n    return abstract();\n  }\n\n  startOf(): number {\n    return abstract();\n  }\n\n  endOf(): number {\n    return abstract();\n  }\n}\n\nexport default {\n  _date: DateAdapterBase\n};\n","import {_lookupByKey, _rlookupByKey} from '../helpers/helpers.collection.js';\nimport {getRelativePosition} from '../helpers/helpers.dom.js';\nimport {_angleBetween, getAngleFromPoint} from '../helpers/helpers.math.js';\nimport {_isPointInArea} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef {{axis?: string, intersect?: boolean, includeInvisible?: boolean}} InteractionOptions\n * @typedef {{datasetIndex: number, index: number, element: import('./core.element.js').default}} InteractionItem\n * @typedef { import('../types/index.js').Point } Point\n */\n\n/**\n * Helper function to do binary search when possible\n * @param {object} metaset - the dataset meta\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {number} value - the value to find\n * @param {boolean} [intersect] - should the element intersect\n * @returns {{lo:number, hi:number}} indices to search data array between\n */\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {controller, data, _sorted} = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      return lookupMethod(data, axis, value);\n    } else if (controller._sharedOptions) {\n      // _sharedOptions indicates that each element has equal options -> equal proportions\n      // So we can do a ranged binary search based on the range of first element and\n      // be confident to get the full range of indices that can intersect with the value.\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {lo: start.lo, hi: end.hi};\n      }\n    }\n  }\n  // Default to all elements, when binary search can not be used.\n  return {lo: 0, hi: data.length - 1};\n}\n\n/**\n * Helper function to select candidate elements for interaction\n * @param {Chart} chart - the chart\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {function} handler - the callback to execute for each visible item\n * @param {boolean} [intersect] - consider intersecting items\n */\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {index, data} = metasets[i];\n    const {lo, hi} = binarySearch(metasets[i], axis, value, intersect);\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\n\n/**\n * Get a distance metric function for two points based on the\n * axis mode setting\n * @param {string} axis - the axis mode. x|y|xy|r\n */\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n\n  return function(pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\n\n/**\n * Helper function to get the items that intersect the event position\n * @param {Chart} chart - the chart\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n\n  const evaluationFunc = function(element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n    }\n  };\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a radial chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const {startAngle, endAngle} = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {angle} = getAngleFromPoint(element, {x: position.x, y: position.y});\n\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a cartesian chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n\n    const distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{element, datasetIndex, index}];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      // Can have multiple items at the same distance in which case we sort by size\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position considering all visible items in the chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n\n  return axis === 'r' && !intersect\n    ? getNearestRadialItems(chart, position, axis, useFinalPosition)\n    : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n\n/**\n * Helper function to get the items matching along the given X or Y axis\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis to match\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n\n  // If we want to trigger on an intersect and we don't have any items\n  // that intersect the position, return nothing\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\n\n/**\n * Contains interaction related functions\n * @namespace Chart.Interaction\n */\nexport default {\n  // Part of the public API to facilitate developers creating their own modes\n  evaluateInteractionItems,\n\n  // Helper function for different modes\n  modes: {\n    /**\n\t\t * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item\n\t\t * @function Chart.Interaction.modes.index\n\t\t * @since v2.4.0\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      // Default axis for index mode is 'x' to match old behaviour\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible)\n        : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n\n      if (!items.length) {\n        return [];\n      }\n\n      chart.getSortedVisibleDatasetMetas().forEach((meta) => {\n        const index = items[0].index;\n        const element = meta.data[index];\n\n        // don't count items that are skipped (null data)\n        if (element && !element.skip) {\n          elements.push({element, datasetIndex: meta.index, index});\n        }\n      });\n\n      return elements;\n    },\n\n    /**\n\t\t * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect is false, we find the nearest item and return the items in that dataset\n\t\t * @function Chart.Interaction.modes.dataset\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) :\n        getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (let i = 0; i < data.length; ++i) {\n          items.push({element: data[i], datasetIndex, index: i});\n        }\n      }\n\n      return items;\n    },\n\n    /**\n\t\t * Point mode returns all elements that hit test based on the event position\n\t\t * of the event\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * nearest mode returns the element closest to the point\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * x mode returns the elements that hit-test at the current x coordinate\n\t\t * @function Chart.Interaction.modes.x\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n\n    /**\n\t\t * y mode returns the elements that hit-test at the current y coordinate\n\t\t * @function Chart.Interaction.modes.y\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n  }\n};\n","import {defined, each, isObject} from '../helpers/helpers.core.js';\nimport {toPadding} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n */\n\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\n\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\n\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\n\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ?\n      v0.index - v1.index :\n      v0.weight - v1.weight;\n  });\n}\n\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({position: pos, options: {stack, stackWeight = 1}} = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && (pos + stack),\n      stackWeight\n    });\n  }\n  return layoutBoxes;\n}\n\nfunction buildStacks(layouts) {\n  const stacks = {};\n  for (const wrap of layouts) {\n    const {stack, pos, stackWeight} = wrap;\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n    const _stack = stacks[stack] || (stacks[stack] = {count: 0, placed: 0, weight: 0, size: 0});\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n  return stacks;\n}\n\n/**\n * store dimensions used instead of available chartArea in fitBoxes\n **/\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {vBoxMaxWidth, hBoxMaxHeight} = params;\n  let i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {fullSize} = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\n\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\n\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\n\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\n\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {pos, box} = layout;\n  const maxPadding = chartArea.maxPadding;\n\n  // dynamically placed boxes size is not considered\n  if (!isObject(pos)) {\n    if (layout.size) {\n      // this layout was already counted for, lets first reduce old size\n      chartArea[pos] -= layout.size;\n    }\n    const stack = stacks[layout.stack] || {size: 0, count: 1};\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n\n  // return booleans on the changes per direction\n  return layout.horizontal\n    ? {same: widthChanged, other: heightChanged}\n    : {same: heightChanged, other: widthChanged};\n}\n\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\n\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function marginForPositions(positions) {\n    const margin = {left: 0, top: 0, right: 0, bottom: 0};\n    positions.forEach((pos) => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n\n  return horizontal\n    ? marginForPositions(['left', 'right'])\n    : marginForPositions(['top', 'bottom']);\n}\n\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n\n    box.update(\n      layout.width || chartArea.w,\n      layout.height || chartArea.h,\n      getMargins(layout.horizontal, chartArea)\n    );\n    const {same, other} = updateDims(chartArea, params, layout, stacks);\n\n    // Dimensions changed and there were non full width boxes before this\n    // -> we have to refit those\n    refit |= same && refitBoxes.length;\n\n    // Chart area changed in the opposite direction\n    changed = changed || other;\n\n    if (!box.fullSize) { // fullSize boxes don't need to be re-fitted in any case\n      refitBoxes.push(layout);\n    }\n  }\n\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\n\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\n\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {x, y} = chartArea;\n\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {count: 1, placed: 0, weight: 1};\n    const weight = (layout.stackWeight / stack.weight) || 1;\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n\n  chartArea.x = x;\n  chartArea.y = y;\n}\n\n/**\n * @interface LayoutItem\n * @typedef {object} LayoutItem\n * @prop {string} position - The position of the item in the chart layout. Possible values are\n * 'left', 'top', 'right', 'bottom', and 'chartArea'\n * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area\n * @prop {boolean} fullSize - if true, and the item is horizontal, then push vertical boxes down\n * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)\n * @prop {function} update - Takes two parameters: width and height. Returns size of item\n * @prop {function} draw - Draws the element\n * @prop {function} [getPadding] -  Returns an object with padding on the edges\n * @prop {number} width - Width of item. Must be valid after update()\n * @prop {number} height - Height of item. Must be valid after update()\n * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update\n * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update\n * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update\n * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update\n */\n\n// The layout service is very self explanatory.  It's responsible for the layout within a chart.\n// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need\n// It is this service's responsibility of carrying out that layout.\nexport default {\n\n  /**\n\t * Register a box to a chart.\n\t * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.\n\t * @param {Chart} chart - the chart to use\n\t * @param {LayoutItem} item - the item to add to be laid out\n\t */\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n\n    // initialize item with default values\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    // @ts-ignore\n    item._layers = item._layers || function() {\n      return [{\n        z: 0,\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n\n    chart.boxes.push(item);\n  },\n\n  /**\n\t * Remove a layoutItem from a chart\n\t * @param {Chart} chart - the chart to remove the box from\n\t * @param {LayoutItem} layoutItem - the item to remove from the layout\n\t */\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n\n  /**\n\t * Sets (or updates) options on the given `item`.\n\t * @param {Chart} chart - the chart in which the item lives (or will be added to)\n\t * @param {LayoutItem} item - the item to configure with the given options\n\t * @param {object} options - the new item options.\n\t */\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n\n  /**\n\t * Fits boxes of the given chart into the given size by having each box measure itself\n\t * then running a fitting algorithm\n\t * @param {Chart} chart - the chart\n\t * @param {number} width - the width to fit into\n\t * @param {number} height - the height to fit into\n   * @param {number} minPadding - minimum padding required for each side of chart area\n\t */\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n\n    // Before any changes are made, notify boxes that an update is about to being\n    // This is used to clear any cached data (e.g. scale limits)\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n\n    // Essentially we now have any number of boxes on each of the 4 sides.\n    // Our canvas looks like the following.\n    // The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and\n    // B1 is the bottom axis\n    // There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays\n    // These locations are single-box locations only, when trying to register a chartArea location that is already taken,\n    // an error will be thrown.\n    //\n    // |----------------------------------------------------|\n    // |                  T1 (Full Width)                   |\n    // |----------------------------------------------------|\n    // |    |    |                 T2                  |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    | C1 |                           | C2 |    |\n    // |    |    |----|                           |----|    |\n    // |    |    |                                     |    |\n    // | L1 | L2 |           ChartArea (C0)            | R1 |\n    // |    |    |                                     |    |\n    // |    |    |----|                           |----|    |\n    // |    |    | C3 |                           | C4 |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    |                 B1                  |    |\n    // |----------------------------------------------------|\n    // |                  B2 (Full Width)                   |\n    // |----------------------------------------------------|\n    //\n\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) =>\n      wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n\n    // First fit the fullSize boxes, to reduce probability of re-fitting.\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n\n    // Then fit vertical boxes\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n\n    // Then fit horizontal boxes\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      // if the area changed, re-fit vertical boxes\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n\n    handleMaxPadding(chartArea);\n\n    // Finally place the boxes to correct coordinates\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n\n    // Move to opposite side of chart\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w,\n    };\n\n    // Finally update boxes in chartArea (radial scale for example)\n    each(boxes.chartArea, (layout) => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {left: 0, top: 0, right: 0, bottom: 0});\n    });\n  }\n};\n","\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\n/**\n * Abstract class that allows abstracting platform dependencies away from the chart.\n */\nexport default class BasePlatform {\n  /**\n\t * Called at chart construction time, returns a context2d instance implementing\n\t * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.\n\t * @param {HTMLCanvasElement} canvas - The canvas from which to acquire context (platform specific)\n\t * @param {number} [aspectRatio] - The chart options\n\t */\n  acquireContext(canvas, aspectRatio) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Called at chart destruction time, releases any resources associated to the context\n\t * previously returned by the acquireContext() method.\n\t * @param {CanvasRenderingContext2D} context - The context2d instance\n\t * @returns {boolean} true if the method succeeded, else false\n\t */\n  releaseContext(context) { // eslint-disable-line no-unused-vars\n    return false;\n  }\n\n  /**\n\t * Registers the specified listener on the given chart.\n\t * @param {Chart} chart - Chart from which to listen for event\n\t * @param {string} type - The ({@link ChartEvent}) type to listen for\n\t * @param {function} listener - Receives a notification (an object that implements\n\t * the {@link ChartEvent} interface) when an event of the specified type occurs.\n\t */\n  addEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Removes the specified listener previously registered with addEventListener.\n\t * @param {Chart} chart - Chart from which to remove the listener\n\t * @param {string} type - The ({@link ChartEvent}) type to remove\n\t * @param {function} listener - The listener function to remove from the event target.\n\t */\n  removeEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @returns {number} the current devicePixelRatio of the device this platform is connected to.\n\t */\n  getDevicePixelRatio() {\n    return 1;\n  }\n\n  /**\n\t * Returns the maximum size in pixels of given canvas element.\n\t * @param {HTMLCanvasElement} element\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @returns {boolean} true if the canvas is attached to the platform, false if not.\n\t */\n  isAttached(canvas) { // eslint-disable-line no-unused-vars\n    return true;\n  }\n\n  /**\n   * Updates config with platform specific requirements\n   * @param {import('../core/core.config.js').default} config\n   */\n  updateConfig(config) { // eslint-disable-line no-unused-vars\n    // no-op\n  }\n}\n","/**\n * Platform fallback implementation (minimal).\n * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939\n */\n\nimport BasePlatform from './platform.base.js';\n\n/**\n * Platform class for charts without access to the DOM or to many element properties\n * This platform is used by default for any chart passed an OffscreenCanvas.\n * @extends BasePlatform\n */\nexport default class BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n}\n","/**\n * Chart.Platform implementation for targeting a web browser\n */\n\nimport BasePlatform from './platform.base.js';\nimport {_getParentNode, getRelativePosition, supportsEventListenerOptions, readUsedSize, getMaximumSize} from '../helpers/helpers.dom.js';\nimport {throttled} from '../helpers/helpers.extras.js';\nimport {isNullOrUndef} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nconst EXPANDO_KEY = '$chartjs';\n\n/**\n * DOM event types -> Chart.js event types.\n * Note: only events with different types are mapped.\n * @see https://developer.mozilla.org/en-US/docs/Web/Events\n */\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\n\nconst isNullOrEmpty = value => value === null || value === '';\n/**\n * Initializes the canvas style and render size without modifying the canvas display size,\n * since responsiveness is handled by the controller.resize() method. The config is used\n * to determine the aspect ratio to apply in case no explicit height has been specified.\n * @param {HTMLCanvasElement} canvas\n * @param {number} [aspectRatio]\n */\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n\n  // NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it\n  // returns null or '' if no explicit value has been set to the canvas attribute.\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n\n  // Chart.js modifies some canvas values that we want to restore on destroy\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n\n  // Force canvas to display as block to avoid extra space caused by inline\n  // elements, which would interfere with the responsive resize process.\n  // https://github.com/chartjs/Chart.js/issues/2538\n  style.display = style.display || 'block';\n  // Include possible borders in the size\n  style.boxSizing = style.boxSizing || 'border-box';\n\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      // If no explicit render height and style height, let's apply the aspect ratio,\n      // which one can be specified by the user but also by charts as default option\n      // (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n\n  return canvas;\n}\n\n// Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.\n// https://github.com/chartjs/Chart.js/issues/4287\nconst eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;\n\nfunction addListener(node, type, listener) {\n  node.addEventListener(type, listener, eventListenerOptions);\n}\n\nfunction removeListener(chart, type, listener) {\n  chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n}\n\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {x, y} = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null,\n  };\n}\n\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\n\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\n\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\n\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\n\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\n\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      // If the container size shrank during chart resize, let's assume\n      // scrollbar appeared. So we resize again with the scrollbar visible -\n      // effectively making chart smaller and the scrollbar hidden again.\n      // Because we are inside `throttled`, and currently `ticking`, scroll\n      // events are ignored during this whole 2 resize process.\n      // If we assumed wrong and something else happened, we are resizing\n      // twice in a frame (potential performance issue)\n      listener();\n    }\n  }, window);\n\n  // @ts-ignore until https://github.com/microsoft/TypeScript/issues/37861 implemented\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    // When its container's display is set to 'none' the callback will be called with a\n    // size of (0, 0), which will cause the chart to lose its original height, so skip\n    // resizing in such case.\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n\n  return observer;\n}\n\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\n\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled((event) => {\n    // This case can occur if the chart is destroyed while waiting\n    // for the throttled function to occur. We prevent crashes by checking\n    // for a destroyed chart\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n\n  addListener(canvas, type, proxy);\n\n  return proxy;\n}\n\n/**\n * Platform class for charts that can access the DOM and global window/document properties\n * @extends BasePlatform\n */\nexport default class DomPlatform extends BasePlatform {\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [aspectRatio]\n\t * @return {CanvasRenderingContext2D|null}\n\t */\n  acquireContext(canvas, aspectRatio) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n\n    // `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the canvas is\n    // inside an iframe or when running in a protected environment. We could guess the\n    // types from their toString() value but let's keep things flexible and assume it's\n    // a sufficient condition if the canvas has a context2D which has canvas as `canvas`.\n    // https://github.com/chartjs/Chart.js/issues/3887\n    // https://github.com/chartjs/Chart.js/issues/4102\n    // https://github.com/chartjs/Chart.js/issues/4152\n    if (context && context.canvas === canvas) {\n      // Load platform resources on first chart creation, to make it possible to\n      // import the library before setting platform options.\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n\n    return null;\n  }\n\n  /**\n\t * @param {CanvasRenderingContext2D} context\n\t */\n  releaseContext(context) {\n    const canvas = context.canvas;\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach((prop) => {\n      const value = initial[prop];\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n\n    const style = initial.style || {};\n    Object.keys(style).forEach((key) => {\n      canvas.style[key] = style[key];\n    });\n\n    // The canvas render size might have been changed (and thus the state stack discarded),\n    // we can't use save() and restore() to restore the initial state. So make sure that at\n    // least the canvas context is reset to the default state by setting the canvas width.\n    // https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html\n    // eslint-disable-next-line no-self-assign\n    canvas.width = canvas.width;\n\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n\n  /**\n\t *\n\t * @param {Chart} chart\n\t * @param {string} type\n\t * @param {function} listener\n\t */\n  addEventListener(chart, type, listener) {\n    // Can have only one listener per type, so make sure previous is removed\n    this.removeEventListener(chart, type);\n\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} type\n\t */\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n\n    if (!proxy) {\n      return;\n    }\n\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t */\n  isAttached(canvas) {\n    const container = _getParentNode(canvas);\n    return !!(container && container.isConnected);\n  }\n}\n","import {_isDomSupported} from '../helpers/index.js';\nimport BasePlatform from './platform.base.js';\nimport BasicPlatform from './platform.basic.js';\nimport DomPlatform from './platform.dom.js';\n\nexport function _detectPlatform(canvas) {\n  if (!_isDomSupported() || (typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas)) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\n\nexport {BasePlatform, BasicPlatform, DomPlatform};\n","import type {AnyObject} from '../types/basic.js';\nimport type {Point} from '../types/geometric.js';\nimport type {Animation} from '../types/animation.js';\nimport {isNumber} from '../helpers/helpers.math.js';\n\nexport default class Element<T = AnyObject, O = AnyObject> {\n\n  static defaults = {};\n  static defaultRoutes = undefined;\n\n  x: number;\n  y: number;\n  active = false;\n  options: O;\n  $animations: Record<keyof T, Animation>;\n\n  tooltipPosition(useFinalPosition: boolean): Point {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y} as Point;\n  }\n\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n\n  /**\n   * Gets the current or final value of each prop. Can return extra properties (whole object).\n   * @param props - properties to get\n   * @param [final] - get the final value (animation target)\n   */\n  getProps<P extends (keyof T)[]>(props: P, final?: boolean): Pick<T, P[number]>;\n  getProps<P extends string>(props: P[], final?: boolean): Partial<Record<P, unknown>>;\n  getProps(props: string[], final?: boolean): Partial<Record<string, unknown>> {\n    const anims = this.$animations;\n    if (!final || !anims) {\n      // let's not create an object, if not needed\n      return this as Record<string, unknown>;\n    }\n    const ret: Record<string, unknown> = {};\n    props.forEach((prop) => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop as string];\n    });\n    return ret;\n  }\n}\n","import {isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\nimport {_factorize} from '../helpers/helpers.math.js';\n\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a subset of ticks to be plotted to avoid overlapping labels.\n * @param {import('./core.scale.js').default} scale\n * @param {Tick[]} ticks\n * @return {Tick[]}\n * @private\n */\nexport function autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const determinedMaxTicks = determineMaxTicks(scale);\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n\n  // If there are too many major ticks to display them all\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\n\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n  const tickLength = scale._tickSize();\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\n\n/**\n * @param {number[]} majorIndices\n * @param {Tick[]} ticks\n * @param {number} ticksLimit\n */\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n\n  // If the major ticks are evenly spaced apart, place the minor ticks\n  // so that they divide the major ticks into even chunks\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n\n  const factors = _factorize(evenMajorSpacing);\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\n\n/**\n * @param {Tick[]} ticks\n */\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number[]} majorIndices\n * @param {number} spacing\n */\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number} spacing\n * @param {number} [majorStart]\n * @param {number} [majorEnd]\n */\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n\n  next = start;\n\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\n\n\n/**\n * @param {number[]} arr\n */\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n\n  if (len < 2) {\n    return false;\n  }\n\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\n","import Element from './core.element.js';\nimport {_alignPixel, _measureText, renderText, clipArea, unclipArea} from '../helpers/helpers.canvas.js';\nimport {callback as call, each, finiteOrDefault, isArray, isFinite, isNullOrUndef, isObject, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toDegrees, toRadians, _int16Range, _limitValue, HALF_PI} from '../helpers/helpers.math.js';\nimport {_alignStartEnd, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {createContext, toFont, toPadding, _addGrace} from '../helpers/helpers.options.js';\nimport {autoSkip} from './core.scale.autoskip.js';\n\nconst reverseAlign = (align) => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit) => Math.min(maxTicksLimit || ticksLength, ticksLength);\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a new array containing numItems from arr\n * @param {any[]} arr\n * @param {number} numItems\n */\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @param {boolean} offsetGridLines\n */\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n\n    // Return undefined if the pixel is out of the range\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\n\n/**\n * @param {object} caches\n * @param {number} length\n */\nfunction garbageCollect(caches, length) {\n  each(caches, (cache) => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\n\n/**\n * @param {object} options\n */\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\n\n/**\n * @param {object} options\n */\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n\n  return (lines * font.lineHeight) + padding.height;\n}\n\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\n\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\n\nfunction titleAlign(align, position, reverse) {\n  let ret = _toLeftRightCenter(align);\n  if ((reverse && position !== 'right') || (!reverse && position === 'right')) {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\n\nfunction titleArgs(scale, offset, position, align) {\n  const {top, left, bottom, right, chart} = scale;\n  const {chartArea, scales} = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {titleX, titleY, maxWidth, rotation};\n}\n\nexport default class Scale extends Element {\n\n  // eslint-disable-next-line max-statements\n  constructor(cfg) {\n    super();\n\n    /** @type {string} */\n    this.id = cfg.id;\n    /** @type {string} */\n    this.type = cfg.type;\n    /** @type {any} */\n    this.options = undefined;\n    /** @type {CanvasRenderingContext2D} */\n    this.ctx = cfg.ctx;\n    /** @type {Chart} */\n    this.chart = cfg.chart;\n\n    // implements box\n    /** @type {number} */\n    this.top = undefined;\n    /** @type {number} */\n    this.bottom = undefined;\n    /** @type {number} */\n    this.left = undefined;\n    /** @type {number} */\n    this.right = undefined;\n    /** @type {number} */\n    this.width = undefined;\n    /** @type {number} */\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    /** @type {number} */\n    this.maxWidth = undefined;\n    /** @type {number} */\n    this.maxHeight = undefined;\n    /** @type {number} */\n    this.paddingTop = undefined;\n    /** @type {number} */\n    this.paddingBottom = undefined;\n    /** @type {number} */\n    this.paddingLeft = undefined;\n    /** @type {number} */\n    this.paddingRight = undefined;\n\n    // scale-specific properties\n    /** @type {string=} */\n    this.axis = undefined;\n    /** @type {number=} */\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    /** @type {Tick[]} */\n    this.ticks = [];\n    /** @type {object[]|null} */\n    this._gridLineItems = null;\n    /** @type {object[]|null} */\n    this._labelItems = null;\n    /** @type {object|null} */\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    /** @type {number} */\n    this._startPixel = undefined;\n    /** @type {number} */\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @param {any} options\n\t * @since 3.0\n\t */\n  init(options) {\n    this.options = options.setContext(this.getContext());\n\n    this.axis = options.axis;\n\n    // parse min/max value, so we can properly determine min/max for other scales\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n\n  /**\n\t * Parse a supported input value to internal representation.\n\t * @param {*} raw\n\t * @param {number} [index]\n\t * @since 3.0\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    return raw;\n  }\n\n  /**\n\t * @return {{min: number, max: number, minDefined: boolean, maxDefined: boolean}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getUserBounds() {\n    let {_userMin, _userMax, _suggestedMin, _suggestedMax} = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isFinite(_userMin),\n      maxDefined: isFinite(_userMax)\n    };\n  }\n\n  /**\n\t * @param {boolean} canStack\n\t * @return {{min: number, max: number}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getMinMax(canStack) {\n    // eslint-disable-next-line prefer-const\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n    let range;\n\n    if (minDefined && maxDefined) {\n      return {min, max};\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n\n    // Make sure min <= max when only min or max is defined by user and the data is outside that range\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n\n  /**\n\t * Get the padding needed for the scale\n\t * @return {{top: number, left: number, bottom: number, right: number}} the necessary padding\n\t * @private\n\t */\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n\n  /**\n\t * Returns the scale tick objects\n\t * @return {Tick[]}\n\t * @since 2.7\n\t */\n  getTicks() {\n    return this.ticks;\n  }\n\n  /**\n\t * @return {string[]}\n\t */\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n\n  /**\n   * @return {import('../types.js').LabelItem[]}\n   */\n  getLabelItems(chartArea = this.chart.chartArea) {\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n    return items;\n  }\n\n  // When a new layout is created, reset the data limits cache\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n\n  // These methods are ordered by lifecycle. Utilities then follow.\n  // Any function defined here is inherited by all scale types.\n  // Any function can be extended by the scale type\n\n  beforeUpdate() {\n    call(this.options.beforeUpdate, [this]);\n  }\n\n  /**\n\t * @param {number} maxWidth - the max width in pixels\n\t * @param {number} maxHeight - the max height in pixels\n\t * @param {{top: number, left: number, bottom: number, right: number}} margins - the space between the edge of the other scales and edge of the chart\n\t *   This space comes from two sources:\n\t *     - padding - space that's required to show the labels at the edges of the scale\n\t *     - thickness of scales or legends in another orientation\n\t */\n  update(maxWidth, maxHeight, margins) {\n    const {beginAtZero, grace, ticks: tickOpts} = this.options;\n    const sampleSize = tickOpts.sampleSize;\n\n    // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n    this.beforeUpdate();\n\n    // Absorb the master measurements\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n\n    // Dimensions\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n\n    this._maxLength = this.isHorizontal()\n      ? this.width + margins.left + margins.right\n      : this.height + margins.top + margins.bottom;\n\n    // Data min/max\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n\n    this.beforeBuildTicks();\n\n    this.ticks = this.buildTicks() || [];\n\n    // Allow modification of ticks in callback.\n    this.afterBuildTicks();\n\n    // Compute tick rotation and fit using a sampled subset of labels\n    // We generally don't need to compute the size of every single label for determining scale size\n    const samplingEnabled = sampleSize < this.ticks.length;\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n\n    // configure is called twice, once here, once from core.controller.updateLayout.\n    // Here we haven't been positioned yet, but dimensions are correct.\n    // Variables set in configure are needed for calculateLabelRotation, and\n    // it's ok that coordinates are not correct there, only dimensions matter.\n    this.configure();\n\n    // Tick Rotation\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation(); // Preconditions: number of ticks and sizes of largest labels must be calculated beforehand\n    this.afterCalculateLabelRotation();\n\n    // Auto-skip\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n\n    if (samplingEnabled) {\n      // Generate labels using all non-skipped ticks\n      this._convertTicksToLabels(this.ticks);\n    }\n\n    this.beforeFit();\n    this.fit(); // Preconditions: label rotation and label sizes must be calculated beforehand\n    this.afterFit();\n\n    // IMPORTANT: after this point, we consider that `this.ticks` will NEVER change!\n\n    this.afterUpdate();\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      // by default vertical scales are from bottom to top, so pixels are reversed\n      reversePixels = !reversePixels;\n    }\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n\n  afterUpdate() {\n    call(this.options.afterUpdate, [this]);\n  }\n\n  //\n\n  beforeSetDimensions() {\n    call(this.options.beforeSetDimensions, [this]);\n  }\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    if (this.isHorizontal()) {\n      // Reset position before calculating rotation\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n\n      // Reset position before calculating rotation\n      this.top = 0;\n      this.bottom = this.height;\n    }\n\n    // Reset padding\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n  afterSetDimensions() {\n    call(this.options.afterSetDimensions, [this]);\n  }\n\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    call(this.options[name], [this]);\n  }\n\n  // Data limits\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n  determineDataLimits() {}\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n\n  //\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n  /**\n\t * @return {object[]} the ticks\n\t */\n  buildTicks() {\n    return [];\n  }\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n\n  beforeTickToLabelConversion() {\n    call(this.options.beforeTickToLabelConversion, [this]);\n  }\n  /**\n\t * Convert ticks to label strings\n\t * @param {Tick[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = call(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n  afterTickToLabelConversion() {\n    call(this.options.afterTickToLabelConversion, [this]);\n  }\n\n  //\n\n  beforeCalculateLabelRotation() {\n    call(this.options.beforeCalculateLabelRotation, [this]);\n  }\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n\n    const labelSizes = this._getLabelSizes();\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n\n    // Estimate the width of each grid based on the canvas width, the maximum\n    // label width and the number of tick intervals\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n\n    // Allow 3 pixels x2 padding either side for label readability\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid)\n\t\t\t\t- tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(\n        Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)),\n        Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))\n      ));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n\n    this.labelRotation = labelRotation;\n  }\n  afterCalculateLabelRotation() {\n    call(this.options.afterCalculateLabelRotation, [this]);\n  }\n  afterAutoSkip() {}\n\n  //\n\n  beforeFit() {\n    call(this.options.beforeFit, [this]);\n  }\n  fit() {\n    // Reset\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n\n    const {chart, options: {ticks: tickOpts, title: titleOpts, grid: gridOpts}} = this;\n    const display = this._isVisible();\n    const isHorizontal = this.isHorizontal();\n\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight; // fill all the height\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n\n      // Don't bother fitting the ticks if we are not showing the labels\n      if (tickOpts.display && this.ticks.length) {\n        const {first, last, widest, highest} = this._getLabelSizes();\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n\n        if (isHorizontal) {\n        // A horizontal axis is more constrained by the height.\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n        // A vertical axis is more constrained by the width. Labels are the\n        // dominant factor here, so get that length first and account for padding\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n\n    this._handleMargins();\n\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n\n  _calculatePadding(first, last, sin, cos) {\n    const {ticks: {align, padding}, position} = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n\n      // Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned\n      // which means that the right padding is dominated by the font height\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n\n      // Adjust padding taking into account changes in offsets\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n\n  /**\n\t * Handle margins and padding interactions\n\t * @private\n\t */\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n\n  afterFit() {\n    call(this.options.afterFit, [this]);\n  }\n\n  // Shared Methods\n  /**\n\t * @return {boolean}\n\t */\n  isHorizontal() {\n    const {axis, position} = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n  /**\n\t * @return {boolean}\n\t */\n  isFullSize() {\n    return this.options.fullSize;\n  }\n\n  /**\n\t * @param {Tick[]} ticks\n\t * @private\n\t */\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n\n    this.generateTickLabels(ticks);\n\n    // Ticks should be skipped when callback returns null or undef, so lets remove those.\n    let i, ilen;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n\n    this.afterTickToLabelConversion();\n  }\n\n  /**\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n    }\n\n    return labelSizes;\n  }\n\n  /**\n\t * Returns {width, height, offset} objects for the first, last, widest, highest tick\n\t * labels where offset indicates the anchor point offset from the top in pixels.\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _computeLabelSizes(ticks, length, maxTicksLimit) {\n    const {ctx, _longestTextCache: caches} = this;\n    const widths = [];\n    const heights = [];\n    const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n\n    for (i = 0; i < length; i += increment) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n      // Undefined labels and arrays should not be measured\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        // if it is an array let's measure each element\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = label[j];\n          // Undefined labels and arrays should not be measured\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n    garbageCollect(caches, length);\n\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n\n    const valueAt = (idx) => ({width: widths[idx] || 0, height: heights[idx] || 0});\n\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights,\n    };\n  }\n\n  /**\n\t * Used to get the label to display in the tooltip for the given value\n\t * @param {*} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value;\n  }\n\n  /**\n\t * Returns the location of the given data point. Value can either be an index or a numerical value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {*} value\n\t * @param {number} [index]\n\t * @return {number}\n\t */\n  getPixelForValue(value, index) { // eslint-disable-line no-unused-vars\n    return NaN;\n  }\n\n  /**\n\t * Used to get the data value from a given pixel. This is the inverse of getPixelForValue\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} pixel\n\t * @return {*}\n\t */\n  getValueForPixel(pixel) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Returns the location of the tick at the given index\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} index\n\t * @return {number}\n\t */\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  /**\n\t * Utility for getting the pixel location of a percentage of scale\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} decimal\n\t * @return {number}\n\t */\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n\n  /**\n\t * Returns the pixel for the minimum chart value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @return {number}\n\t */\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n\n  /**\n\t * @return {number}\n\t */\n  getBaseValue() {\n    const {min, max} = this;\n\n    return min < 0 && max < 0 ? max :\n      min > 0 && max > 0 ? min :\n      0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index) {\n    const ticks = this.ticks || [];\n\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context ||\n\t\t\t\t(tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n    return this.$context ||\n\t\t\t(this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n\n  /**\n\t * @return {number}\n\t * @private\n\t */\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n\n    // Calculate space needed by label in axis direction.\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n\n    const labelSizes = this._getLabelSizes();\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n\n    // Calculate space needed for 1 tick in axis direction.\n    return this.isHorizontal()\n      ? h * cos > w * sin ? w / cos : h / sin\n      : h * sin < w * cos ? h / cos : w / sin;\n  }\n\n  /**\n\t * @return {boolean}\n\t * @private\n\t */\n  _isVisible() {\n    const display = this.options.display;\n\n    if (display !== 'auto') {\n      return !!display;\n    }\n\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {grid, position, border} = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\n    const axisHalfWidth = axisWidth / 2;\n    const alignBorderValue = function(pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n    for (i = 0; i < ticksLength; i += step) {\n      const context = this.getContext(i);\n      const optsAtIndex = grid.setContext(context);\n      const optsAtIndexBorder = border.setContext(context);\n\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndexBorder.dash || [];\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\n\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n\n      lineValue = getPixelForGridLine(this, i, offset);\n\n      // Skip if the pixel is out of the range\n      if (lineValue === undefined) {\n        continue;\n      }\n\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset,\n      });\n    }\n\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n\n    return items;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {position, ticks: optionTicks} = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {align, crossAlign, padding, mirror} = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = ((chartArea.top + chartArea.bottom) / 2) + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = ((chartArea.left + chartArea.right) / 2) - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n\n    const labelSizes = this._getLabelSizes();\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n\n      if (isHorizontal) {\n        x = pixel;\n\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n        if (mirror) {\n          textOffset *= -1;\n        }\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n          x += (lineHeight / 2) * Math.sin(rotation);\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n\n      let backdrop;\n\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n\n        let top = textOffset - labelPadding.top;\n        let left = 0 - labelPadding.left;\n\n        switch (textBaseline) {\n        case 'middle':\n          top -= height / 2;\n          break;\n        case 'bottom':\n          top -= height;\n          break;\n        default:\n          break;\n        }\n\n        switch (textAlign) {\n        case 'center':\n          left -= width / 2;\n          break;\n        case 'right':\n          left -= width;\n          break;\n        default:\n          break;\n        }\n\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n\n          color: optsAtIndex.backdropColor,\n        };\n      }\n\n      items.push({\n        label,\n        font,\n        textOffset,\n        options: {\n          rotation,\n          color,\n          strokeColor,\n          strokeWidth,\n          textAlign: tickTextAlign,\n          textBaseline,\n          translation: [x, y],\n          backdrop,\n        }\n      });\n    }\n\n    return items;\n  }\n\n  _getXAxisLabelAlignment() {\n    const {position, ticks} = this.options;\n    const rotation = -toRadians(this.labelRotation);\n\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n\n    let align = 'center';\n\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n\n    return align;\n  }\n\n  _getYAxisLabelAlignment(tl) {\n    const {position, ticks: {crossAlign, mirror, padding}} = this.options;\n    const labelSizes = this._getLabelSizes();\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n\n    let textAlign;\n    let x;\n\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += (widest / 2);\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n\n    return {textAlign, x};\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n\n    const chart = this.chart;\n    const position = this.options.position;\n\n    if (position === 'left' || position === 'right') {\n      return {top: 0, left: this.left, bottom: chart.height, right: this.right};\n    } if (position === 'top' || position === 'bottom') {\n      return {top: this.top, left: 0, bottom: this.bottom, right: chart.width};\n    }\n  }\n\n  /**\n   * @protected\n   */\n  drawBackground() {\n    const {ctx, options: {backgroundColor}, left, top, width, height} = this;\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n    let i, ilen;\n\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n\n        if (grid.drawOnChartArea) {\n          drawLine(\n            {x: item.x1, y: item.y1},\n            {x: item.x2, y: item.y2},\n            item\n          );\n        }\n\n        if (grid.drawTicks) {\n          drawLine(\n            {x: item.tx1, y: item.ty1},\n            {x: item.tx2, y: item.ty2},\n            {\n              color: item.tickColor,\n              width: item.tickWidth,\n              borderDash: item.tickBorderDash,\n              borderDashOffset: item.tickBorderDashOffset\n            }\n          );\n        }\n      }\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {\n    const {chart, ctx, options: {border, grid}} = this;\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = border.display ? borderOpts.width : 0;\n    if (!axisWidth) {\n      return;\n    }\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n    ctx.save();\n    ctx.lineWidth = borderOpts.width;\n    ctx.strokeStyle = borderOpts.color;\n\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n\n    if (!optionTicks.display) {\n      return;\n    }\n\n    const ctx = this.ctx;\n\n    const area = this._computeLabelArea();\n    if (area) {\n      clipArea(ctx, area);\n    }\n\n    const items = this.getLabelItems(chartArea);\n    for (const item of items) {\n      const renderTextOptions = item.options;\n      const tickFont = item.font;\n      const label = item.label;\n      const y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n    }\n\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const {ctx, options: {position, title, reverse}} = this;\n\n    if (!title.display) {\n      return;\n    }\n\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n\n    const {titleX, titleY, maxWidth, rotation} = titleArgs(this, offset, position, align);\n\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n\n  /**\n\t * @return {object[]}\n\t * @private\n\t */\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\n\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      // backward compatibility: draw has been overridden by custom scale\n      return [{\n        z: tz,\n        draw: (chartArea) => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n\n    return [{\n      z: gz,\n      draw: (chartArea) => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: bz,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: (chartArea) => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n\n  /**\n\t * Returns visible dataset metas that are attached to this scale\n\t * @param {string} [type] - if specified, also filter by dataset type\n\t * @return {object[]}\n\t */\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n\n  /**\n\t * @param {number} index\n\t * @return {object}\n\t * @protected\n \t */\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n\n  /**\n   * @protected\n   */\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n}\n","import {merge} from '../helpers/index.js';\nimport defaults, {overrides} from './core.defaults.js';\n\n/**\n * @typedef {{id: string, defaults: any, overrides?: any, defaultRoutes: any}} IChartComponent\n */\n\nexport default class TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t * @returns {string} The scope where items defaults were registered to.\n\t */\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n\n    if (isIChartComponent(proto)) {\n      // Make sure the parent is registered and note the scope where its defaults are.\n      parentScope = this.register(proto);\n    }\n\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n\n    if (id in items) {\n      // already registered\n      return scope;\n    }\n\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n\n    return scope;\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object?}\n\t */\n  get(id) {\n    return this.items[id];\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t */\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n\n    if (id in items) {\n      delete items[id];\n    }\n\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n}\n\nfunction registerDefaults(item, scope, parentScope) {\n  // Inherit the parent's defaults and keep existing defaults\n  const itemDefaults = merge(Object.create(null), [\n    parentScope ? defaults.get(parentScope) : {},\n    defaults.get(scope),\n    item.defaults\n  ]);\n\n  defaults.set(scope, itemDefaults);\n\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\n\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\n\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\n","import DatasetController from './core.datasetController.js';\nimport Element from './core.element.js';\nimport Scale from './core.scale.js';\nimport TypedRegistry from './core.typedRegistry.js';\nimport {each, callback as call, _capitalize} from '../helpers/helpers.core.js';\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is exported for typedoc\n */\nexport class Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    // Order is important, Scale has Element in prototype chain,\n    // so Scales must be before Elements. Plugins are a fallback, so not listed here.\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  add(...args) {\n    this._each('register', args);\n  }\n\n  remove(...args) {\n    this._each('unregister', args);\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  addControllers(...args) {\n    this._each('register', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  addElements(...args) {\n    this._each('register', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  addPlugins(...args) {\n    this._each('register', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  addScales(...args) {\n    this._each('register', args, this.scales);\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof DatasetController}\n\t */\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Element}\n\t */\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object}\n\t */\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Scale}\n\t */\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  removeControllers(...args) {\n    this._each('unregister', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  removeElements(...args) {\n    this._each('unregister', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  removePlugins(...args) {\n    this._each('unregister', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  removeScales(...args) {\n    this._each('unregister', args, this.scales);\n  }\n\n  /**\n\t * @private\n\t */\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n      if (typedRegistry || reg.isForType(arg) || (reg === this.plugins && arg.id)) {\n        this._exec(method, reg, arg);\n      } else {\n        // Handle loopable args\n        // Use case:\n        //  import * as plugins from './plugins.js';\n        //  Chart.register(plugins);\n        each(arg, item => {\n          // If there are mixed types in the loopable, make sure those are\n          // registered in correct registry\n          // Use case: (treemap exporting controller, elements etc)\n          //  import * as treemap from 'chartjs-chart-treemap.js';\n          //  Chart.register(treemap);\n\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n    call(component['before' + camelMethod], [], component); // beforeRegister / beforeUnregister\n    registry[method](component);\n    call(component['after' + camelMethod], [], component); // afterRegister / afterUnregister\n  }\n\n  /**\n\t * @private\n\t */\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n    // plugins is the fallback registry\n    return this.plugins;\n  }\n\n  /**\n\t * @private\n\t */\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n    return item;\n  }\n\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Registry();\n","import registry from './core.registry.js';\nimport {callback as callCallback, isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../plugins/plugin.tooltip.js').default } Tooltip\n */\n\n/**\n * @callback filterCallback\n * @param {{plugin: object, options: object}} value\n * @param {number} [index]\n * @param {array} [array]\n * @param {object} [thisArg]\n * @return {boolean}\n */\n\n\nexport default class PluginService {\n  constructor() {\n    this._init = [];\n  }\n\n  /**\n\t * Calls enabled plugins for `chart` on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {Chart} chart - The chart instance for which plugins should be called.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {object} [args] - Extra arguments to apply to the hook call.\n   * @param {filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n      this._notify(this._init, chart, 'install');\n    }\n\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n    const result = this._notify(descriptors, chart, hook, args);\n\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n      this._notify(this._init, chart, 'uninstall');\n    }\n    return result;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n      if (callCallback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  invalidate() {\n    // When plugins are registered, there is the possibility of a double\n    // invalidate situation. In this case, we only want to invalidate once.\n    // If we invalidate multiple times, the `_oldCache` is lost and all of the\n    // plugins are restarted without being correctly stopped.\n    // See https://github.com/chartjs/Chart.js/issues/8147\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n\n    const descriptors = this._cache = this._createDescriptors(chart);\n\n    this._notifyStateChanges(chart);\n\n    return descriptors;\n  }\n\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    // options === false => all plugins are disabled\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n}\n\n/**\n * @param {import('./core.config.js').default} config\n */\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n\n  const local = config.plugins || [];\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n\n  return {plugins, localIds};\n}\n\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\n\nfunction createDescriptors(chart, {plugins, localIds}, options, all) {\n  const result = [];\n  const context = chart.getContext();\n\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n    if (opts === null) {\n      continue;\n    }\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {plugin, local: localIds[id]}, opts, context)\n    });\n  }\n\n  return result;\n}\n\nfunction pluginOpts(config, {plugin, local}, opts, context) {\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n  if (local && plugin.defaults) {\n    // make sure plugin defaults are in scopes for local (not registered) plugins\n    scopes.push(plugin.defaults);\n  }\n  return config.createResolver(scopes, context, [''], {\n    // These are just defaults that plugins can override\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\n","import defaults, {overrides, descriptors} from './core.defaults.js';\nimport {mergeIf, resolveObjectKey, isArray, isFunction, valueOrDefault, isObject} from '../helpers/helpers.core.js';\nimport {_attachContext, _createResolver, _descriptors} from '../helpers/helpers.config.js';\n\nexport function getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\n\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\n\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\n\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\n\nexport function determineAxis(id, scaleOptions) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n\n  id = scaleOptions.axis\n    || axisFromPosition(scaleOptions.position)\n    || id.length > 1 && determineAxis(id[0].toLowerCase(), scaleOptions);\n\n  if (id) {\n    return id;\n  }\n\n  throw new Error(`Cannot determine type of '${name}' axis. Please provide 'axis' or 'position' option.`);\n}\n\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {scales: {}};\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const scales = Object.create(null);\n\n  // First figure out first scale id's per axis.\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n    const axis = determineAxis(id, scaleConf);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{axis}, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n\n  // Then merge dataset defaults to scale configs\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{axis}, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n\n  // apply scale defaults, if not overridden by dataset defaults\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n\n  return scales;\n}\n\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\n\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\n\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n\n  initOptions(config);\n\n  return config;\n}\n\nconst keyCache = new Map();\nconst keysCached = new Set();\n\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\n\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\n\nexport default class Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n\n  get platform() {\n    return this._config.platform;\n  }\n\n  get type() {\n    return this._config.type;\n  }\n\n  set type(type) {\n    this._config.type = type;\n  }\n\n  get data() {\n    return this._config.data;\n  }\n\n  set data(data) {\n    this._config.data = initData(data);\n  }\n\n  get options() {\n    return this._config.options;\n  }\n\n  set options(options) {\n    this._config.options = options;\n  }\n\n  get plugins() {\n    return this._config.plugins;\n  }\n\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n\n  clearCache() {\n    this._scopeCache.clear();\n    this._resolverCache.clear();\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @return {string[][]}\n   */\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType,\n      () => [[\n        `datasets.${datasetType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset animation options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @param {string} transition\n   * @return {string[][]}\n   */\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`,\n      () => [\n        [\n          `datasets.${datasetType}.transitions.${transition}`,\n          `transitions.${transition}`,\n        ],\n        // The following are used for looking up the `animations` and `animation` keys\n        [\n          `datasets.${datasetType}`,\n          ''\n        ]\n      ]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving element options that belong\n   * to an dataset. These keys do not include the dataset itself, because it\n   * is not under options.\n   * @param {string} datasetType\n   * @param {string} elementType\n   * @return {string[][]}\n   */\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`,\n      () => [[\n        `datasets.${datasetType}.elements.${elementType}`,\n        `datasets.${datasetType}`,\n        `elements.${elementType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving plugin options.\n   * @param {{id: string, additionalOptionScopes?: string[]}} plugin\n   * @return {string[][]}\n   */\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`,\n      () => [[\n        `plugins.${id}`,\n        ...plugin.additionalOptionScopes || [],\n      ]]);\n  }\n\n  /**\n   * @private\n   */\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n    let cache = _scopeCache.get(mainScope);\n    if (!cache || resetCache) {\n      cache = new Map();\n      _scopeCache.set(mainScope, cache);\n    }\n    return cache;\n  }\n\n  /**\n   * Resolves the objects from options and defaults for option value resolution.\n   * @param {object} mainScope - The main scope object for options\n   * @param {string[][]} keyLists - The arrays of keys in resolution order\n   * @param {boolean} [resetCache] - reset the cache for this mainScope\n   */\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {options, type} = this;\n    const cache = this._cachedScopes(mainScope, resetCache);\n    const cached = cache.get(keyLists);\n    if (cached) {\n      return cached;\n    }\n\n    const scopes = new Set();\n\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n\n    const array = Array.from(scopes);\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n    return array;\n  }\n\n  /**\n   * Returns the option scopes for resolving chart options\n   * @return {object[]}\n   */\n  chartOptionScopes() {\n    const {options, type} = this;\n\n    return [\n      options,\n      overrides[type] || {},\n      defaults.datasets[type] || {}, // https://github.com/chartjs/Chart.js/issues/8531\n      {type},\n      defaults,\n      descriptors\n    ];\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {string[]} names\n   * @param {function|object} context\n   * @param {string[]} [prefixes]\n   * @return {object}\n   */\n  resolveNamedOptions(scopes, names, context, prefixes = ['']) {\n    const result = {$shared: true};\n    const {resolver, subPrefixes} = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      // subResolver is passed to scriptable options. It should not resolve to hover options.\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n    return result;\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {object} [context]\n   * @param {string[]} [prefixes]\n   * @param {{scriptable: boolean, indexable: boolean, allKeys?: boolean}} [descriptorDefaults]\n   */\n  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {\n    const {resolver} = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context)\n      ? _attachContext(resolver, context, undefined, descriptorDefaults)\n      : resolver;\n  }\n}\n\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\n\nconst hasFunction = value => isObject(value)\n  && Object.getOwnPropertyNames(value).reduce((acc, key) => acc || isFunction(value[key]), false);\n\nfunction needContext(proxy, names) {\n  const {isScriptable, isIndexable} = _descriptors(proxy);\n\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n    if ((scriptable && (isFunction(value) || hasFunction(value)))\n      || (indexable && isArray(value))) {\n      return true;\n    }\n  }\n  return false;\n}\n","import animator from './core.animator.js';\nimport defaults, {overrides} from './core.defaults.js';\nimport Interaction from './core.interaction.js';\nimport layouts from './core.layouts.js';\nimport {_detectPlatform} from '../platform/index.js';\nimport PluginService from './core.plugins.js';\nimport registry from './core.registry.js';\nimport Config, {determineAxis, getIndexAxis} from './core.config.js';\nimport {retinaScale, _isDomSupported} from '../helpers/helpers.dom.js';\nimport {each, callback as callCallback, uid, valueOrDefault, _elementsEqual, isNullOrUndef, setsEqual, defined, isFunction, _isClickEvent} from '../helpers/helpers.core.js';\nimport {clearCanvas, clipArea, createContext, unclipArea, _isPointInArea} from '../helpers/index.js';\n// @ts-ignore\nimport {version} from '../../package.json';\nimport {debounce} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../types/index.js').Point } Point\n */\n\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || (KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x');\n}\n\nfunction compare2Level(l1, l2) {\n  return function(a, b) {\n    return a[l1] === b[l1]\n      ? a[l2] - b[l2]\n      : a[l1] - b[l1];\n  };\n}\n\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n\n  chart.notifyPlugins('afterRender');\n  callCallback(animationOptions && animationOptions.onComplete, [context], chart);\n}\n\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callCallback(animationOptions && animationOptions.onProgress, [context], chart);\n}\n\n/**\n * Chart.js can take a string id of a canvas element, a 2d context, or a canvas element itself.\n * Attempt to unwrap the item passed into the chart constructor so that it is a canvas element (if possible).\n */\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    // Support for array based queries (such as jQuery)\n    item = item[0];\n  }\n\n  if (item && item.canvas) {\n    // Support for any object associated to a canvas (including a context2d)\n    item = item.canvas;\n  }\n  return item;\n}\n\nconst instances = {};\nconst getChart = (key) => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter((c) => c.canvas === canvas).pop();\n};\n\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const intKey = +key;\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\n\n/**\n * @param {ChartEvent} e\n * @param {ChartEvent|null} lastEvent\n * @param {boolean} inChartArea\n * @param {boolean} isClick\n * @returns {ChartEvent|null}\n */\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\n\nfunction getDatasetArea(meta) {\n  const {xScale, yScale} = meta;\n  if (xScale && yScale) {\n    return {\n      left: xScale.left,\n      right: xScale.right,\n      top: yScale.top,\n      bottom: yScale.bottom\n    };\n  }\n}\n\nclass Chart {\n\n  static defaults = defaults;\n  static instances = instances;\n  static overrides = overrides;\n  static registry = registry;\n  static version = version;\n  static getChart = getChart;\n\n  static register(...items) {\n    registry.add(...items);\n    invalidatePlugins();\n  }\n\n  static unregister(...items) {\n    registry.remove(...items);\n    invalidatePlugins();\n  }\n\n  // eslint-disable-next-line max-statements\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error(\n        'Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' +\n\t\t\t\t' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.'\n      );\n    }\n\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    // Store the previously used aspect ratio to determine if a resize\n    // is needed during updates. Do this after _options is set since\n    // aspectRatio uses a getter\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    /** @type {?{attach?: function, detach?: function, resize?: function}} */\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n\n    // Add the chart instance to the global namespace\n    instances[this.id] = this;\n\n    if (!context || !canvas) {\n      // The given item is not a compatible context2d element, let's return before finalizing\n      // the chart initialization but after setting basic chart / controller properties that\n      // can help to figure out that the chart is not valid (e.g chart.canvas !== null);\n      // https://github.com/chartjs/Chart.js/issues/2807\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n\n  get aspectRatio() {\n    const {options: {aspectRatio, maintainAspectRatio}, width, height, _aspectRatio} = this;\n    if (!isNullOrUndef(aspectRatio)) {\n      // If aspectRatio is defined in options, use that.\n      return aspectRatio;\n    }\n\n    if (maintainAspectRatio && _aspectRatio) {\n      // If maintainAspectRatio is truthly and we had previously determined _aspectRatio, use that\n      return _aspectRatio;\n    }\n\n    // Calculate\n    return height ? width / height : null;\n  }\n\n  get data() {\n    return this.config.data;\n  }\n\n  set data(data) {\n    this.config.data = data;\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  set options(options) {\n    this.config.options = options;\n  }\n\n  get registry() {\n    return registry;\n  }\n\n  /**\n\t * @private\n\t */\n  _initialize() {\n    // Before init plugin notification\n    this.notifyPlugins('beforeInit');\n\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n\n    this.bindEvents();\n\n    // After init plugin notification\n    this.notifyPlugins('afterInit');\n\n    return this;\n  }\n\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n\n  /**\n\t * Resize the chart to its container or to explicit dimensions.\n\t * @param {number} [width]\n\t * @param {number} [height]\n\t */\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {width, height};\n    }\n  }\n\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n\n    this.notifyPlugins('resize', {size: newSize});\n\n    callCallback(options.onResize, [this, newSize], this);\n\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        // The resize update is delayed, only draw without updating.\n        this.render();\n      }\n    }\n  }\n\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n\n  /**\n\t * Builds a map of scale ID to scale object for future lookup.\n\t */\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n\n    if (scaleOpts) {\n      items = items.concat(\n        Object.keys(scaleOpts).map((id) => {\n          const scaleOptions = scaleOpts[id];\n          const axis = determineAxis(id, scaleOptions);\n          const isRadial = axis === 'r';\n          const isHorizontal = axis === 'x';\n          return {\n            options: scaleOptions,\n            dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n            dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n          };\n        })\n      );\n    }\n\n    each(items, (item) => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n\n      updated[id] = true;\n      let scale = null;\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n\n      scale.init(scaleOptions, options);\n    });\n    // clear up discarded scales\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n\n    each(scales, (scale) => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n\n    metasets.sort((a, b) => a.index - b.index);\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n      metasets.splice(numData, numMeta - numData);\n    }\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n\n  /**\n\t * @private\n\t */\n  _removeUnreferencedMetasets() {\n    const {_metasets: metasets, data: {datasets}} = this;\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n\n    this._removeUnreferencedMetasets();\n\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n        meta = this.getDatasetMeta(i);\n      }\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {datasetElementType, dataElementType} = defaults.datasets[type];\n        Object.assign(ControllerClass, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n\n    this._updateMetasets();\n    return newControllers;\n  }\n\n  /**\n\t * Reset the elements of all datasets\n\t * @private\n\t */\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n\n  /**\n\t* Resets the chart back to its state before the initial animation\n\t*/\n  reset() {\n    this._resetElements();\n    this.notifyPlugins('reset');\n  }\n\n  update(mode) {\n    const config = this.config;\n\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n\n    this._updateScales();\n    this._checkEventBindings();\n    this._updateHiddenIndices();\n\n    // plugins options references might have change, let's invalidate the cache\n    // https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\n    this._plugins.invalidate();\n\n    if (this.notifyPlugins('beforeUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    // Make sure dataset controllers are updated and new controllers are reset\n    const newControllers = this.buildOrUpdateControllers();\n\n    this.notifyPlugins('beforeElementsUpdate');\n\n    // Make sure all dataset controllers have correct meta data counts\n    let minPadding = 0;\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {controller} = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      // New controllers will be reset after the layout pass, so we only want to modify\n      // elements added to new datasets\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n    this._updateLayout(minPadding);\n\n    // Only reset the controllers if we have animations\n    if (!animsDisabled) {\n      // Can only reset the new controllers after the scales have been updated\n      // Reset is done to get the starting point for the initial animation\n      each(newControllers, (controller) => {\n        controller.reset();\n      });\n    }\n\n    this._updateDatasets(mode);\n\n    // Do this before render so that any plugins that need final scale updates can use it\n    this.notifyPlugins('afterUpdate', {mode});\n\n    this._layers.sort(compare2Level('z', '_idx'));\n\n    // Replay last event from before update, or set hover styles on active elements\n    const {_active, _lastEvent} = this;\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  _updateScales() {\n    each(this.scales, (scale) => {\n      layouts.removeBox(this, scale);\n    });\n\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n\n  /**\n   * @private\n   */\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      // The configured events have changed. Rebind.\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _updateHiddenIndices() {\n    const {_hiddenIndices} = this;\n    const changes = this._getUniformDataChanges() || [];\n    for (const {method, start, count} of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n    const makeSet = (idx) => new Set(\n      _dataChanges\n        .filter(c => c[0] === idx)\n        .map((c, i) => i + ',' + c.splice(1).join(','))\n    );\n\n    const changeSet = makeSet(0);\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n    return Array.from(changeSet)\n      .map(c => c.split(','))\n      .map(a => ({method: a[1], start: +a[2], count: +a[3]}));\n  }\n\n  /**\n\t * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`\n\t * hook, in which case, plugins will not be called on `afterLayout`.\n\t * @private\n\t */\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {cancelable: true}) === false) {\n      return;\n    }\n\n    layouts.update(this, this.width, this.height, minPadding);\n\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n\n    this._layers = [];\n    each(this.boxes, (box) => {\n      if (noArea && box.position === 'chartArea') {\n        // Skip drawing and configuring chartArea boxes when chartArea is zero or negative\n        return;\n      }\n\n      // configure is called twice, once in core.scale.update and once here.\n      // Here the boxes are fully updated and at their final positions.\n      if (box.configure) {\n        box.configure();\n      }\n      this._layers.push(...box._layers());\n    }, this);\n\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n\n    this.notifyPlugins('afterLayout');\n  }\n\n  /**\n\t * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.\n\t * @private\n\t */\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._updateDataset(i, isFunction(mode) ? mode({datasetIndex: i}) : mode);\n    }\n\n    this.notifyPlugins('afterDatasetsUpdate', {mode});\n  }\n\n  /**\n\t * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetUpdate`.\n\t * @private\n\t */\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {meta, index, mode, cancelable: true};\n\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n\n    meta.controller._update(mode);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n\n  render() {\n    if (this.notifyPlugins('beforeRender', {cancelable: true}) === false) {\n      return;\n    }\n\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({chart: this});\n    }\n  }\n\n  draw() {\n    let i;\n    if (this._resizeBeforeDraw) {\n      const {width, height} = this._resizeBeforeDraw;\n      this._resize(width, height);\n      this._resizeBeforeDraw = null;\n    }\n    this.clear();\n\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n\n    if (this.notifyPlugins('beforeDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    // Because of plugin hooks (before/afterDatasetsDraw), datasets can't\n    // currently be part of layers. Instead, we draw\n    // layers <= 0 before(default, backward compat), and the rest after\n    const layers = this._layers;\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this._drawDatasets();\n\n    // Rest of layers\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this.notifyPlugins('afterDraw');\n  }\n\n  /**\n\t * @private\n\t */\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n\t * Gets the visible dataset metas in drawing order\n\t * @return {object[]}\n\t */\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n\n  /**\n\t * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetsDraw`.\n\t * @private\n\t */\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    const metasets = this.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n\n  /**\n\t * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetDraw`.\n\t * @private\n\t */\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const clip = meta._clip;\n    const useClip = !clip.disabled;\n    const area = getDatasetArea(meta) || this.chartArea;\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n\n    if (useClip) {\n      clipArea(ctx, {\n        left: clip.left === false ? 0 : area.left - clip.left,\n        right: clip.right === false ? this.width : area.right + clip.right,\n        top: clip.top === false ? 0 : area.top - clip.top,\n        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n      });\n    }\n\n    meta.controller.draw();\n\n    if (useClip) {\n      unclipArea(ctx);\n    }\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n\n  /**\n   * Checks whether the given point is in the chart area.\n   * @param {Point} point - in relative coordinates (see, e.g., getRelativePosition)\n   * @returns {boolean}\n   */\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n\n    return [];\n  }\n\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\t\t\t// See isDatasetVisible() comment\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n\n    return meta;\n  }\n\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {chart: this, type: 'chart'}));\n  }\n\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    if (!dataset) {\n      return false;\n    }\n\n    const meta = this.getDatasetMeta(datasetIndex);\n\n    // meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,\n    // the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n\n  /**\n\t * @private\n\t */\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      // Animate visible state, so hide animation can be seen. This could be handled better if update / updateDataset returned a Promise.\n      anims.update(meta, {visible});\n      this.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n\n  /**\n\t * @private\n\t */\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n    delete this._metasets[datasetIndex];\n  }\n\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {canvas, ctx} = this;\n\n    this._stop();\n    this.config.clearCache();\n\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n\n    delete instances[this.id];\n\n    this.notifyPlugins('afterDestroy');\n  }\n\n  toBase64Image(...args) {\n    return this.canvas.toDataURL(...args);\n  }\n\n  /**\n\t * @private\n\t */\n  bindEvents() {\n    this.bindUserEvents();\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n\n  /**\n   * @private\n   */\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n      this._eventHandler(e);\n    };\n\n    each(this.options.events, (type) => _add(type, listener));\n  }\n\n  /**\n   * @private\n   */\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n\n    let detached; // eslint-disable-line prefer-const\n    const attached = () => {\n      _remove('attach', attached);\n\n      this.attached = true;\n      this.resize();\n\n      _add('resize', listener);\n      _add('detach', detached);\n    };\n\n    detached = () => {\n      this.attached = false;\n\n      _remove('resize', listener);\n\n      // Stop animating and remove metasets, so when re-attached, the animations start from beginning.\n      this._stop();\n      this._resize(0, 0);\n\n      _add('attach', attached);\n    };\n\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n\n  /**\n\t * Get active (hovered) elements\n\t * @returns array\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active (hovered) elements\n\t * @param {array} activeElements New active data points\n\t */\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n\n    if (changed) {\n      this._active = active;\n      // Make sure we don't use the previous mouse event to override the active elements in update.\n      this._lastEvent = null;\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n\n  /**\n\t * Calls enabled plugins on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {Object} [args] - Extra arguments to apply to the hook call.\n   * @param {import('./core.plugins.js').filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n\n  /**\n   * Check if a plugin with the specific ID is registered and enabled\n   * @param {string} pluginId - The ID of the plugin of which to check if it is enabled\n   * @returns {boolean}\n   */\n  isPluginEnabled(pluginId) {\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n    const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e.native.type);\n\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n\n    if (changed || args.changed) {\n      this.render();\n    }\n\n    return this;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e the event to handle\n\t * @param {boolean} [replay] - true if the event was replayed by `update`\n   * @param {boolean} [inChartArea] - true if the event is inside chartArea\n\t * @return {boolean} true if the chart needs to re-render\n\t * @private\n\t */\n  _handleEvent(e, replay, inChartArea) {\n    const {_active: lastActive = [], options} = this;\n\n    // If the event is replayed from `update`, we should evaluate with the final positions.\n    //\n    // The `replay`:\n    // It's the last event (excluding click) that has occurred before `update`.\n    // So mouse has not moved. It's also over the chart, because there is a `replay`.\n    //\n    // The why:\n    // If animations are active, the elements haven't moved yet compared to state before update.\n    // But if they will, we are activating the elements that would be active, if this check\n    // was done after the animations have completed. => \"final positions\".\n    // If there is no animations, the \"final\" and \"current\" positions are equal.\n    // This is done so we do not have to evaluate the active elements each animation frame\n    // - it would be expensive.\n    const useFinalPosition = replay;\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n    const isClick = _isClickEvent(e);\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n\n    if (inChartArea) {\n      // Set _lastEvent to null while we are processing the event handlers.\n      // This prevents recursion if the handler calls chart.update()\n      this._lastEvent = null;\n\n      // Invoke onHover hook\n      callCallback(options.onHover, [e, active, this], this);\n\n      if (isClick) {\n        callCallback(options.onClick, [e, active, this], this);\n      }\n    }\n\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed || replay) {\n      this._active = active;\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n\n    this._lastEvent = lastEvent;\n\n    return changed;\n  }\n\n  /**\n   * @param {ChartEvent} e - The event\n   * @param {import('../types/index.js').ActiveElement[]} lastActive - Previously active elements\n   * @param {boolean} inChartArea - Is the envent inside chartArea\n   * @param {boolean} useFinalPosition - Should the evaluation be done with current or final (after animation) element positions\n   * @returns {import('../types/index.js').ActiveElement[]} - The active elements\n   * @pravate\n   */\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      return lastActive;\n    }\n\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n}\n\n// @ts-ignore\nfunction invalidatePlugins() {\n  return each(Chart.instances, (chart) => chart._plugins.invalidate());\n}\n\nexport default Chart;\n","import Element from '../core/core.element.js';\nimport {_angleBetween, getAngleFromPoint, TAU, HALF_PI, valueOrDefault} from '../helpers/index.js';\nimport {PI, _isBetween, _limitValue} from '../helpers/helpers.math.js';\nimport {_readValueToProps} from '../helpers/helpers.options.js';\nimport type {ArcOptions, Point} from '../types/index.js';\n\n\nfunction clipArc(ctx: CanvasRenderingContext2D, element: ArcElement, endAngle: number) {\n  const {startAngle, pixelMargin, x, y, outerRadius, innerRadius} = element;\n  let angleMargin = pixelMargin / outerRadius;\n\n  // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n\n/**\n * Parse border radius from the provided options\n */\nfunction parseBorderRadius(arc: ArcElement, innerRadius: number, outerRadius: number, angleDelta: number) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n\n  // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n  const computeOuterLimit = (val) => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit),\n  };\n}\n\n/**\n * Convert (r, 𝜃) to (x, y)\n */\nfunction rThetaToXY(r: number, theta: number, x: number, y: number) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta),\n  };\n}\n\n\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */\nfunction pathArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  end: number,\n  circular: boolean,\n) {\n  const {x, y, startAngle: start, pixelMargin, innerRadius: innerR} = element;\n\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n\n  let spacingOffset = 0;\n  const alpha = end - start;\n\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? (alpha * avNogSpacingRadius) / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {outerStart, outerEnd, innerStart, innerEnd} = parseBorderRadius(element, innerRadius, outerRadius, endAngle - startAngle);\n\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n\n  ctx.beginPath();\n\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n\n    // The corner segment from point 2 to point 3\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    }\n\n    // The line from point 3 to point 4\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n\n    // The corner segment from point 4 to point 5\n    if (innerEnd > 0) {\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n\n    // The inner arc from point 5 to point b to point 6\n    const innerMidAdjustedAngle = ((endAngle - (innerEnd / innerRadius)) + (startAngle + (innerStart / innerRadius))) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - (innerEnd / innerRadius), innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + (innerStart / innerRadius), true);\n\n    // The corner segment from point 6 to point 7\n    if (innerStart > 0) {\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    }\n\n    // The line from point 7 to point 8\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n\n    // The corner segment from point 8 to point 1\n    if (outerStart > 0) {\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n\n  ctx.closePath();\n}\n\nfunction drawArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference} = element;\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\n\nfunction drawBorder(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference, options} = element;\n  const {borderWidth, borderJoinStyle} = options;\n  const inner = options.borderAlign === 'inner';\n\n  if (!borderWidth) {\n    return;\n  }\n\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\n\nexport interface ArcProps extends Point {\n  startAngle: number;\n  endAngle: number;\n  innerRadius: number;\n  outerRadius: number;\n  circumference: number;\n}\n\nexport default class ArcElement extends Element<ArcProps, ArcOptions> {\n\n  static id = 'arc';\n\n  static defaults = {\n    borderAlign: 'center',\n    borderColor: '#fff',\n    borderJoinStyle: undefined,\n    borderRadius: 0,\n    borderWidth: 2,\n    offset: 0,\n    spacing: 0,\n    angle: undefined,\n    circular: true,\n  };\n\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor'\n  };\n\n  circumference: number;\n  endAngle: number;\n  fullCircles: number;\n  innerRadius: number;\n  outerRadius: number;\n  pixelMargin: number;\n  startAngle: number;\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(chartX: number, chartY: number, useFinalPosition: boolean) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {angle, distance} = getAngleFromPoint(point, {x: chartX, y: chartY});\n    const {startAngle, endAngle, innerRadius, outerRadius, circumference} = this.getProps([\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius',\n      'circumference'\n    ], useFinalPosition);\n    const rAdjust = this.options.spacing / 2;\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n    const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n\n    return (betweenAngles && withinRadius);\n  }\n\n  getCenterPoint(useFinalPosition: boolean) {\n    const {x, y, startAngle, endAngle, innerRadius, outerRadius} = this.getProps([\n      'x',\n      'y',\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius'\n    ], useFinalPosition);\n    const {offset, spacing} = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n\n  tooltipPosition(useFinalPosition: boolean) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    const {options, circumference} = this;\n    const offset = (options.offset || 0) / 4;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = (options.borderAlign === 'inner') ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n\n    ctx.save();\n\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n    const radiusOffset = offset * fix;\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n\n    drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, circular);\n\n    ctx.restore();\n  }\n}\n","import Element from '../core/core.element.js';\nimport {_bezierInterpolation, _pointInLine, _steppedInterpolation} from '../helpers/helpers.interpolation.js';\nimport {_computeSegments, _boundSegments} from '../helpers/helpers.segment.js';\nimport {_steppedLineTo, _bezierCurveTo} from '../helpers/helpers.canvas.js';\nimport {_updateBezierControlPoints} from '../helpers/helpers.curve.js';\nimport {valueOrDefault} from '../helpers/index.js';\n\n/**\n * @typedef { import('./element.point.js').default } PointElement\n */\n\nfunction setStyle(ctx, options, style = options) {\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\n\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\n\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n\n  return lineTo;\n}\n\nfunction pathVars(points, segment, params = {}) {\n  const count = points.length;\n  const {start: paramsStart = 0, end: paramsEnd = count - 1} = params;\n  const {start: segmentStart, end: segmentEnd} = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction pathSegment(ctx, line, segment, params) {\n  const {points, options} = line;\n  const {count, start, loop, ilen} = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  // eslint-disable-next-line prefer-const\n  let {move = true, reverse} = params || {};\n  let i, point, prev;\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n\n    prev = point;\n  }\n\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n\n  return !!loop;\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {count, start, ilen} = pathVars(points, segment, params);\n  const {move = true, reverse} = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n\n  const pointIndex = (index) => (start + (reverse ? ilen - index : index)) % count;\n  const drawX = () => {\n    if (minY !== maxY) {\n      // Draw line to maxY and minY, using the average x-coordinate\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      // Line to y-value of last point in group. So the line continues\n      // from correct position. Not using move, to have solid path.\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    }\n\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0; // truncated x-coordinate\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      // Draw line to next x-position, using the first (or only)\n      // y-value in that group\n      ctx.lineTo(x, y);\n\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    // Keep track of the last y-value in group\n    lastY = y;\n  }\n  drawX();\n}\n\n/**\n * @param {LineElement} line - the line\n * @returns {function}\n * @private\n */\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\n\n/**\n * @private\n */\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n\n  return _pointInLine;\n}\n\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\n\nfunction strokePathDirect(ctx, line, start, count) {\n  const {segments, options} = line;\n  const segmentMethod = _getSegmentMethod(line);\n\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n    if (segmentMethod(ctx, line, segment, {start, end: start + count - 1})) {\n      ctx.closePath();\n    }\n    ctx.stroke();\n  }\n}\n\nconst usePath2D = typeof Path2D === 'function';\n\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\n\nexport default class LineElement extends Element {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: 'miter',\n    borderWidth: 3,\n    capBezierPoints: true,\n    cubicInterpolationMode: 'default',\n    fill: false,\n    spanGaps: false,\n    stepped: false,\n    tension: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n\n  static descriptors = {\n    _scriptable: true,\n    _indexable: (name) => name !== 'borderDash' && name !== 'fill',\n  };\n\n\n  constructor(cfg) {\n    super();\n\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n      this._pointsUpdated = true;\n    }\n  }\n\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n\n  get points() {\n    return this._points;\n  }\n\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n\n  /**\n\t * First non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n\n  /**\n\t * Last non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n\n  /**\n\t * Interpolate a point in this line at the same value on `property` as\n\t * the reference `point` provided\n\t * @param {PointElement} point - the reference point\n\t * @param {string} property - the property to match on\n\t * @returns {PointElement|undefined}\n\t */\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n    const segments = _boundSegments(this, {property, start: value, end: value});\n\n    if (!segments.length) {\n      return;\n    }\n\n    const result = [];\n    const _interpolate = _getInterpolationMethod(options);\n    let i, ilen;\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {start, end} = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n    return result.length === 1 ? result[0] : result;\n  }\n\n  /**\n\t * Append a segment of this line to current path.\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} segment\n\t * @param {number} segment.start - start index of the segment, referring the points array\n \t * @param {number} segment.end - end index of the segment, referring the points array\n \t * @param {boolean} segment.loop - indicates that the segment is a loop\n\t * @param {object} params\n\t * @param {boolean} params.move - move to starting point (vs line to it)\n\t * @param {boolean} params.reverse - path the segment from end to start\n\t * @param {number} params.start - limit segment to points starting from `start` index\n\t * @param {number} params.end - limit segment to points ending at `start` + `count` index\n\t * @returns {undefined|boolean} - true if the segment is a full loop (path should be closed)\n\t */\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n    return segmentMethod(ctx, this, segment, params);\n  }\n\n  /**\n\t * Append all segments of this line to current path.\n\t * @param {CanvasRenderingContext2D|Path2D} ctx\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t * @returns {undefined|boolean} - true if line is a full loop (path should be closed)\n\t */\n  path(ctx, start, count) {\n    const segments = this.segments;\n    const segmentMethod = _getSegmentMethod(this);\n    let loop = this._loop;\n\n    start = start || 0;\n    count = count || (this.points.length - start);\n\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {start, end: start + count - 1});\n    }\n    return !!loop;\n  }\n\n  /**\n\t * Draw\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} chartArea\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t */\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n\n    if (points.length && options.borderWidth) {\n      ctx.save();\n\n      draw(ctx, this, start, count);\n\n      ctx.restore();\n    }\n\n    if (this.animated) {\n      // When line is animated, the control points and path are not cached.\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n}\n","import Element from '../core/core.element.js';\nimport {drawPoint, _isPointInArea} from '../helpers/helpers.canvas.js';\nimport type {\n  CartesianParsedData,\n  ChartArea,\n  Point,\n  PointHoverOptions,\n  PointOptions,\n} from '../types/index.js';\n\nfunction inRange(el: PointElement, pos: number, axis: 'x' | 'y', useFinalPosition?: boolean) {\n  const options = el.options;\n  const {[axis]: value} = el.getProps([axis], useFinalPosition);\n\n  return (Math.abs(pos - value) < options.radius + options.hitRadius);\n}\n\nexport type PointProps = Point\n\nexport default class PointElement extends Element<PointProps, PointOptions & PointHoverOptions> {\n\n  static id = 'point';\n\n  parsed: CartesianParsedData;\n  skip?: boolean;\n  stop?: boolean;\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderWidth: 1,\n    hitRadius: 1,\n    hoverBorderWidth: 1,\n    hoverRadius: 4,\n    pointStyle: 'circle',\n    radius: 3,\n    rotation: 0\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(mouseX: number, mouseY: number, useFinalPosition?: boolean) {\n    const options = this.options;\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return ((Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2)) < Math.pow(options.hitRadius + options.radius, 2));\n  }\n\n  inXRange(mouseX: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseX, 'x', useFinalPosition);\n  }\n\n  inYRange(mouseY: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseY, 'y', useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition?: boolean) {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y};\n  }\n\n  size(options?: Partial<PointOptions & PointHoverOptions>) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n\n  draw(ctx: CanvasRenderingContext2D, area: ChartArea) {\n    const options = this.options;\n\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n\n  getRange() {\n    const options = this.options || {};\n    // @ts-expect-error Fallbacks should never be hit in practice\n    return options.radius + options.hitRadius;\n  }\n}\n","import Element from '../core/core.element.js';\nimport {isObject, _isBetween, _limitValue} from '../helpers/index.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {toTRBL, toTRBLCorners} from '../helpers/helpers.options.js';\n\n/** @typedef {{ x: number, y: number, base: number, horizontal: boolean, width: number, height: number }} BarProps */\n\n/**\n * Helper function to get the bounds of the bar regardless of the orientation\n * @param {BarElement} bar the bar\n * @param {boolean} [useFinalPosition]\n * @return {object} bounds of the bar\n * @private\n */\nfunction getBarBounds(bar, useFinalPosition) {\n  const {x, y, base, width, height} = /** @type {BarProps} */ (bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition));\n\n  let left, right, top, bottom, half;\n\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n\n  return {left, top, right, bottom};\n}\n\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\n\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\n\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {enableBorderRadius} = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n\n  // If the value is an object, assume the user knows what they are doing\n  // and apply as directed.\n  const enableBorder = enableBorderRadius || isObject(value);\n\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\n\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r)),\n      }\n    }\n  };\n}\n\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n\n  return bounds\n\t\t&& (skipX || _isBetween(x, bounds.left, bounds.right))\n\t\t&& (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\n\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n\n/**\n * Add a path of a rectangle to the current sub-path\n * @param {CanvasRenderingContext2D} ctx Context\n * @param {*} rect Bounding rect\n */\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\n\nfunction inflateRect(rect, amount, refRect = {}) {\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\n\nexport default class BarElement extends Element {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderSkipped: 'start',\n    borderWidth: 0,\n    borderRadius: 0,\n    inflateAmount: 'auto',\n    pointStyle: undefined\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  draw(ctx) {\n    const {inflateAmount, options: {borderColor, backgroundColor}} = this;\n    const {inner, outer} = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n\n    ctx.save();\n\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n\n    ctx.restore();\n  }\n\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {x, y, base, horizontal} = /** @type {BarProps} */ (this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition));\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\n","import {DoughnutController, PolarAreaController} from '../index.js';\nimport type {Chart, ChartDataset} from '../types.js';\n\nexport interface ColorsPluginOptions {\n  enabled?: boolean;\n  forceOverride?: boolean;\n}\n\ninterface ColorsDescriptor {\n  backgroundColor?: unknown;\n  borderColor?: unknown;\n}\n\nconst BORDER_COLORS = [\n  'rgb(54, 162, 235)', // blue\n  'rgb(255, 99, 132)', // red\n  'rgb(255, 159, 64)', // orange\n  'rgb(255, 205, 86)', // yellow\n  'rgb(75, 192, 192)', // green\n  'rgb(153, 102, 255)', // purple\n  'rgb(201, 203, 207)' // grey\n];\n\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map(color => color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\n\nfunction getBorderColor(i: number) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\n\nfunction getBackgroundColor(i: number) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\n\nfunction colorizeDefaultDataset(dataset: ChartDataset, i: number) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n\n  return ++i;\n}\n\nfunction colorizeDoughnutDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));\n\n  return i;\n}\n\nfunction colorizePolarAreaDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));\n\n  return i;\n}\n\nfunction getColorizer(chart: Chart) {\n  let i = 0;\n\n  return (dataset: ChartDataset, datasetIndex: number) => {\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\n\nfunction containsColorsDefinitions(\n  descriptors: ColorsDescriptor[] | Record<string, ColorsDescriptor>\n) {\n  let k: number | string;\n\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction containsColorsDefinition(\n  descriptor: ColorsDescriptor\n) {\n  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\n\nexport default {\n  id: 'colors',\n\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  } as ColorsPluginOptions,\n\n  beforeLayout(chart: Chart, _args, options: ColorsPluginOptions) {\n    if (!options.enabled) {\n      return;\n    }\n\n    const {\n      data: {datasets},\n      options: chartOptions\n    } = chart.config;\n    const {elements} = chartOptions;\n\n    if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || (elements && containsColorsDefinitions(elements)))) {\n      return;\n    }\n\n    const colorizer = getColorizer(chart);\n\n    datasets.forEach(colorizer);\n  }\n};\n","import {_limitValue, _lookupByKey, isNullOrUndef, resolve} from '../helpers/index.js';\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  /**\n   * Implementation of the Largest Triangle Three Buckets algorithm.\n   *\n   * This implementation is based on the original implementation by Sveinn Steinarsson\n   * in https://github.com/sveinn-steinarsson/flot-downsample/blob/master/jquery.flot.downsample.js\n   *\n   * The original implementation is MIT licensed.\n   */\n  const samples = options.samples || availableWidth;\n  // There are less points than the threshold, returning the whole array\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n\n  const decimated = [];\n\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  // Starting from offset\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n\n  decimated[sampledIndex++] = data[a];\n\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n\n    // Adding offset\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n\n    // Adding offset\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {x: pointAx, y: pointAy} = data[a];\n\n    // Note that this is changed from the original algorithm which initializes these\n    // values to 1. The reason for this change is that if the area is small, nextA\n    // would never be set and thus a crash would occur in the next loop as `a` would become\n    // `undefined`. Since the area is always positive, but could be 0 in the case of a flat trace,\n    // initializing with a negative number is the correct solution.\n    maxArea = area = -1;\n\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs(\n        (pointAx - avgX) * (data[j].y - pointAy) -\n        (pointAx - data[j].x) * (avgY - pointAy)\n      );\n\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n\n  // Include the last point\n  decimated[sampledIndex++] = data[endIndex];\n\n  return decimated;\n}\n\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      // Use point.x here because we're computing the average data `x` value\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      // Push up to 4 points, 3 for the last interval and the first point for this interval\n      const lastIndex = i - 1;\n\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        // The interval is defined by 4 points: start, min, max, end.\n        // The starting point is already considered at this point, so we need to determine which\n        // of the other points to add. We need to sort these points to ensure the decimated data\n        // is still sorted and then ensure there are no duplicates.\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex1],\n            x: avgX,\n          });\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n\n      // lastIndex === startIndex will occur when a range has only 1 point which could\n      // happen with very uneven data\n      if (i > 0 && lastIndex !== startIndex) {\n        // Last point in the previous interval\n        decimated.push(data[lastIndex]);\n      }\n\n      // Start of the new interval\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n\n  return decimated;\n}\n\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: data,\n    });\n  }\n}\n\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach((dataset) => {\n    cleanDecimatedDataset(dataset);\n  });\n}\n\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n\n  let start = 0;\n  let count;\n\n  const {iScale} = meta;\n  const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\n\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n\n  return {start, count};\n}\n\nexport default {\n  id: 'decimation',\n\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false,\n  },\n\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      // The decimation plugin may have been previously enabled. Need to remove old `dataset._data` handlers\n      cleanDecimatedData(chart);\n      return;\n    }\n\n    // Assume the entire chart is available to show a few more points than needed\n    const availableWidth = chart.width;\n\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {_data, indexAxis} = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        // Decimation is only supported for lines that have an X indexAxis\n        return;\n      }\n\n      if (!meta.controller.supportsDecimation) {\n        // Only line datasets are supported\n        return;\n      }\n\n      const xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        // Only linear interpolation is supported\n        return;\n      }\n\n      if (chart.options.parsing) {\n        // Plugin only supports data that does not need parsing\n        return;\n      }\n\n      let {start, count} = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        // No decimation is required until we are above this threshold\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n\n      if (isNullOrUndef(_data)) {\n        // First time we are seeing this dataset\n        // We override the 'data' property with a setter that stores the\n        // raw data in _data, but reads the decimated data from _decimated\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function() {\n            return this._decimated;\n          },\n          set: function(d) {\n            this._data = d;\n          }\n        });\n      }\n\n      // Point the chart to the decimated data\n      let decimated;\n      switch (options.algorithm) {\n      case 'lttb':\n        decimated = lttbDecimation(data, start, count, availableWidth, options);\n        break;\n      case 'min-max':\n        decimated = minMaxDecimation(data, start, count, availableWidth);\n        break;\n      default:\n        throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n\n      dataset._decimated = decimated;\n    });\n  },\n\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\n","import {_boundSegment, _boundSegments, _normalizeAngle} from '../../helpers/index.js';\n\nexport function _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n\n  for (const segment of segments) {\n    let {start, end} = segment;\n    end = _findSegmentEnd(start, end, points);\n\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n\n    if (!target.segments) {\n      // Special case for boundary not supporting `segments` (simpleArc)\n      // Bounds are provided as `target` for partial circle, or undefined for full circle\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n\n    // Get all segments from `target` that intersect the bounds of current segment of `line`\n    const targetSegments = _boundSegments(target, bounds);\n\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n      const fillSources = _boundSegment(segment, points, subBounds);\n\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n  return parts;\n}\n\nexport function _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  let start = first[property];\n  let end = last[property];\n\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {property, start, end};\n}\n\nexport function _pointsFromSegments(boundary, line) {\n  const {x = null, y = null} = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(({start, end}) => {\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n    if (y !== null) {\n      points.push({x: first.x, y});\n      points.push({x: last.x, y});\n    } else if (x !== null) {\n      points.push({x, y: first.y});\n      points.push({x, y: last.y});\n    }\n  });\n  return points;\n}\n\nexport function _findSegmentEnd(start, end, points) {\n  for (;end > start; end--) {\n    const point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\n\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\n","/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {isArray} from '../../helpers/index.js';\nimport {_pointsFromSegments} from './filler.segment.js';\n\n/**\n * @param {PointElement[] | { x: number; y: number; }} boundary\n * @param {LineElement} line\n * @return {LineElement?}\n */\nexport function _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n\n  if (isArray(boundary)) {\n    _loop = true;\n    // @ts-ignore\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n\n  return points.length ? new LineElement({\n    points,\n    options: {tension: 0},\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\n\nexport function _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\n","import {isObject, isFinite, valueOrDefault} from '../../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.line.js').default } LineElement\n * @typedef { import('../../types/index.js').FillTarget } FillTarget\n * @typedef { import('../../types/index.js').ComplexFillTarget } ComplexFillTarget\n */\n\nexport function _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n\n  if (!propagate) {\n    return fill;\n  }\n\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isFinite(fill)) {\n      return fill;\n    }\n\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n\n    if (target.visible) {\n      return fill;\n    }\n\n    visited.push(fill);\n    fill = target.fill;\n  }\n\n  return false;\n}\n\n/**\n * @param {LineElement} line\n * @param {number} index\n * @param {number} count\n */\nexport function _decodeFill(line, index, count) {\n  /** @type {string | {value: number}} */\n  const fill = parseFillOption(line);\n\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n\n  let target = parseFloat(fill);\n\n  if (isFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\n\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n\n  return target;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @returns {number | null}\n */\nexport function _getTargetPixel(fill, scale) {\n  let pixel = null;\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n  return pixel;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @param {number} startValue\n * @returns {number | undefined}\n */\nexport function _getTargetValue(fill, scale, startValue) {\n  let value;\n\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  return value;\n}\n\n/**\n * @param {LineElement} line\n */\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n\n  if (fill === false || fill === null) {\n    return false;\n  }\n\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\n","/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {_isBetween} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\n\n/**\n * @param {{ chart: Chart; scale: Scale; index: number; line: LineElement; }} source\n * @return {LineElement}\n */\nexport function _buildStackLine(source) {\n  const {scale, index, line} = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({x: null, y: scale.bottom}, line));\n\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({points, options: {}});\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @return {LineElement[]}\n */\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\n\n/**\n * @param {PointElement[]} points\n * @param {PointElement} sourcePoint\n * @param {LineElement[]} linesBelow\n */\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {first, last, point} = findPoint(line, sourcePoint, 'x');\n\n    if (!point || (first && last)) {\n      continue;\n    }\n    if (first) {\n      // First point of an segment -> need to add another point before this,\n      // from next line below.\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        // In the middle of an segment, no need to add more points.\n        break;\n      }\n    }\n  }\n  points.push(...postponed);\n}\n\n/**\n * @param {LineElement} line\n * @param {PointElement} sourcePoint\n * @param {string} property\n * @returns {{point?: PointElement, first?: boolean, last?: boolean}}\n */\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {first, last, point};\n}\n","import {TAU} from '../../helpers/index.js';\n\n// TODO: use elements.ArcElement instead\nexport class simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n\n  pathSegment(ctx, bounds, opts) {\n    const {x, y, radius} = this;\n    bounds = bounds || {start: 0, end: TAU};\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n\n  interpolate(point) {\n    const {x, y, radius} = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n}\n","import {isFinite} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\nimport {_getTargetPixel, _getTargetValue} from './filler.options.js';\nimport {_buildStackLine} from './filler.target.stack.js';\nimport {simpleArc} from './simpleArc.js';\n\n/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nexport function _getTarget(source) {\n  const {chart, fill, line} = source;\n\n  if (isFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n\n  if (fill === 'shape') {\n    return true;\n  }\n\n  const boundary = computeBoundary(source);\n\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n\n  return _createBoundaryLine(boundary, line);\n}\n\n/**\n * @param {Chart} chart\n * @param {number} index\n */\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\n\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\n\n\nfunction computeLinearBoundary(source) {\n  const {scale = {}, fill} = source;\n  const pixel = _getTargetPixel(fill, scale);\n\n  if (isFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n\n  return null;\n}\n\nfunction computeCircularBoundary(source) {\n  const {scale, fill} = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n  const value = _getTargetValue(fill, scale, start);\n  const target = [];\n\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\n\n","import {clipArea, unclipArea} from '../../helpers/index.js';\nimport {_findSegmentEnd, _getBounds, _segments} from './filler.segment.js';\nimport {_getTarget} from './filler.target.js';\n\nexport function _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n  const {line, scale, axis} = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {above = color, below = color} = fillOption || {};\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {line, target, above, below, area, scale, axis});\n    unclipArea(ctx);\n  }\n}\n\nfunction doFill(ctx, cfg) {\n  const {line, target, above, below, area, scale} = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n\n  ctx.save();\n\n  if (property === 'x' && below !== above) {\n    clipVertical(ctx, target, area.top);\n    fill(ctx, {line, target, color: above, scale, property});\n    ctx.restore();\n    ctx.save();\n    clipVertical(ctx, target, area.bottom);\n  }\n  fill(ctx, {line, target, color: below, scale, property});\n\n  ctx.restore();\n}\n\nfunction clipVertical(ctx, target, clipY) {\n  const {segments, points} = target;\n  let first = true;\n  let lineLoop = false;\n\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {start, end} = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {move: lineLoop});\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction fill(ctx, cfg) {\n  const {line, target, property, color, scale} = cfg;\n  const segments = _segments(line, target, property);\n\n  for (const {source: src, target: tgt, start, end} of segments) {\n    const {style: {backgroundColor = color} = {}} = src;\n    const notShape = target !== true;\n\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n\n    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n\n    ctx.beginPath();\n\n    const lineLoop = !!line.pathSegment(ctx, src);\n\n    let loop;\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n\n      const targetLoop = !!target.pathSegment(ctx, tgt, {move: lineLoop, reverse: true});\n      loop = lineLoop && targetLoop;\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n\n    ctx.restore();\n  }\n}\n\nfunction clipBounds(ctx, scale, bounds) {\n  const {top, bottom} = scale.chart.chartArea;\n  const {property, start, end} = bounds || {};\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\n\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\n\n","/**\n * Plugin based on discussion from the following Chart.js issues:\n * @see https://github.com/chartjs/Chart.js/issues/2380#issuecomment-279961569\n * @see https://github.com/chartjs/Chart.js/issues/2440#issuecomment-256461897\n */\n\nimport LineElement from '../../elements/element.line.js';\nimport {_drawfill} from './filler.drawing.js';\nimport {_shouldApplyFill} from './filler.helper.js';\nimport {_decodeFill, _resolveTarget} from './filler.options.js';\n\nexport default {\n  id: 'filler',\n\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line,\n        };\n      }\n\n      meta.$filler = source;\n      sources.push(source);\n    }\n\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n\n      source.line.updateControlPoints(area, source.axis);\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\n","import defaults from '../core/core.defaults.js';\nimport Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {addRoundedRectPath, drawPointLegend, renderText} from '../helpers/helpers.canvas.js';\nimport {\n  _isBetween,\n  callback as call,\n  clipArea,\n  getRtlAdapter,\n  overrideTextDirection,\n  restoreTextDirection,\n  toFont,\n  toPadding,\n  unclipArea,\n  valueOrDefault,\n} from '../helpers/index.js';\nimport {_alignStartEnd, _textX, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {toTRBLCorners} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n */\n\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {boxHeight = fontSize, boxWidth = fontSize} = labelOpts;\n\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\n\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\n\nexport class Legend extends Element {\n\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this._added = false;\n\n    // Contains hit boxes for each dataset (in dataset order)\n    this.legendHitBoxes = [];\n\n    /**\n \t\t * @private\n \t\t */\n    this._hoveredItem = null;\n\n    // Are we in doughnut mode which has a different data type\n    this.doughnutMode = false;\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = call(labelOpts.generateLabels, [this.chart], this) || [];\n\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter((item) => labelOpts.filter(item, this.chart.data));\n    }\n\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n\n    this.legendItems = legendItems;\n  }\n\n  fit() {\n    const {options, ctx} = this;\n\n    // The legend may not be displayed for a variety of reasons including\n    // the fact that the defaults got set to `false`.\n    // When the legend is not displayed, there are no guarantees that the options\n    // are correctly formatted so we need to bail out as early as possible.\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n    const titleHeight = this._computeTitleHeight();\n    const {boxWidth, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    let width, height;\n\n    ctx.font = labelFont.string;\n\n    if (this.isHorizontal()) {\n      width = this.maxWidth; // fill all the width\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight; // fill all the height\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n    }\n\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n\n  /**\n\t * @private\n\t */\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {ctx, maxWidth, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    // Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n\n      hitboxes[i] = {left: 0, top, row, width: itemWidth, height: itemHeight};\n\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n\n    return totalHeight;\n  }\n\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n    const {ctx, maxHeight, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n\n    let left = 0;\n    let col = 0;\n\n    this.legendItems.forEach((legendItem, i) => {\n      const {itemWidth, itemHeight} = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n\n      // If too tall, go to new column\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n\n      // Store the hitbox width and height here. Final position will be updated in `draw`\n      hitboxes[i] = {left, top: currentColHeight, col, width: itemWidth, height: itemHeight};\n\n      // Get max width\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n\n    totalWidth += currentColWidth;\n    columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n\n    return totalWidth;\n  }\n\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n    const titleHeight = this._computeTitleHeight();\n    const {legendHitBoxes: hitboxes, options: {align, labels: {padding}, rtl}} = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n    if (this.isHorizontal()) {\n      let row = 0;\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n        hitbox.top = top;\n        hitbox.left += this.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n\n      this._draw();\n\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _draw() {\n    const {options: opts, columnSizes, lineWidths, ctx} = this;\n    const {align, labels: labelOpts} = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {padding} = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n\n    this.drawTitle();\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n\n    const {boxWidth, boxHeight, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    // current position\n    const drawLegendBox = function(x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n\n      // Set the ctx for the box\n      ctx.save();\n\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n\n      if (labelOpts.usePointStyle) {\n        // Recalculate x and y for drawPoint() because its expecting\n        // x and y to be center of figure (instead of top left)\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n\n        // Draw pointStyle as legend symbol\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        // Draw box as legend symbol\n        // Adjust position when boxHeight < fontSize (want it centered)\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n\n        ctx.beginPath();\n\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius,\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n\n        ctx.fill();\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n\n      ctx.restore();\n    };\n\n    const fillText = function(x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + (itemHeight / 2), labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n\n    // Horizontal\n    const isHorizontal = this.isHorizontal();\n    const titleHeight = this._computeTitleHeight();\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n\n    overrideTextDirection(this.ctx, opts.textDirection);\n\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor; // for strikethrough effect\n      ctx.fillStyle = legendItem.fontColor; // render in correct colour\n\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n\n      rtlHelper.setWidth(this.width);\n\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n\n      const realX = rtlHelper.x(x);\n\n      drawLegendBox(realX, y, legendItem);\n\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n\n      // Fill the actual label\n      fillText(rtlHelper.x(x), y, legendItem);\n\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else if (typeof legendItem.text !== 'string') {\n        const fontLineHeight = labelFont.lineHeight;\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight);\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n\n    if (!titleOpts.display) {\n      return;\n    }\n\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n\n    // These defaults are used when the legend is vertical.\n    // When horizontal, they are computed below.\n    let left = this.left;\n    let maxWidth = this.width;\n\n    if (this.isHorizontal()) {\n      // Move left / right so that the title is above the legend lines\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      // Move down so that the title is above the legend stack in every alignment\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n\n    // Now that we know the left edge of the inner legend box, compute the correct\n    // X coordinate from the title alignment\n    const x = _alignStartEnd(position, left, left + maxWidth);\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n\n  /**\n\t * @private\n\t */\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n\n    if (_isBetween(x, this.left, this.right)\n      && _isBetween(y, this.top, this.bottom)) {\n      // See if we are touching one of the dataset boxes\n      lh = this.legendHitBoxes;\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width)\n          && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          // Touching an element\n          return this.legendItems[i];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t */\n  handleEvent(e) {\n    const opts = this.options;\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n\n    // Chart event already has relative position in it\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n      if (previous && !sameItem) {\n        call(opts.onLeave, [e, previous, this], this);\n      }\n\n      this._hoveredItem = hoveredItem;\n\n      if (hoveredItem && !sameItem) {\n        call(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      call(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n}\n\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {itemWidth, itemHeight};\n}\n\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  let legendItemText = legendItem.text;\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\n  }\n  return boxWidth + (labelFont.size / 2) + ctx.measureText(legendItemText).width;\n}\n\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  let itemHeight = _itemHeight;\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n  return itemHeight;\n}\n\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  const labelHeight = legendItem.text ? legendItem.text.length + 0.5 : 0;\n  return fontLineHeight * labelHeight;\n}\n\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\n\nexport default {\n  id: 'legend',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Legend,\n\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({ctx: chart.ctx, options, chart});\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n\n  // During the beforeUpdate step, the layout configuration needs to run\n  // This ensures that if the legend position changes (via an option update)\n  // the layout system respects the change. See https://github.com/chartjs/Chart.js/issues/7527\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n\n  // The labels need to be built after datasets are updated to ensure that colors\n  // and other styling are correct. See https://github.com/chartjs/Chart.js/issues/6968\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n\n\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n\n    // a callback that will handle\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n\n    onHover: null,\n    onLeave: null,\n\n    labels: {\n      color: (ctx) => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n      // Generates labels shown in the legend\n      // Valid properties to return:\n      // text : text to display\n      // fillStyle : fill of coloured box\n      // strokeStyle: stroke of coloured box\n      // hidden : if this legend item refers to a hidden item\n      // lineCap : cap style for line\n      // lineDash\n      // lineDashOffset :\n      // lineJoin :\n      // lineWidth :\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {labels: {usePointStyle, pointStyle, textAlign, color, useBorderRadius, borderRadius}} = chart.legend.options;\n\n        return chart._getSortedDatasetMetas().map((meta) => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n\n            // Below is extra data used for toggling the datasets\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n\n    title: {\n      color: (ctx) => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: '',\n    }\n  },\n\n  descriptors: {\n    _scriptable: (name) => !name.startsWith('on'),\n    labels: {\n      _scriptable: (name) => !['generateLabels', 'filter', 'sort'].includes(name),\n    }\n  },\n};\n","import Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {PI, isArray, toPadding, toFont} from '../helpers/index.js';\nimport {_toLeftRightCenter, _alignStartEnd} from '../helpers/helpers.extras.js';\nimport {renderText} from '../helpers/helpers.canvas.js';\n\nexport class Title extends Element {\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n\n    this.left = 0;\n    this.top = 0;\n\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n\n  _drawArgs(offset) {\n    const {top, left, bottom, right, options} = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n      maxWidth = bottom - top;\n    }\n    return {titleX, titleY, maxWidth, rotation};\n  }\n\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n\n    if (!opts.display) {\n      return;\n    }\n\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n    const {titleX, titleY, maxWidth, rotation} = this._drawArgs(offset);\n\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n}\n\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\n\nexport default {\n  id: 'title',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Title,\n\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold',\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000         // by default greater than legend (1000) to be above\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import {Title} from './plugin.title.js';\nimport layouts from '../core/core.layouts.js';\n\nconst map = new WeakMap();\n\nexport default {\n  id: 'subtitle',\n\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal',\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500         // by default greater than legend (1000) and smaller than title (2000)\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import Animations from '../core/core.animations.js';\nimport Element from '../core/core.element.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {each, noop, isNullOrUndef, isArray, _elementsEqual, isObject} from '../helpers/helpers.core.js';\nimport {toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\nimport {getRtlAdapter, overrideTextDirection, restoreTextDirection} from '../helpers/helpers.rtl.js';\nimport {distanceBetweenPoints, _limitValue} from '../helpers/helpers.math.js';\nimport {createContext, drawPoint} from '../helpers/index.js';\n\n/**\n * @typedef { import('../platform/platform.base.js').Chart } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../types/index.js').ActiveElement } ActiveElement\n * @typedef { import('../core/core.interaction.js').InteractionItem } InteractionItem\n */\n\nconst positioners = {\n  /**\n\t * Average mode places the tooltip at the average position of the elements shown\n\t */\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n\n    let i, len;\n    let x = 0;\n    let y = 0;\n    let count = 0;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        x += pos.x;\n        y += pos.y;\n        ++count;\n      }\n    }\n\n    return {\n      x: x / count,\n      y: y / count\n    };\n  },\n\n  /**\n\t * Gets the tooltip position nearest of the item nearest to the event position\n\t */\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n};\n\n// Helper to push or concat based on if the 2nd parameter is an array or not\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      // base = base.concat(toPush);\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n\n  return base;\n}\n\n/**\n * Returns array of strings split by newline\n * @param {*} str - The value to split by newline.\n * @returns {string|string[]} value if newline present - Returned from String split() method\n * @function\n */\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\n\n\n/**\n * Private helper to create a tooltip item model\n * @param {Chart} chart\n * @param {ActiveElement} item - {element, index, datasetIndex} to create the tooltip item for\n * @return new tooltip item\n */\nfunction createTooltipItem(chart, item) {\n  const {element, datasetIndex, index} = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {label, value} = controller.getLabelAndValue(index);\n\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\n\n/**\n * Get the size of the tooltip\n */\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {body, footer, title} = tooltip;\n  const {boxWidth, boxHeight} = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n\n  // Count of all lines in the body\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight\n\t\t\t+ (titleLineCount - 1) * options.titleSpacing\n\t\t\t+ options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    // Body lines may include some extra height depending on boxHeight\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight\n\t\t\t+ (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight\n\t\t\t+ (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop\n\t\t\t+ footerLineCount * footerFont.lineHeight\n\t\t\t+ (footerLineCount - 1) * options.footerSpacing;\n  }\n\n  // Title width\n  let widthPadding = 0;\n  const maxLineWidth = function(line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n\n  ctx.save();\n\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n\n  // Body width\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n\n  // Body lines may include some extra width due to the color box\n  widthPadding = options.displayColors ? (boxWidth + 2 + options.boxPadding) : 0;\n  each(body, (bodyItem) => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n\n  // Reset back to 0\n  widthPadding = 0;\n\n  // Footer width\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n\n  ctx.restore();\n\n  // Add padding\n  width += padding.width;\n\n  return {width, height};\n}\n\nfunction determineYAlign(chart, size) {\n  const {y, height} = size;\n\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > (chart.height - height / 2)) {\n    return 'bottom';\n  }\n  return 'center';\n}\n\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {x, width} = size;\n  const caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\n\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {x, width} = size;\n  const {width: chartWidth, chartArea: {left, right}} = chart;\n  let xAlign = 'center';\n\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n\n  return xAlign;\n}\n\n/**\n * Helper to get the alignment of a tooltip given the size\n */\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\n\nfunction alignX(size, xAlign) {\n  let {x, width} = size;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= (width / 2);\n  }\n  return x;\n}\n\nfunction alignY(size, yAlign, paddingAndSize) {\n  // eslint-disable-next-line prefer-const\n  let {y, height} = size;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= (height / 2);\n  }\n  return y;\n}\n\n/**\n * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment\n */\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {caretSize, caretPadding, cornerRadius} = options;\n  const {xAlign, yAlign} = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\n\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n\n  return align === 'center'\n    ? tooltip.x + tooltip.width / 2\n    : align === 'right'\n      ? tooltip.x + tooltip.width - padding.right\n      : tooltip.x + padding.left;\n}\n\n/**\n * Helper to build before and after body lines\n */\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\n\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\n\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\n\nconst defaultCallbacks = {\n  // Args are: (tooltipItems, data)\n  beforeTitle: noop,\n  title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      const item = tooltipItems[0];\n      const labels = item.chart.data.labels;\n      const labelCount = labels ? labels.length : 0;\n\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n\n    return '';\n  },\n  afterTitle: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeBody: noop,\n\n  // Args are: (tooltipItem, data)\n  beforeLabel: noop,\n  label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n\n    let label = tooltipItem.dataset.label || '';\n\n    if (label) {\n      label += ': ';\n    }\n    const value = tooltipItem.formattedValue;\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n    return label;\n  },\n  labelColor(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0,\n    };\n  },\n  labelTextColor() {\n    return this.options.bodyColor;\n  },\n  labelPointStyle(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation,\n    };\n  },\n  afterLabel: noop,\n\n  // Args are: (tooltipItems, data)\n  afterBody: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\n\n/**\n * Invoke callback from object with context and arguments.\n * If callback returns `undefined`, then will be invoked default callback.\n * @param {Record<keyof typeof defaultCallbacks, Function>} callbacks\n * @param {keyof typeof defaultCallbacks} name\n * @param {*} ctx\n * @param {*} arg\n * @returns {any}\n */\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  const result = callbacks[name].call(ctx, arg);\n\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n\n  return result;\n}\n\nexport class Tooltip extends Element {\n\n  /**\n   * @namespace Chart.Tooltip.positioners\n   */\n  static positioners = positioners;\n\n  constructor(config) {\n    super();\n\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    // TODO: V4, make this private, rename to `_labelStyles`, and combine with `labelPointStyles`\n    // and `labelTextColors` to create a single variable\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n\n    if (cached) {\n      return cached;\n    }\n\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext() {\n    return this.$context ||\n\t\t\t(this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n\n  getTitle(context, options) {\n    const {callbacks} = options;\n\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n\n    return lines;\n  }\n\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems)\n    );\n  }\n\n  getBody(tooltipItems, options) {\n    const {callbacks} = options;\n    const bodyItems = [];\n\n    each(tooltipItems, (context) => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n\n      bodyItems.push(bodyItem);\n    });\n\n    return bodyItems;\n  }\n\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems)\n    );\n  }\n\n  // Get the footer and beforeFooter and afterFooter lines\n  getFooter(tooltipItems, options) {\n    const {callbacks} = options;\n\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n\n    return lines;\n  }\n\n  /**\n\t * @private\n\t */\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n\n    // If the user provided a filter function, use it to modify the tooltip items\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n\n    // If the user provided a sorting function, use it to modify the tooltip items\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n\n    // Determine colors for boxes\n    each(tooltipItems, (context) => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n    });\n\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n\n    if (changed && options.external) {\n      options.external.call(this, {chart: this.chart, tooltip: this, replay});\n    }\n  }\n\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n\n  getCaretPosition(tooltipPoint, size, options) {\n    const {xAlign, yAlign} = this;\n    const {caretSize, cornerRadius} = options;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n    const {x: ptX, y: ptY} = tooltipPoint;\n    const {width, height} = size;\n    let x1, x2, x3, y1, y2, y3;\n\n    if (yAlign === 'center') {\n      y2 = ptY + (height / 2);\n\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n\n        // Left draws bottom -> top, this y1 is on the bottom\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n\n        // Right draws top -> bottom, thus y1 is on the top\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + (caretSize);\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n\n        // Top draws left -> right, thus x1 is on the left\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n\n        // Bottom draws right -> left, thus x1 is on the right\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n      y3 = y1;\n    }\n    return {x1, x2, x3, y1, y2, y3};\n  }\n\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.titleAlign, options);\n\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing; // Line Height and spacing\n\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing\n        }\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColors = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {boxHeight, boxWidth, boxPadding} = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2, // fit the circle in the box\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      // Recalculate x and y for drawPoint() because its expecting\n      // x and y to be center of figure (instead of top left)\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n\n      // Fill the point with white so that colours merge nicely if the opacity is < 1\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n\n      // Draw the point\n      ctx.strokeStyle = labelColors.borderColor;\n      ctx.fillStyle = labelColors.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      // Border\n      ctx.lineWidth = isObject(labelColors.borderWidth) ? Math.max(...Object.values(labelColors.borderWidth)) : (labelColors.borderWidth || 1); // TODO, v4 remove fallback\n      ctx.strokeStyle = labelColors.borderColor;\n      ctx.setLineDash(labelColors.borderDash || []);\n      ctx.lineDashOffset = labelColors.borderDashOffset || 0;\n\n      // Fill a white rect so that colours merge nicely if the opacity is < 1\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth - boxPadding);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - boxPadding - 2);\n      const borderRadius = toTRBLCorners(labelColors.borderRadius);\n\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius,\n        });\n        ctx.fill();\n        ctx.stroke();\n\n        // Inner square\n        ctx.fillStyle = labelColors.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius,\n        });\n        ctx.fill();\n      } else {\n        // Normal rect\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        // Inner square\n        ctx.fillStyle = labelColors.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n\n    // restore fillStyle\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n\n  drawBody(pt, ctx, options) {\n    const {body} = this;\n    const {bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding} = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n    const fillLineOfText = function(line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n\n    // Before body lines\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right'\n      ? bodyAlign === 'center' ? (boxWidth / 2 + boxPadding) : (boxWidth + 2 + boxPadding)\n      : 0;\n\n    // Draw body lines now\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n\n      lines = bodyItem.lines;\n      // Draw Legend-like boxes if needed\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        // Reset for any lines that don't include colorbox\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n\n      each(bodyItem.after, fillLineOfText);\n    }\n\n    // Reset back to 0 for after body\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n\n    // After body lines\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing; // Remove last body spacing\n  }\n\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n\n      footerFont = toFont(options.footerFont);\n\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {xAlign, yAlign} = this;\n    const {x, y} = pt;\n    const {width, height} = tooltipSize;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(options.cornerRadius);\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n\n    ctx.fill();\n\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n\n  /**\n\t * Update x/y animation targets when _active elements are animating too\n\t * @private\n\t */\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n      if (!position) {\n        return;\n      }\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n\n  /**\n   * Determine if the tooltip will draw anything\n   * @returns {boolean} True if the tooltip will render\n   */\n  _willRender() {\n    return !!this.opacity;\n  }\n\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n\n    if (!opacity) {\n      return;\n    }\n\n    this._updateAnimationTarget(options);\n\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n\n    // IE11/Edge does not like very small opacities, so snap to 0\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n\n    const padding = toPadding(options.padding);\n\n    // Truthy/falsey value for empty tooltip\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n\n      // Draw Background\n      this.drawBackground(pt, ctx, tooltipSize, options);\n\n      overrideTextDirection(ctx, options.textDirection);\n\n      pt.y += padding.top;\n\n      // Titles\n      this.drawTitle(pt, ctx, options);\n\n      // Body\n      this.drawBody(pt, ctx, options);\n\n      // Footer\n      this.drawFooter(pt, ctx, options);\n\n      restoreTextDirection(ctx, options.textDirection);\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * Get active elements in the tooltip\n\t * @returns {Array} Array of elements that are active in the tooltip\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active elements in the tooltip\n\t * @param {array} activeElements Array of active datasetIndex/index pairs.\n\t * @param {object} eventPosition Synthetic event position used in positioning\n\t */\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n    const positionChanged = this._positionChanged(active, eventPosition);\n\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {boolean} true if the tooltip changed\n\t */\n  handleEvent(e, replay, inChartArea = true) {\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n    this._ignoreReplayEvents = false;\n\n    const options = this.options;\n    const lastActive = this._active || [];\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n\n    // When there are multiple items shown, but the tooltip position is nearest mode\n    // an update may need to be made because our position may have changed even though\n    // the items are the same as before.\n    const positionChanged = this._positionChanged(active, e);\n\n    // Remember Last Actives\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n\n    // Only handle target event on tooltip change\n    if (changed) {\n      this._active = active;\n\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n\n        this.update(true, replay);\n      }\n    }\n\n    return changed;\n  }\n\n  /**\n\t * Helper for determining the active elements for event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {InteractionItem[]} lastActive - Previously active elements\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {InteractionItem[]} - Active elements\n\t * @private\n\t */\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      return lastActive;\n    }\n\n    // Find Active Elements for tooltips\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n\n    if (options.reverse) {\n      active.reverse();\n    }\n\n    return active;\n  }\n\n  /**\n\t * Determine if the active elements + event combination changes the\n\t * tooltip position\n\t * @param {array} active - Active elements\n\t * @param {ChartEvent} e - Event that triggered the position change\n\t * @returns {boolean} True if the position has changed\n\t */\n  _positionChanged(active, e) {\n    const {caretX, caretY, options} = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n}\n\nexport default {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({chart, options});\n    }\n  },\n\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n\n      if (chart.notifyPlugins('beforeTooltipDraw', {...args, cancelable: true}) === false) {\n        return;\n      }\n\n      tooltip.draw(chart.ctx);\n\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      // If the event is replayed from `update`, we should evaluate with the final positions.\n      const useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        // notify chart about the change, so it will render\n        args.changed = true;\n      }\n    }\n  },\n\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold',\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {\n    },\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold',\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart',\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY'],\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n\n  descriptors: {\n    _scriptable: (name) => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false,\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n\n  // Resolve additionally from `interaction` options and defaults.\n  additionalOptionScopes: ['interaction']\n};\n","import Scale from '../core/core.scale.js';\nimport {isNullOrUndef, valueOrDefault, _limitValue} from '../helpers/index.js';\n\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({index, label: raw});\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\n\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\n\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\n\nfunction _getLabelForValue(value) {\n  const labels = this.getLabels();\n\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n  return value;\n}\n\nexport default class CategoryScale extends Scale {\n\n  static id = 'category';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: _getLabelForValue\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n\n  init(scaleOptions) {\n    const added = this._addedLabels;\n    if (added.length) {\n      const labels = this.getLabels();\n      for (const {index, label} of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n      this._addedLabels = [];\n    }\n    super.init(scaleOptions);\n  }\n\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index\n      : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n\n  determineDataLimits() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this.getMinMax(true);\n\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n\n    // If we are viewing some subset of labels, slice the original array\n    labels = (min === 0 && max === labels.length - 1) ? labels : labels.slice(min, max + 1);\n\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n\n    for (let value = min; value <= max; value++) {\n      ticks.push({value});\n    }\n    return ticks;\n  }\n\n  getLabelForValue(value) {\n    return _getLabelForValue.call(this, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    super.configure();\n\n    if (!this.isHorizontal()) {\n      // For backward compatibility, vertical category scale reverse is inverted.\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n\n  // Used to get data value locations. Value can either be an index or a numerical value\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  // Must override base implementation because it calls getPixelForValue\n  // and category scale can have duplicate values\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n\n  getBasePixel() {\n    return this.bottom;\n  }\n}\n","import {isNullOrUndef} from '../helpers/helpers.core.js';\nimport {almostEquals, almostWhole, niceNum, _decimalPlaces, _setMinAndMaxByKey, sign, toRadians} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\n\n/**\n * Generate a set of linear ticks for an axis\n * 1. If generationOptions.min, generationOptions.max, and generationOptions.step are defined:\n *    if (max - min) / step is an integer, ticks are generated as [min, min + step, ..., max]\n *    Note that the generationOptions.maxCount setting is respected in this scenario\n *\n * 2. If generationOptions.min, generationOptions.max, and generationOptions.count is defined\n *    spacing = (max - min) / count\n *    Ticks are generated as [min, min + spacing, ..., max]\n *\n * 3. If generationOptions.count is defined\n *    spacing = (niceMax - niceMin) / count\n *\n * 4. Compute optimal spacing of ticks using niceNum algorithm\n *\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, dataRange) {\n  const ticks = [];\n  // To get a \"nice\" value for the tick spacing, we will use the appropriately named\n  // \"nice number\" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks\n  // for details.\n\n  const MIN_SPACING = 1e-14;\n  const {bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds} = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {min: rmin, max: rmax} = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n\n  // Beyond MIN_SPACING floating point numbers being to lose precision\n  // such that we can't do the math necessary to generate ticks\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{value: rmin}, {value: rmax}];\n  }\n\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    // If the calculated num of spaces exceeds maxNumSpaces, recalculate it\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n\n  if (!isNullOrUndef(precision)) {\n    // If the user specified a precision, round to that number of decimal places\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    // Case 1: If min, max and stepSize are set and they make an evenly spaced scale use it.\n    // spacing = step;\n    // numSpaces = (max - min) / spacing;\n    // Note that we round here to handle the case where almostWhole translated an FP error\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    // Cases 2 & 3, we have a count specified. Handle optional user defined edges to the range.\n    // Sometimes these are no-ops, but it makes the code a lot clearer\n    // and when a user defined range is specified, we want the correct ticks\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    // Case 4\n    numSpaces = (niceMax - niceMin) / spacing;\n\n    // If very close to our rounded value, use it.\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n\n  // The spacing will have changed in cases 1, 2, and 3 so the factor cannot be computed\n  // until this point\n  const decimalPlaces = Math.max(\n    _decimalPlaces(spacing),\n    _decimalPlaces(niceMin)\n  );\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n\n  let j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({value: min});\n\n      if (niceMin < min) {\n        j++; // Skip niceMin\n      }\n      // If the next nice tick is close to min, skip it\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n\n  for (; j < numSpaces; ++j) {\n    ticks.push({value: Math.round((niceMin + j * spacing) * factor) / factor});\n  }\n\n  if (maxDefined && includeBounds && niceMax !== max) {\n    // If the previous tick is too close to max, replace it with max, else add max\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({value: max});\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({value: niceMax});\n  }\n\n  return ticks;\n}\n\nfunction relativeLabelSize(value, minSpacing, {horizontal, minRotation}) {\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\n\nexport default class LinearScaleBase extends Scale {\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    /** @type {number} */\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n\n    return +raw;\n  }\n\n  handleTickRangeOptions() {\n    const {beginAtZero} = this.options;\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n\n    if (min === max) {\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n\n      setMax(max + offset);\n\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    // eslint-disable-next-line prefer-const\n    let {maxTicksLimit, stepSize} = tickOpts;\n    let maxTicks;\n\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n\n    return maxTicks;\n  }\n\n  /**\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    // Figure out what the max number of ticks we can support it is based on the size of\n    // the axis area. For now, we say that the minimum tick spacing in pixels must be 40\n    // We also limit the maximum number of ticks to 11 which gives a nice 10 squares on\n    // the graph. Make sure we always have at least 2 ticks\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks(numericGeneratorOptions, dataRange);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n\n    super.configure();\n\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n}\n","import {isFinite} from '../helpers/helpers.core.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {toRadians} from '../helpers/index.js';\n\nexport default class LinearScale extends LinearScaleBase {\n\n  static id = 'linear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.numeric\n    }\n  };\n\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? min : 0;\n    this.max = isFinite(max) ? max : 1;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n \t */\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n    const tickFont = this._resolveTickFontOptions(0);\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n\n  // Utils\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n}\n","import {finiteOrDefault, isFinite} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {_setMinAndMaxByKey, log10} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\n\nconst log10Floor = v => Math.floor(log10(v));\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\n\nfunction isMajor(tickVal) {\n  const remain = tickVal / (Math.pow(10, log10Floor(tickVal)));\n  return remain === 1;\n}\n\nfunction steps(min, max, rangeExp) {\n  const rangeStep = Math.pow(10, rangeExp);\n  const start = Math.floor(min / rangeStep);\n  const end = Math.ceil(max / rangeStep);\n  return end - start;\n}\n\nfunction startExp(min, max) {\n  const range = max - min;\n  let rangeExp = log10Floor(range);\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n  return Math.min(rangeExp, log10Floor(min));\n}\n\n\n/**\n * Generate a set of logarithmic ticks\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, {min, max}) {\n  min = finiteOrDefault(generationOptions.min, min);\n  const ticks = [];\n  const minExp = log10Floor(min);\n  let exp = startExp(min, max);\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  const stepSize = Math.pow(10, exp);\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\n  const start = Math.round((min - base) * precision) / precision;\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n  while (value < max) {\n    ticks.push({value, major: isMajor(value), significand});\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n  const lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({value: lastTick, major: isMajor(lastTick), significand});\n\n  return ticks;\n}\n\nexport default class LogarithmicScale extends Scale {\n\n  static id = 'logarithmic';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.logarithmic,\n      major: {\n        enabled: true\n      }\n    }\n  };\n\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n    return isFinite(value) && value > 0 ? value : null;\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? Math.max(0, min) : null;\n    this.max = isFinite(max) ? Math.max(0, max) : null;\n\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n\n    // if data has `0` in it or `beginAtZero` is true, min (non zero) value is at bottom\n    // of scale, and it does not equal suggestedMin, lower the min bound by one exp.\n    if (this._zero && this.min !== this._suggestedMin && !isFinite(this._userMin)) {\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n    }\n\n    this.handleTickRangeOptions();\n  }\n\n  handleTickRangeOptions() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (min === max) {\n      if (min <= 0) { // includes null\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(changeExponent(min, -1));\n        setMax(changeExponent(max, +1));\n      }\n    }\n    if (min <= 0) {\n      setMin(changeExponent(max, -1));\n    }\n    if (max <= 0) {\n\n      setMax(changeExponent(min, +1));\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value === undefined\n      ? '0'\n      : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const start = this.min;\n\n    super.configure();\n\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n    return this.getPixelForDecimal(value === this.min\n      ? 0\n      : (log10(value) - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n}\n","import defaults from '../core/core.defaults.js';\nimport {_longestText, addRoundedRectPath, renderText} from '../helpers/helpers.canvas.js';\nimport {HALF_PI, TAU, toDegrees, toRadians, _normalizeAngle, PI} from '../helpers/helpers.math.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {valueOrDefault, isArray, isFinite, callback as callCallback, isNullOrUndef} from '../helpers/helpers.core.js';\nimport {createContext, toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\n\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\n\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\n\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - (size / 2),\n      end: pos + (size / 2)\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\n\n/**\n * Helper function to fit a radial linear scale with point labels\n */\nfunction fitWithPointLabels(scale) {\n\n  // Right, this is really confusing and there is a lot of maths going on here\n  // The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\n  //\n  // Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\n  //\n  // Solution:\n  //\n  // We assume the radius of the polygon is half the size of the canvas at first\n  // at each index we check if the text overlaps.\n  //\n  // Where it does, we store that angle and that index.\n  //\n  // After finding the largest index and angle we calculate how much we need to remove\n  // from the shape radius to move the point inwards by that x.\n  //\n  // We average the left and right distances to get the maximum shape radius that can fit in the box\n  // along with labels.\n  //\n  // Once we have that, we can find the centre point for the chart, by taking the x text protrusion\n  // on each side, removing that from the size, halving it and adding the left x protrusion width.\n  //\n  // This will mean we have a shape fitted to the canvas, as large as it can be with the labels\n  // and position it in the most space efficient manner\n  //\n  // https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\n\n  // Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\n  // Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n\n  scale.setCenterPoint(\n    orig.l - limits.l,\n    limits.r - orig.r,\n    orig.t - limits.t,\n    limits.b - orig.b\n  );\n\n  // Now that text size is determined, compute the full positions\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\n\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\n\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const extra = getTickBackdropHeight(opts) / 2;\n  const outerDistance = scale.drawingArea;\n  const additionalAngle = opts.pointLabels.centerPointLabels ? PI / valueCount : 0;\n\n  for (let i = 0; i < valueCount; i++) {\n    const pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + padding[i], additionalAngle);\n    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n    const size = labelSizes[i];\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = getTextAlignForAngle(angle);\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n\n    items.push({\n      // Text position\n      x: pointLabelPosition.x,\n      y,\n\n      // Text rendering data\n      textAlign,\n\n      // Bounding box\n      left,\n      top: y,\n      right: left + size.w,\n      bottom: y + size.h\n    });\n  }\n  return items;\n}\n\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n\n  return 'right';\n}\n\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= (w / 2);\n  }\n  return x;\n}\n\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= (h / 2);\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\n\nfunction drawPointLabels(scale, labelCount) {\n  const {ctx, options: {pointLabels}} = scale;\n\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    const plFont = toFont(optsAtIndex.font);\n    const {x, y, textAlign, left, top, right, bottom} = scale._pointLabelItems[i];\n    const {backdropColor} = optsAtIndex;\n\n    if (!isNullOrUndef(backdropColor)) {\n      const borderRadius = toTRBLCorners(optsAtIndex.borderRadius);\n      const padding = toPadding(optsAtIndex.backdropPadding);\n      ctx.fillStyle = backdropColor;\n\n      const backdropLeft = left - padding.left;\n      const backdropTop = top - padding.top;\n      const backdropWidth = right - left + padding.width;\n      const backdropHeight = bottom - top + padding.height;\n\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: backdropLeft,\n          y: backdropTop,\n          w: backdropWidth,\n          h: backdropHeight,\n          radius: borderRadius,\n        });\n        ctx.fill();\n      } else {\n        ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n      }\n    }\n\n    renderText(\n      ctx,\n      scale._pointLabels[i],\n      x,\n      y + (plFont.lineHeight / 2),\n      plFont,\n      {\n        color: optsAtIndex.color,\n        textAlign: textAlign,\n        textBaseline: 'middle'\n      }\n    );\n  }\n}\n\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {ctx} = scale;\n  if (circular) {\n    // Draw circular arcs between the points\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    // Draw straight lines connecting each index\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\n\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n\n  const {color, lineWidth} = gridLineOpts;\n\n  if ((!circular && !labelCount) || !color || !lineWidth || radius < 0) {\n    return;\n  }\n\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\n\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\n\nexport default class RadialLinearScale extends LinearScaleBase {\n\n  static id = 'radialLinear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    display: true,\n\n    // Boolean - Whether to animate scaling the chart from the centre\n    animate: true,\n    position: 'chartArea',\n\n    angleLines: {\n      display: true,\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n\n    grid: {\n      circular: false\n    },\n\n    startAngle: 0,\n\n    // label settings\n    ticks: {\n      // Boolean - Show a backdrop to the scale label\n      showLabelBackdrop: true,\n\n      callback: Ticks.formatters.numeric\n    },\n\n    pointLabels: {\n      backdropColor: undefined,\n\n      // Number - The backdrop padding above & below the label in pixels\n      backdropPadding: 2,\n\n      // Boolean - if true, show point labels\n      display: true,\n\n      // Number - Point label font size in pixels\n      font: {\n        size: 10\n      },\n\n      // Function - Used to convert point labels\n      callback(label) {\n        return label;\n      },\n\n      // Number - Additionl padding between scale and pointLabel\n      padding: 5,\n\n      // Boolean - if true, center point labels to slices in polar chart\n      centerPointLabels: false\n    }\n  };\n\n  static defaultRoutes = {\n    'angleLines.color': 'borderColor',\n    'pointLabels.color': 'color',\n    'ticks.color': 'color'\n  };\n\n  static descriptors = {\n    angleLines: {\n      _fallback: 'grid'\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.xCenter = undefined;\n    /** @type {number} */\n    this.yCenter = undefined;\n    /** @type {number} */\n    this.drawingArea = undefined;\n    /** @type {string[]} */\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(false);\n\n    this.min = isFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isFinite(max) && !isNaN(max) ? max : 0;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n\n    // Point labels\n    this._pointLabels = this.getLabels()\n      .map((value, index) => {\n        const label = callCallback(this.options.pointLabels.callback, [value, index], this);\n        return label || label === 0 ? label : '';\n      })\n      .filter((v, i) => this.chart.getDataVisibility(i));\n  }\n\n  fit() {\n    const opts = this.options;\n\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n\n    // Take into account half font size + the yPadding of the top value\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n    return (value - this.min) * scalingFactor;\n  }\n\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n\n  getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n\n  getPointLabelPosition(index) {\n    const {left, top, right, bottom} = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom,\n    };\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBackground() {\n    const {backgroundColor, grid: {circular}} = this.options;\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {angleLines, grid, border} = opts;\n    const labelCount = this._pointLabels.length;\n\n    let i, offset, position;\n\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const context = this.getContext(index);\n          const optsAtIndex = grid.setContext(context);\n          const optsAtIndexBorder = border.setContext(context);\n\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n        }\n      });\n    }\n\n    if (angleLines.display) {\n      ctx.save();\n\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {color, lineWidth} = optsAtIndex;\n\n        if (!lineWidth || !color) {\n          continue;\n        }\n\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n\n        offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {}\n\n  /**\n\t * @protected\n\t */\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    if (!tickOpts.display) {\n      return;\n    }\n\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n\n    this.ticks.forEach((tick, index) => {\n      if (index === 0 && !opts.reverse) {\n        return;\n      }\n\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(\n          -width / 2 - padding.left,\n          -offset - tickFont.size / 2 - padding.top,\n          width + padding.width,\n          tickFont.size + padding.height\n        );\n      }\n\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color,\n      });\n    });\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {}\n}\n","import adapters from '../core/core.adapters.js';\nimport {callback as call, isFinite, isNullOrUndef, mergeIf, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toRadians, isNumber, _limitValue} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {_arrayUnique, _filterBetween, _lookup} from '../helpers/helpers.collection.js';\n\n/**\n * @typedef { import('../core/core.adapters.js').TimeUnit } Unit\n * @typedef {{common: boolean, size: number, steps?: number}} Interval\n * @typedef { import('../core/core.adapters.js').DateAdapter } DateAdapter\n */\n\n/**\n * @type {Object<Unit, Interval>}\n */\nconst INTERVALS = {\n  millisecond: {common: true, size: 1, steps: 1000},\n  second: {common: true, size: 1000, steps: 60},\n  minute: {common: true, size: 60000, steps: 60},\n  hour: {common: true, size: 3600000, steps: 24},\n  day: {common: true, size: 86400000, steps: 30},\n  week: {common: false, size: 604800000, steps: 4},\n  month: {common: true, size: 2.628e9, steps: 12},\n  quarter: {common: false, size: 7.884e9, steps: 4},\n  year: {common: true, size: 3.154e10}\n};\n\n/**\n * @type {Unit[]}\n */\nconst UNITS = /** @type Unit[] */ /* #__PURE__ */ (Object.keys(INTERVALS));\n\n/**\n * @param {number} a\n * @param {number} b\n */\nfunction sorter(a, b) {\n  return a - b;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {*} input\n * @return {number}\n */\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n\n  const adapter = scale._adapter;\n  const {parser, round, isoWeekday} = scale._parseOpts;\n  let value = input;\n\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n\n  // Only parse if its not a timestamp already\n  if (!isFinite(value)) {\n    value = typeof parser === 'string'\n      ? adapter.parse(value, /** @type {Unit} */ (parser))\n      : adapter.parse(value);\n  }\n\n  if (value === null) {\n    return null;\n  }\n\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true)\n      ? adapter.startOf(value, 'isoWeek', isoWeekday)\n      : adapter.startOf(value, round);\n  }\n\n  return +value;\n}\n\n/**\n * Figures out what unit results in an appropriate number of auto-generated ticks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @param {number} capacity\n * @return {object}\n */\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n\n  return UNITS[ilen - 1];\n}\n\n/**\n * Figures out what unit to format a set of ticks with\n * @param {TimeScale} scale\n * @param {number} numTicks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @return {Unit}\n */\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n\n/**\n * @param {Unit} unit\n * @return {object}\n */\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\n\n/**\n * @param {object} ticks\n * @param {number} time\n * @param {number[]} [timestamps] - if defined, snap to these timestamps\n */\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {lo, hi} = _lookup(timestamps, time);\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\n\n/**\n * @param {TimeScale} scale\n * @param {object[]} ticks\n * @param {object} map\n * @param {Unit} majorUnit\n * @return {object[]}\n */\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {number[]} values\n * @param {Unit|undefined} [majorUnit]\n * @return {object[]}\n */\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  /** @type {Object<number,object>} */\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n\n  // We set the major ticks separately from the above loop because calling startOf for every tick\n  // is expensive when there is a large number of ticks\n  return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\n\nexport default class TimeScale extends Scale {\n\n  static id = 'time';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    /**\n     * Scale boundary strategy (bypassed by min/max time options)\n     * - `data`: make sure data are fully visible, ticks outside are removed\n     * - `ticks`: make sure ticks are fully visible, data outside are truncated\n     * @see https://github.com/chartjs/Chart.js/pull/4556\n     * @since 2.7.0\n     */\n    bounds: 'data',\n\n    adapters: {},\n    time: {\n      parser: false, // false == a pattern string from or a custom callback that converts its argument to a timestamp\n      unit: false, // false == automatic or override with week, month, year, etc.\n      round: false, // none, or override with week, month, year, etc.\n      isoWeekday: false, // override week start day\n      minUnit: 'millisecond',\n      displayFormats: {}\n    },\n    ticks: {\n      /**\n       * Ticks generation input values:\n       * - 'auto': generates \"optimal\" ticks based on scale size and time options.\n       * - 'data': generates ticks from data (including labels from data {t|x|y} objects).\n       * - 'labels': generates ticks from user given `data.labels` values ONLY.\n       * @see https://github.com/chartjs/Chart.js/pull/4507\n       * @since 2.7.0\n       */\n      source: 'auto',\n\n      callback: false,\n\n      major: {\n        enabled: false\n      }\n    }\n  };\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {{data: number[], labels: number[], all: number[]}} */\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n\n    /** @type {Unit} */\n    this._unit = 'day';\n    /** @type {Unit=} */\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n\n  init(scaleOpts, opts = {}) {\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    /** @type {DateAdapter} */\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n\n    adapter.init(opts);\n\n    // Backward compatibility: before introducing adapter, `displayFormats` was\n    // supposed to contain *all* unit/string pairs but this can't be resolved\n    // when loading the scale (adapters are loaded afterward), so let's populate\n    // missing formats on update\n    mergeIf(time.displayFormats, adapter.formats());\n\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n\n    super.init(scaleOpts);\n\n    this._normalized = opts.normalized;\n  }\n\n  /**\n\t * @param {*} raw\n\t * @param {number?} [index]\n\t * @return {number}\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (raw === undefined) {\n      return null;\n    }\n    return parse(this, raw);\n  }\n\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    // eslint-disable-next-line prefer-const\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n\n    /**\n\t\t * @param {object} bounds\n\t\t */\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n\n    // If we have user provided `min` and `max` labels / data bounds can be ignored\n    if (!minDefined || !maxDefined) {\n      // Labels are always considered, when user did not force bounds\n      _applyBounds(this._getLabelBounds());\n\n      // If `bounds` is `'ticks'` and `ticks.source` is `'labels'`,\n      // data bounds are ignored (and don't need to be determined)\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n\n    min = isFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n\n    // Make sure that max is strictly higher than min (required by the timeseries lookup table)\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n\n  /**\n\t * @private\n\t */\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n    return {min, max};\n  }\n\n  /**\n\t * @return {object[]}\n\t */\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n\n    const min = this.min;\n    const max = this.max;\n\n    const ticks = _filterBetween(timestamps, min, max);\n\n    // PRIVATE\n    // determineUnitForFormatting relies on the number of ticks so we don't use it when\n    // autoSkip is enabled because we don't yet know what the final number of ticks will be\n    this._unit = timeOpts.unit || (tickOpts.autoSkip\n      ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min))\n      : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined\n      : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n\n    if (options.reverse) {\n      ticks.reverse();\n    }\n\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n\n  afterAutoSkip() {\n    // Offsets for bar charts need to be handled with the auto skipped\n    // ticks. Once ticks have been skipped, we re-compute the offsets.\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n\n  /**\n\t * Returns the start and end offsets from edges in the form of {start, end}\n\t * where each value is a relative width to the scale and ranges between 0 and 1.\n\t * They add extra margins on the both sides by scaling down the original scale.\n\t * Offsets are added when the `offset` option is true.\n\t * @param {number[]} timestamps\n\t * @protected\n\t */\n  initOffsets(timestamps = []) {\n    let start = 0;\n    let end = 0;\n    let first, last;\n\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n\n    this._offsets = {start, end, factor: 1 / (start + 1 + end)};\n  }\n\n  /**\n\t * Generates a maximum of `capacity` timestamps between min and max, rounded to the\n\t * `minor` unit using the given scale time `options`.\n\t * Important: this method can return ticks outside the min and max range, it's the\n\t * responsibility of the calling code to clamp values if needed.\n\t * @private\n\t */\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    // @ts-ignore\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n\n    // For 'week' unit, handle the first day of week option\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n\n    // Align first ticks on unit\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n\n    // Prevent browser from freezing in case user options request millions of milliseconds\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n\n    // @ts-ignore\n    return Object.keys(ticks).sort((a, b) => a - b).map(x => +x);\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n\n  /**\n\t * @param {number} value\n\t * @param {string|undefined} format\n\t * @return {string}\n\t */\n  format(value, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const fmt = format || formats[unit];\n    return this._adapter.format(value, fmt);\n  }\n\n  /**\n\t * Function to format an individual tick mark\n\t * @param {number} time\n\t * @param {number} index\n\t * @param {object[]} ticks\n\t * @param {string|undefined} [format]\n\t * @return {string}\n\t * @private\n\t */\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formatter = options.ticks.callback;\n\n    if (formatter) {\n      return call(formatter, [time, index, ticks], this);\n    }\n\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n  }\n\n  /**\n\t * @param {object[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n\n  /**\n\t * @param {string} label\n\t * @return {{w:number, h:number}}\n\t * @private\n\t */\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n\n    return {\n      w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),\n      h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)\n    };\n  }\n\n  /**\n\t * @param {number} exampleTime\n\t * @return {number}\n\t * @private\n\t */\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n\n    // pick the longest format (milliseconds) for guestimation\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n    const size = this._getLabelSize(exampleLabel);\n    // subtract 1 - if offset then there's one less label than tick\n    // if not offset then one half label padding is added to each end leaving room for one less label\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n\n    if (this._normalized && metas.length) {\n      return (this._cache.data = metas[0].controller.getAllParsedValues(this));\n    }\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n\n    return (this._cache.data = this.normalize(timestamps));\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const labels = this.getLabels();\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n\n    return (this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps));\n  }\n\n  /**\n\t * @param {number[]} values\n\t * @protected\n\t */\n  normalize(values) {\n    // It seems to be somewhat faster to do sorting first\n    return _arrayUnique(values.sort(sorter));\n  }\n}\n","import TimeScale from './scale.time.js';\nimport {_lookupByKey} from '../helpers/helpers.collection.js';\n\n/**\n * Linearly interpolates the given source `val` using the table. If value is out of bounds, values\n * at edges are used for the interpolation.\n * @param {object} table\n * @param {number} val\n * @param {boolean} [reverse] lookup time based on position instead of vice versa\n * @return {object}\n */\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({lo, hi} = _lookupByKey(table, 'pos', val));\n    }\n    ({pos: prevSource, time: prevTarget} = table[lo]);\n    ({pos: nextSource, time: nextTarget} = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({lo, hi} = _lookupByKey(table, 'time', val));\n    }\n    ({time: prevSource, pos: prevTarget} = table[lo]);\n    ({time: nextSource, pos: nextTarget} = table[hi]);\n  }\n\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\n\nclass TimeSeriesScale extends TimeScale {\n\n  static id = 'timeseries';\n\n  /**\n   * @type {any}\n   */\n  static defaults = TimeScale.defaults;\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {object[]} */\n    this._table = [];\n    /** @type {number} */\n    this._minPos = undefined;\n    /** @type {number} */\n    this._tableRange = undefined;\n  }\n\n  /**\n\t * @protected\n\t */\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n\n  /**\n\t * Returns an array of {time, pos} objects used to interpolate a specific `time` or position\n\t * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is\n\t * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other\n\t * extremity (left + width or top + height). Note that it would be more optimized to directly\n\t * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need\n\t * to create the lookup table. The table ALWAYS contains at least two items: min and max.\n\t * @param {number[]} timestamps\n\t * @return {object[]}\n\t * @protected\n\t */\n  buildLookupTable(timestamps) {\n    const {min, max} = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n\n    if (items.length < 2) {\n      // In case there is less that 2 timestamps between min and max, the scale is defined by min and max\n      return [\n        {time: min, pos: 0},\n        {time: max, pos: 1}\n      ];\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n\n      // only add points that breaks the scale linearity\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({time: curr, pos: i / (ilen - 1)});\n      }\n    }\n    return table;\n  }\n\n  /**\n\t * Returns all timestamps\n\t * @return {number[]}\n\t * @private\n\t */\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n    if (data.length && label.length) {\n      // If combining labels and data (data might not contain all labels),\n      // we need to recheck uniqueness and sort\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n    timestamps = this._cache.all = timestamps;\n\n    return timestamps;\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n}\n\nexport default TimeSeriesScale;\n","export * from './controllers/index.js';\nexport * from './core/index.js';\nexport * from './elements/index.js';\nexport * from './platform/index.js';\nexport * from './plugins/index.js';\nexport * from './scales/index.js';\n\nimport * as controllers from './controllers/index.js';\nimport * as elements from './elements/index.js';\nimport * as plugins from './plugins/index.js';\nimport * as scales from './scales/index.js';\n\nexport {\n  controllers,\n  elements,\n  plugins,\n  scales,\n};\n\nexport const registerables = [\n  controllers,\n  elements,\n  plugins,\n  scales,\n];\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}